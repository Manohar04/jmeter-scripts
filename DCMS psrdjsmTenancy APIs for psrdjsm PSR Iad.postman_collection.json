{
	"info": {
		"_postman_id": "9f7810df-d318-48ed-9bbe-2ce10cf36880",
		"name": "DCMS psrdjsmTenancy APIs for psrdjsm PSR Iad",
		"description": "Postman collection implementing the API request signing required by the Oracle Cloud Infrastructure API, as well as capturing some sample OCI requests.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "demo",
			"item": [
				{
					"name": "mysql",
					"item": [
						{
							"name": "Test Connection MySQL Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{auth-signature}}"
									},
									{
										"key": "hostname",
										"type": "text",
										"value": "{{hostname}}"
									},
									{
										"key": "date",
										"type": "text",
										"value": "{{request-date}}"
									},
									{
										"key": "Content-Length",
										"type": "text",
										"value": "{{content-length}}"
									},
									{
										"key": "x-content-sha256",
										"type": "text",
										"value": "{{content-sha256}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"dataAsset\": {\n        \"name\": \"DA_ORACLEEEWER\",\n        \"identifier\": \"DA_ORACLEEEWER\",\n        \"type\": \"MYSQL_DATA_ASSET\",\n        \"modelType\": \"GENERIC_DATA_ASSET\",\n        \"properties\": {\n            \"host\": \"196.1.1.134\",\n            \"port\": \"3306\"\n        },\n        \"defaultConnection\": {\n            \"name\": \"Default Connectionsswer\",\n            \"modelType\": \"GENERIC_CONNECTION\",\n            \"identifier\": \"DEFAULT_CONNECTIONSSWER\",\n            \"type\": \"MYSQL_CONNECTION\",\n            \"properties\": {\n                \"username\": \"alpha\",\n                \"password\": \"WElcome#_12\"\n            }\n        },\n        \"endPoints\": [\n            {\n                \"modelType\": \"PRIVATE_END_POINT\",\n                \"key\": \"5340f7ea-8e0a-44e9-986a-b6c00699cff1\"\n            }\n        ]\n    },\n    \"connection\": {\n        \"name\": \"Default Connectionsswer\",\n        \"modelType\": \"GENERIC_CONNECTION\",\n        \"identifier\": \"DEFAULT_CONNECTIONSSWER\",\n        \"type\": \"MYSQL_CONNECTION\",\n        \"properties\": {\n            \"username\": \"alpha\",\n            \"password\": \"WElcome#_12\"\n        }\n    }\n}"
								},
								"url": {
									"raw": "http://{{dp-api}}/{{service-dp-api-version}}/registries/{{registry-id}}/connectionValidations",
									"protocol": "http",
									"host": [
										"{{dp-api}}"
									],
									"path": [
										"{{service-dp-api-version}}",
										"registries",
										"{{registry-id}}",
										"connectionValidations"
									]
								}
							},
							"response": []
						},
						{
							"name": "2.1. Create DA MYSQL Disdevtenancy Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{auth-signature}}"
									},
									{
										"key": "hostname",
										"type": "text",
										"value": "{{hostname}}"
									},
									{
										"key": "date",
										"type": "text",
										"value": "{{request-date}}"
									},
									{
										"key": "Content-Length",
										"type": "text",
										"value": "{{content-length}}"
									},
									{
										"key": "x-content-sha256",
										"type": "text",
										"value": "{{content-sha256}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"DA_MYSQLWER\",\n    \"identifier\": \"DA_MYSQLWER\",\n    \"type\": \"MYSQL_DATA_ASSET\",\n    \"modelType\": \"GENERIC_DATA_ASSET\",\n    \"properties\": {\n        \"host\": \"196.1.1.134\",\n        \"port\": \"3306\"\n    },\n    \"defaultConnection\": {\n        \"name\": \"Default Connectionsswer\",\n        \"modelType\": \"GENERIC_CONNECTION\",\n        \"identifier\": \"DEFAULT_CONNECTIONSSWER\",\n        \"type\": \"MYSQL_CONNECTION\",\n        \"properties\": {\n            \"username\": \"alpha\",\n            \"password\": \"WElcome#_12\"\n        }\n    },\n    \"registryMetadata\": {\n        \"aggregatorKey\": \"ef720ca9-0fef-434c-a08c-e6746e69d895\"\n    },\n    \"endPoints\": [\n        {\n            \"modelType\": \"PRIVATE_END_POINT\",\n            \"key\": \"5340f7ea-8e0a-44e9-986a-b6c00699cff1\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8081/{{service-api-version}}/registries/{{registry-id}}/dataAssets?folderKey=ef720ca9-0fef-434c-a08c-e6746e69d895",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8081",
									"path": [
										"{{service-api-version}}",
										"registries",
										"{{registry-id}}",
										"dataAssets"
									],
									"query": [
										{
											"key": "folderKey",
											"value": "ef720ca9-0fef-434c-a08c-e6746e69d895"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List Schemas MySQL",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{auth-signature}}"
									},
									{
										"key": "hostname",
										"type": "text",
										"value": "{{hostname}}"
									},
									{
										"key": "date",
										"type": "text",
										"value": "{{request-date}}"
									},
									{
										"key": "Content-Length",
										"type": "text",
										"value": "{{content-length}}",
										"disabled": true
									},
									{
										"key": "x-content-sha256",
										"type": "text",
										"value": "{{content-sha256}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:8081/{{service-api-version}}/registries/{{registry-id}}/connections/dc5de092-4545-4807-b1e8-ff80160cc791/schemas?dataAssetKey=d747856f-09ba-49dc-9409-942977b4df79&folderKey=ef720ca9-0fef-434c-a08c-e6746e69d895",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8081",
									"path": [
										"{{service-api-version}}",
										"registries",
										"{{registry-id}}",
										"connections",
										"dc5de092-4545-4807-b1e8-ff80160cc791",
										"schemas"
									],
									"query": [
										{
											"key": "dataAssetKey",
											"value": "d747856f-09ba-49dc-9409-942977b4df79"
										},
										{
											"key": "folderKey",
											"value": "ef720ca9-0fef-434c-a08c-e6746e69d895"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List entitiy MySQL",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{auth-signature}}"
									},
									{
										"key": "hostname",
										"type": "text",
										"value": "{{hostname}}"
									},
									{
										"key": "date",
										"type": "text",
										"value": "{{request-date}}"
									},
									{
										"key": "Content-Length",
										"type": "text",
										"value": "{{content-length}}",
										"disabled": true
									},
									{
										"key": "x-content-sha256",
										"type": "text",
										"value": "{{content-sha256}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:8081/{{service-api-version}}/registries/{{registry-id}}/connections/dc5de092-4545-4807-b1e8-ff80160cc791/schemas/mysql/dataEntities?dataAssetKey=d747856f-09ba-49dc-9409-942977b4df79&folderKey=ef720ca9-0fef-434c-a08c-e6746e69d895",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8081",
									"path": [
										"{{service-api-version}}",
										"registries",
										"{{registry-id}}",
										"connections",
										"dc5de092-4545-4807-b1e8-ff80160cc791",
										"schemas",
										"mysql",
										"dataEntities"
									],
									"query": [
										{
											"key": "dataAssetKey",
											"value": "d747856f-09ba-49dc-9409-942977b4df79"
										},
										{
											"key": "folderKey",
											"value": "ef720ca9-0fef-434c-a08c-e6746e69d895"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "EntityShape MySQL",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{auth-signature}}"
									},
									{
										"key": "hostname",
										"type": "text",
										"value": "{{hostname}}"
									},
									{
										"key": "date",
										"type": "text",
										"value": "{{request-date}}"
									},
									{
										"key": "Content-Length",
										"type": "text",
										"value": "{{content-length}}"
									},
									{
										"key": "x-content-sha256",
										"type": "text",
										"value": "{{content-sha256}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"modelType\": \"TABLE_ENTITY\",\n    \"name\": \"component\",\n    \"resourceName\": \"TABLE_ENTITY:component\"\n}"
								},
								"url": {
									"raw": "http://localhost:8081/{{service-api-version}}/registries/{{registry-id}}/connections/dc5de092-4545-4807-b1e8-ff80160cc791/schemas/mysql/entityShapes?dataAssetKey=d747856f-09ba-49dc-9409-942977b4df79&folderKey=ef720ca9-0fef-434c-a08c-e6746e69d895",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8081",
									"path": [
										"{{service-api-version}}",
										"registries",
										"{{registry-id}}",
										"connections",
										"dc5de092-4545-4807-b1e8-ff80160cc791",
										"schemas",
										"mysql",
										"entityShapes"
									],
									"query": [
										{
											"key": "dataAssetKey",
											"value": "d747856f-09ba-49dc-9409-942977b4df79"
										},
										{
											"key": "folderKey",
											"value": "ef720ca9-0fef-434c-a08c-e6746e69d895"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "OOS",
					"item": [
						{
							"name": "Test Connection OOS",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{auth-signature}}"
									},
									{
										"key": "hostname",
										"type": "text",
										"value": "{{hostname}}"
									},
									{
										"key": "date",
										"type": "text",
										"value": "{{request-date}}"
									},
									{
										"key": "Content-Length",
										"type": "text",
										"value": "{{content-length}}"
									},
									{
										"key": "x-content-sha256",
										"type": "text",
										"value": "{{content-sha256}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"dataAsset\": {\n        \"name\": \"DA_ORACLEEEWER\",\n        \"identifier\": \"DA_ORACLEEEWER\",\n        \"type\": \"MYSQL_DATA_ASSET\",\n        \"modelType\": \"GENERIC_DATA_ASSET\",\n        \"properties\": {\n            \"host\": \"196.1.1.134\",\n            \"port\": \"3306\"\n        },\n        \"defaultConnection\": {\n            \"name\": \"Default Connectionsswer\",\n            \"modelType\": \"GENERIC_CONNECTION\",\n            \"identifier\": \"DEFAULT_CONNECTIONSSWER\",\n            \"type\": \"MYSQL_CONNECTION\",\n            \"properties\": {\n                \"username\": \"alpha\",\n                \"password\": \"WElcome#_12\"\n            }\n        },\n        \"endPoints\": [\n            {\n                \"modelType\": \"PRIVATE_END_POINT\",\n                \"key\": \"5340f7ea-8e0a-44e9-986a-b6c00699cff1\"\n            }\n        ]\n    },\n    \"connection\": {\n        \"name\": \"Default Connectionsswer\",\n        \"modelType\": \"GENERIC_CONNECTION\",\n        \"identifier\": \"DEFAULT_CONNECTIONSSWER\",\n        \"type\": \"MYSQL_CONNECTION\",\n        \"properties\": {\n            \"username\": \"alpha\",\n            \"password\": \"WElcome#_12\"\n        }\n    }\n}"
								},
								"url": {
									"raw": "http://localhost:8081/{{service-api-version}}/registries/{{registry-id}}/connectionValidations",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8081",
									"path": [
										"{{service-api-version}}",
										"registries",
										"{{registry-id}}",
										"connectionValidations"
									]
								}
							},
							"response": []
						},
						{
							"name": "2.1. Create DA MYSQL Disdevtenancy Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{auth-signature}}"
									},
									{
										"key": "hostname",
										"type": "text",
										"value": "{{hostname}}"
									},
									{
										"key": "date",
										"type": "text",
										"value": "{{request-date}}"
									},
									{
										"key": "Content-Length",
										"type": "text",
										"value": "{{content-length}}"
									},
									{
										"key": "x-content-sha256",
										"type": "text",
										"value": "{{content-sha256}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"DA_MYSQLWER\",\n    \"identifier\": \"DA_MYSQLWER\",\n    \"type\": \"MYSQL_DATA_ASSET\",\n    \"modelType\": \"GENERIC_DATA_ASSET\",\n    \"properties\": {\n        \"host\": \"196.1.1.134\",\n        \"port\": \"3306\"\n    },\n    \"defaultConnection\": {\n        \"name\": \"Default Connectionsswer\",\n        \"modelType\": \"GENERIC_CONNECTION\",\n        \"identifier\": \"DEFAULT_CONNECTIONSSWER\",\n        \"type\": \"MYSQL_CONNECTION\",\n        \"properties\": {\n            \"username\": \"alpha\",\n            \"password\": \"WElcome#_12\"\n        }\n    },\n    \"registryMetadata\": {\n        \"aggregatorKey\": \"ef720ca9-0fef-434c-a08c-e6746e69d895\"\n    },\n    \"endPoints\": [\n        {\n            \"modelType\": \"PRIVATE_END_POINT\",\n            \"key\": \"5340f7ea-8e0a-44e9-986a-b6c00699cff1\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8081/{{service-api-version}}/registries/{{registry-id}}/dataAssets?folderKey=ef720ca9-0fef-434c-a08c-e6746e69d895",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8081",
									"path": [
										"{{service-api-version}}",
										"registries",
										"{{registry-id}}",
										"dataAssets"
									],
									"query": [
										{
											"key": "folderKey",
											"value": "ef720ca9-0fef-434c-a08c-e6746e69d895"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List Schemas MySQL",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{auth-signature}}"
									},
									{
										"key": "hostname",
										"type": "text",
										"value": "{{hostname}}"
									},
									{
										"key": "date",
										"type": "text",
										"value": "{{request-date}}"
									},
									{
										"key": "Content-Length",
										"type": "text",
										"value": "{{content-length}}",
										"disabled": true
									},
									{
										"key": "x-content-sha256",
										"type": "text",
										"value": "{{content-sha256}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:8081/{{service-api-version}}/registries/{{registry-id}}/connections/dc5de092-4545-4807-b1e8-ff80160cc791/schemas?dataAssetKey=d747856f-09ba-49dc-9409-942977b4df79&folderKey=ef720ca9-0fef-434c-a08c-e6746e69d895",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8081",
									"path": [
										"{{service-api-version}}",
										"registries",
										"{{registry-id}}",
										"connections",
										"dc5de092-4545-4807-b1e8-ff80160cc791",
										"schemas"
									],
									"query": [
										{
											"key": "dataAssetKey",
											"value": "d747856f-09ba-49dc-9409-942977b4df79"
										},
										{
											"key": "folderKey",
											"value": "ef720ca9-0fef-434c-a08c-e6746e69d895"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List entitiy MySQL",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{auth-signature}}"
									},
									{
										"key": "hostname",
										"type": "text",
										"value": "{{hostname}}"
									},
									{
										"key": "date",
										"type": "text",
										"value": "{{request-date}}"
									},
									{
										"key": "Content-Length",
										"type": "text",
										"value": "{{content-length}}",
										"disabled": true
									},
									{
										"key": "x-content-sha256",
										"type": "text",
										"value": "{{content-sha256}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:8081/{{service-api-version}}/registries/{{registry-id}}/connections/dc5de092-4545-4807-b1e8-ff80160cc791/schemas/mysql/dataEntities?dataAssetKey=d747856f-09ba-49dc-9409-942977b4df79&folderKey=ef720ca9-0fef-434c-a08c-e6746e69d895",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8081",
									"path": [
										"{{service-api-version}}",
										"registries",
										"{{registry-id}}",
										"connections",
										"dc5de092-4545-4807-b1e8-ff80160cc791",
										"schemas",
										"mysql",
										"dataEntities"
									],
									"query": [
										{
											"key": "dataAssetKey",
											"value": "d747856f-09ba-49dc-9409-942977b4df79"
										},
										{
											"key": "folderKey",
											"value": "ef720ca9-0fef-434c-a08c-e6746e69d895"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "EntityShape MySQL",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{auth-signature}}"
									},
									{
										"key": "hostname",
										"type": "text",
										"value": "{{hostname}}"
									},
									{
										"key": "date",
										"type": "text",
										"value": "{{request-date}}"
									},
									{
										"key": "Content-Length",
										"type": "text",
										"value": "{{content-length}}"
									},
									{
										"key": "x-content-sha256",
										"type": "text",
										"value": "{{content-sha256}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"modelType\": \"TABLE_ENTITY\",\n    \"name\": \"component\",\n    \"resourceName\": \"TABLE_ENTITY:component\"\n}"
								},
								"url": {
									"raw": "http://localhost:8081/{{service-api-version}}/registries/{{registry-id}}/connections/dc5de092-4545-4807-b1e8-ff80160cc791/schemas/mysql/entityShapes?dataAssetKey=d747856f-09ba-49dc-9409-942977b4df79&folderKey=ef720ca9-0fef-434c-a08c-e6746e69d895",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8081",
									"path": [
										"{{service-api-version}}",
										"registries",
										"{{registry-id}}",
										"connections",
										"dc5de092-4545-4807-b1e8-ff80160cc791",
										"schemas",
										"mysql",
										"entityShapes"
									],
									"query": [
										{
											"key": "dataAssetKey",
											"value": "d747856f-09ba-49dc-9409-942977b4df79"
										},
										{
											"key": "folderKey",
											"value": "ef720ca9-0fef-434c-a08c-e6746e69d895"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "ADW",
					"item": [
						{
							"name": "Test Connection ADW",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{auth-signature}}"
									},
									{
										"key": "hostname",
										"type": "text",
										"value": "{{hostname}}"
									},
									{
										"key": "date",
										"type": "text",
										"value": "{{request-date}}"
									},
									{
										"key": "Content-Length",
										"type": "text",
										"value": "{{content-length}}"
									},
									{
										"key": "x-content-sha256",
										"type": "text",
										"value": "{{content-sha256}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"dataAsset\": {\n        \"name\": \"DA_ORACLEEEWER\",\n        \"identifier\": \"DA_ORACLEEEWER\",\n        \"type\": \"ORACLE_ADWC_DATA_ASSET\",\n        \"modelType\": \"GENERIC_DATA_ASSET\",\n        \"properties\": {\n            \"walletSecret\": {\n                \"value\": \"\"\n            },\n            \"databaseOCID\": \"1\"\n        },\n        \"defaultConnection\": {\n            \"name\": \"Default Connectionsswer\",\n            \"modelType\": \"GENERIC_CONNECTION\",\n            \"identifier\": \"DEFAULT_CONNECTIONSSWER\",\n            \"type\": \"ORACLE_ADWC_CONNECTION\",\n            \"properties\": {\n                \"username\": \"admin\",\n                \"password\": \"Welcome#@1234\",\n                \"tnsAlias\": \"db202003281057_high\"\n            }\n        },\n        \"endPoints\": [\n            {\n                \"modelType\": \"PRIVATE_END_POINT\",\n                \"key\": \"5340f7ea-8e0a-44e9-986a-b6c00699cff1\"\n            }\n        ]\n    },\n    \"connection\": {\n        \"name\": \"Default Connectionsswer\",\n        \"modelType\": \"GENERIC_CONNECTION\",\n        \"identifier\": \"DEFAULT_CONNECTIONSSWER\",\n        \"type\": \"ORACLE_ADWC_CONNECTION\",\n        \"properties\": {\n            \"username\": \"admin\",\n            \"password\": \"Welcome#@1234\",\n            \"tnsAlias\": \"db202003281057_high\"\n        }\n    }\n}"
								},
								"url": {
									"raw": "http://localhost:8081/{{service-api-version}}/registries/{{registry-id}}/connectionValidations",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8081",
									"path": [
										"{{service-api-version}}",
										"registries",
										"{{registry-id}}",
										"connectionValidations"
									]
								}
							},
							"response": []
						},
						{
							"name": "2.1. Create DA MYSQL Disdevtenancy Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{auth-signature}}"
									},
									{
										"key": "hostname",
										"type": "text",
										"value": "{{hostname}}"
									},
									{
										"key": "date",
										"type": "text",
										"value": "{{request-date}}"
									},
									{
										"key": "Content-Length",
										"type": "text",
										"value": "{{content-length}}"
									},
									{
										"key": "x-content-sha256",
										"type": "text",
										"value": "{{content-sha256}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"DA_MYSQLWER\",\n    \"identifier\": \"DA_MYSQLWER\",\n    \"type\": \"MYSQL_DATA_ASSET\",\n    \"modelType\": \"GENERIC_DATA_ASSET\",\n    \"properties\": {\n        \"host\": \"196.1.1.134\",\n        \"port\": \"3306\"\n    },\n    \"defaultConnection\": {\n        \"name\": \"Default Connectionsswer\",\n        \"modelType\": \"GENERIC_CONNECTION\",\n        \"identifier\": \"DEFAULT_CONNECTIONSSWER\",\n        \"type\": \"MYSQL_CONNECTION\",\n        \"properties\": {\n            \"username\": \"alpha\",\n            \"password\": \"WElcome#_12\"\n        }\n    },\n    \"registryMetadata\": {\n        \"aggregatorKey\": \"ef720ca9-0fef-434c-a08c-e6746e69d895\"\n    },\n    \"endPoints\": [\n        {\n            \"modelType\": \"PRIVATE_END_POINT\",\n            \"key\": \"5340f7ea-8e0a-44e9-986a-b6c00699cff1\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8081/{{service-api-version}}/registries/{{registry-id}}/dataAssets?folderKey=ef720ca9-0fef-434c-a08c-e6746e69d895",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8081",
									"path": [
										"{{service-api-version}}",
										"registries",
										"{{registry-id}}",
										"dataAssets"
									],
									"query": [
										{
											"key": "folderKey",
											"value": "ef720ca9-0fef-434c-a08c-e6746e69d895"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List Schemas MySQL",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{auth-signature}}"
									},
									{
										"key": "hostname",
										"type": "text",
										"value": "{{hostname}}"
									},
									{
										"key": "date",
										"type": "text",
										"value": "{{request-date}}"
									},
									{
										"key": "Content-Length",
										"type": "text",
										"value": "{{content-length}}",
										"disabled": true
									},
									{
										"key": "x-content-sha256",
										"type": "text",
										"value": "{{content-sha256}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:8081/{{service-api-version}}/registries/{{registry-id}}/connections/dc5de092-4545-4807-b1e8-ff80160cc791/schemas?dataAssetKey=d747856f-09ba-49dc-9409-942977b4df79&folderKey=ef720ca9-0fef-434c-a08c-e6746e69d895",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8081",
									"path": [
										"{{service-api-version}}",
										"registries",
										"{{registry-id}}",
										"connections",
										"dc5de092-4545-4807-b1e8-ff80160cc791",
										"schemas"
									],
									"query": [
										{
											"key": "dataAssetKey",
											"value": "d747856f-09ba-49dc-9409-942977b4df79"
										},
										{
											"key": "folderKey",
											"value": "ef720ca9-0fef-434c-a08c-e6746e69d895"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List entitiy MySQL",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{auth-signature}}"
									},
									{
										"key": "hostname",
										"type": "text",
										"value": "{{hostname}}"
									},
									{
										"key": "date",
										"type": "text",
										"value": "{{request-date}}"
									},
									{
										"key": "Content-Length",
										"type": "text",
										"value": "{{content-length}}",
										"disabled": true
									},
									{
										"key": "x-content-sha256",
										"type": "text",
										"value": "{{content-sha256}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:8081/{{service-api-version}}/registries/{{registry-id}}/connections/dc5de092-4545-4807-b1e8-ff80160cc791/schemas/mysql/dataEntities?dataAssetKey=d747856f-09ba-49dc-9409-942977b4df79&folderKey=ef720ca9-0fef-434c-a08c-e6746e69d895",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8081",
									"path": [
										"{{service-api-version}}",
										"registries",
										"{{registry-id}}",
										"connections",
										"dc5de092-4545-4807-b1e8-ff80160cc791",
										"schemas",
										"mysql",
										"dataEntities"
									],
									"query": [
										{
											"key": "dataAssetKey",
											"value": "d747856f-09ba-49dc-9409-942977b4df79"
										},
										{
											"key": "folderKey",
											"value": "ef720ca9-0fef-434c-a08c-e6746e69d895"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "EntityShape MySQL",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{auth-signature}}"
									},
									{
										"key": "hostname",
										"type": "text",
										"value": "{{hostname}}"
									},
									{
										"key": "date",
										"type": "text",
										"value": "{{request-date}}"
									},
									{
										"key": "Content-Length",
										"type": "text",
										"value": "{{content-length}}"
									},
									{
										"key": "x-content-sha256",
										"type": "text",
										"value": "{{content-sha256}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"modelType\": \"TABLE_ENTITY\",\n    \"name\": \"component\",\n    \"resourceName\": \"TABLE_ENTITY:component\"\n}"
								},
								"url": {
									"raw": "http://localhost:8081/{{service-api-version}}/registries/{{registry-id}}/connections/dc5de092-4545-4807-b1e8-ff80160cc791/schemas/mysql/entityShapes?dataAssetKey=d747856f-09ba-49dc-9409-942977b4df79&folderKey=ef720ca9-0fef-434c-a08c-e6746e69d895",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8081",
									"path": [
										"{{service-api-version}}",
										"registries",
										"{{registry-id}}",
										"connections",
										"dc5de092-4545-4807-b1e8-ff80160cc791",
										"schemas",
										"mysql",
										"entityShapes"
									],
									"query": [
										{
											"key": "dataAssetKey",
											"value": "d747856f-09ba-49dc-9409-942977b4df79"
										},
										{
											"key": "folderKey",
											"value": "ef720ca9-0fef-434c-a08c-e6746e69d895"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Create new registry CP working",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{auth-signature}}"
							},
							{
								"key": "hostname",
								"type": "text",
								"value": "{{hostname}}"
							},
							{
								"key": "date",
								"type": "text",
								"value": "{{request-date}}"
							},
							{
								"key": "Content-Length",
								"type": "text",
								"value": "{{content-length}}"
							},
							{
								"key": "x-content-sha256",
								"type": "text",
								"value": "{{content-sha256}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"displayName\": \"REGISTRY_PSR_SCRIPT\",\n    \"compartmentId\": \"{{compartmentId}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cp-api}}/{{service-api-version}}/registries?compartmentId={{compartmentId}}",
							"protocol": "https",
							"host": [
								"{{cp-api}}"
							],
							"path": [
								"{{service-api-version}}",
								"registries"
							],
							"query": [
								{
									"key": "compartmentId",
									"value": "{{compartmentId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Lisgt registry CP working",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{auth-signature}}"
							},
							{
								"key": "hostname",
								"type": "text",
								"value": "{{hostname}}"
							},
							{
								"key": "date",
								"type": "text",
								"value": "{{request-date}}"
							},
							{
								"key": "Content-Length",
								"type": "text",
								"value": "{{content-length}}"
							},
							{
								"key": "x-content-sha256",
								"type": "text",
								"value": "{{content-sha256}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"displayName\": \"Registry_validation_pvt_new\",\n    \"compartmentId\": \"ocid1.compartment.oc1..aaaaaaaacj4wvdw5pctpj2kcxtbafv5ffuouivblpgadwwjwq7hhhvzaatwa\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cp-api}}/{{service-api-version}}/registries?compartmentId={{compartmentId}}",
							"protocol": "https",
							"host": [
								"{{cp-api}}"
							],
							"path": [
								"{{service-api-version}}",
								"registries"
							],
							"query": [
								{
									"key": "compartmentId",
									"value": "{{compartmentId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete  registry CP working isForceOperation=true",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{auth-signature}}"
							},
							{
								"key": "hostname",
								"type": "text",
								"value": "{{hostname}}"
							},
							{
								"key": "date",
								"type": "text",
								"value": "{{request-date}}"
							},
							{
								"key": "Content-Length",
								"type": "text",
								"value": "{{content-length}}"
							},
							{
								"key": "x-content-sha256",
								"type": "text",
								"value": "{{content-sha256}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"displayName\": \"Registry_validation_pvt_new\",\n    \"compartmentId\": \"ocid1.compartment.oc1..aaaaaaaacj4wvdw5pctpj2kcxtbafv5ffuouivblpgadwwjwq7hhhvzaatwa\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cp-api}}/{{service-api-version}}/registries/ocid1.dcmsregistry.oc1.iad.anuwcljsmvkuopyajsdjh7l3cohrmvievphviw2vvrfc7su7d2mnggckdbsq?isForceOperation=true",
							"protocol": "https",
							"host": [
								"{{cp-api}}"
							],
							"path": [
								"{{service-api-version}}",
								"registries",
								"ocid1.dcmsregistry.oc1.iad.anuwcljsmvkuopyajsdjh7l3cohrmvievphviw2vvrfc7su7d2mnggckdbsq"
							],
							"query": [
								{
									"key": "isForceOperation",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Lisgt registry CP working Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{auth-signature}}"
							},
							{
								"key": "hostname",
								"type": "text",
								"value": "{{hostname}}"
							},
							{
								"key": "date",
								"type": "text",
								"value": "{{request-date}}"
							},
							{
								"key": "Content-Length",
								"type": "text",
								"value": "{{content-length}}"
							},
							{
								"key": "x-content-sha256",
								"type": "text",
								"value": "{{content-sha256}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"displayName\": \"Registry_validation_pvt_new\",\n    \"compartmentId\": \"ocid1.compartment.oc1..aaaaaaaacj4wvdw5pctpj2kcxtbafv5ffuouivblpgadwwjwq7hhhvzaatwa\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cp-api}}/{{service-api-version}}/registries/{{registry-id}}/types",
							"protocol": "https",
							"host": [
								"{{cp-api}}"
							],
							"path": [
								"{{service-api-version}}",
								"registries",
								"{{registry-id}}",
								"types"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new endpoint CP OLd Phx",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{auth-signature}}"
							},
							{
								"key": "hostname",
								"type": "text",
								"value": "{{hostname}}"
							},
							{
								"key": "date",
								"type": "text",
								"value": "{{request-date}}"
							},
							{
								"key": "Content-Length",
								"type": "text",
								"value": "{{content-length}}"
							},
							{
								"key": "x-content-sha256",
								"type": "text",
								"value": "{{content-sha256}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"displayName\": \"disdevtenancyendpoint_endpoint_for_psr_script1\",\n    \"compartmentId\": \"ocid1.compartment.oc1..aaaaaaaacj4wvdw5pctpj2kcxtbafv5ffuouivblpgadwwjwq7hhhvzaatwa\",\n    \"subnetId\": \"ocid1.subnet.oc1.phx.aaaaaaaagbqewa4tveqn7kakvfluazl3spakofzsowan4tu72qnata7tm6sa\",\n    \"vcnId\": \"ocid1.vcn.oc1.phx.amaaaaaaosqi62qaq5jim2eh2qlyq3vqdctpcpabpg2lurty5ssr2bddkyna\",\n    \"dnsZones\": [\n        \"phoenixvcn.oraclevcn.com\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cp-api}}/{{service-api-version}}/registries/{{registry-id}}/endpoints?compartmentId={{compartmentId}}",
							"protocol": "https",
							"host": [
								"{{cp-api}}"
							],
							"path": [
								"{{service-api-version}}",
								"registries",
								"{{registry-id}}",
								"endpoints"
							],
							"query": [
								{
									"key": "compartmentId",
									"value": "{{compartmentId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new endpoint CP Working old",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{auth-signature}}"
							},
							{
								"key": "hostname",
								"type": "text",
								"value": "{{hostname}}"
							},
							{
								"key": "date",
								"type": "text",
								"value": "{{request-date}}"
							},
							{
								"key": "Content-Length",
								"type": "text",
								"value": "{{content-length}}"
							},
							{
								"key": "x-content-sha256",
								"type": "text",
								"value": "{{content-sha256}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"displayName\": \"PSR_ENDPOINT_PREPROD\",\n    \"compartmentId\": \"{{compartmentId}}\",\n    \"subnetId\": \"ocid1.subnet.oc1.iad.aaaaaaaaz2n3tjqokl4ijfpick4qua5xxzgh5qyy2gt2qsweoeep3capipba\",\n    \"vcnId\": \"ocid1.vcn.oc1.iad.aaaaaaaaw2ixch5oyetqyhsydcuycqogi7mcg4vdrjmqwupt23upfx2esaoa\",\n    \"dnsZones\": [\n        \"psrdjsm1iad.oraclevcn.com\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cp-api}}/{{service-api-version}}/registries/{{registry-id}}/endpoints?compartmentId={{compartmentId}}",
							"protocol": "https",
							"host": [
								"{{cp-api}}"
							],
							"path": [
								"{{service-api-version}}",
								"registries",
								"{{registry-id}}",
								"endpoints"
							],
							"query": [
								{
									"key": "compartmentId",
									"value": "{{compartmentId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new endpoint CP Working Hardcode Iad psrdjsm",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{auth-signature}}"
							},
							{
								"key": "hostname",
								"type": "text",
								"value": "{{hostname}}"
							},
							{
								"key": "date",
								"type": "text",
								"value": "{{request-date}}"
							},
							{
								"key": "Content-Length",
								"type": "text",
								"value": "{{content-length}}"
							},
							{
								"key": "x-content-sha256",
								"type": "text",
								"value": "{{content-sha256}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"displayName\": \"PSR_ENDPOINT_PREPROD_SCRIPT_3\",\n    \"compartmentId\": \"ocid1.compartment.oc1..aaaaaaaaie5ssrmlumn6qi4iu5fhleuusiwkqsnnkxrmlfghoc4aos5rvm6a\",\n    \"subnetId\": \"ocid1.subnet.oc1.iad.aaaaaaaaz2n3tjqokl4ijfpick4qua5xxzgh5qyy2gt2qsweoeep3capipba\",\n    \"vcnId\": \"ocid1.vcn.oc1.iad.aaaaaaaaw2ixch5oyetqyhsydcuycqogi7mcg4vdrjmqwupt23upfx2esaoa\",\n    \"dnsZones\": [\n        \"psrdjsm1iad.oraclevcn.com\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cp-api}}/20210217/endpoints?registryId={{registry-id}}&compartmentId={{compartmentId}}",
							"protocol": "https",
							"host": [
								"{{cp-api}}"
							],
							"path": [
								"20210217",
								"endpoints"
							],
							"query": [
								{
									"key": "registryId",
									"value": "{{registry-id}}"
								},
								{
									"key": "compartmentId",
									"value": "{{compartmentId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new endpoint CP Working Iad psrdjsm Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{auth-signature}}"
							},
							{
								"key": "hostname",
								"type": "text",
								"value": "{{hostname}}"
							},
							{
								"key": "date",
								"type": "text",
								"value": "{{request-date}}"
							},
							{
								"key": "Content-Length",
								"type": "text",
								"value": "{{content-length}}"
							},
							{
								"key": "x-content-sha256",
								"type": "text",
								"value": "{{content-sha256}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"displayName\": \"PSR_ENDPOINT_PREPROD_SCRIPT\",\n    \"compartmentId\": \"{{compartmentId}}\",\n    \"subnetId\": \"{{subNetId}}\",\n    \"vcnId\": \"{{vcnId}}\",\n    \"dnsZones\": [\n        \"{{dnsZoneName}}\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cp-api}}/20210217/endpoints?registryId={{registry-id}}&compartmentId={{compartmentId}}",
							"protocol": "https",
							"host": [
								"{{cp-api}}"
							],
							"path": [
								"20210217",
								"endpoints"
							],
							"query": [
								{
									"key": "registryId",
									"value": "{{registry-id}}"
								},
								{
									"key": "compartmentId",
									"value": "{{compartmentId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new endpoint CP DIS Comp Working Iad psrdjsm",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{auth-signature}}"
							},
							{
								"key": "hostname",
								"type": "text",
								"value": "{{hostname}}"
							},
							{
								"key": "date",
								"type": "text",
								"value": "{{request-date}}"
							},
							{
								"key": "Content-Length",
								"type": "text",
								"value": "{{content-length}}"
							},
							{
								"key": "x-content-sha256",
								"type": "text",
								"value": "{{content-sha256}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"displayName\": \"PSR_ENDPOINT_PREPROD_SCRIPT\",\n    \"compartmentId\": \"{{compartmentId}}\",\n    \"subnetId\": \"{{subNetId}}\",\n    \"vcnId\": \"{{vcnId}}\",\n    \"dnsZones\": [\n        \"{{dnsZoneName}}\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cp-api}}/20210217/endpoints?registryId={{registry-id}}&compartmentId={{compartmentId}}",
							"protocol": "https",
							"host": [
								"{{cp-api}}"
							],
							"path": [
								"20210217",
								"endpoints"
							],
							"query": [
								{
									"key": "registryId",
									"value": "{{registry-id}}"
								},
								{
									"key": "compartmentId",
									"value": "{{compartmentId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new endpoint CP Copy 2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{auth-signature}}"
							},
							{
								"key": "hostname",
								"type": "text",
								"value": "{{hostname}}"
							},
							{
								"key": "date",
								"type": "text",
								"value": "{{request-date}}"
							},
							{
								"key": "Content-Length",
								"type": "text",
								"value": "{{content-length}}"
							},
							{
								"key": "x-content-sha256",
								"type": "text",
								"value": "{{content-sha256}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"displayName\": \"disdevtenancyendpoint_endpoint_for_psr_script1\",\n    \"compartmentId\": \"ocid1.compartment.oc1..aaaaaaaacj4wvdw5pctpj2kcxtbafv5ffuouivblpgadwwjwq7hhhvzaatwa\",\n    \"subnetId\": \"ocid1.subnet.oc1.phx.aaaaaaaagbqewa4tveqn7kakvfluazl3spakofzsowan4tu72qnata7tm6sa\",\n    \"vcnId\": \"ocid1.vcn.oc1.phx.amaaaaaaosqi62qaq5jim2eh2qlyq3vqdctpcpabpg2lurty5ssr2bddkyna\",\n    \"dnsZones\": [\n        \"phoenixvcn.oraclevcn.com\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cp-api}}/{{service-api-version}}/registries/{{registry-id}}/endpoints?compartmentId={{compartmentId}}",
							"protocol": "https",
							"host": [
								"{{cp-api}}"
							],
							"path": [
								"{{service-api-version}}",
								"registries",
								"{{registry-id}}",
								"endpoints"
							],
							"query": [
								{
									"key": "compartmentId",
									"value": "{{compartmentId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get endpoint CP working",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{auth-signature}}"
							},
							{
								"key": "hostname",
								"type": "text",
								"value": "{{hostname}}"
							},
							{
								"key": "date",
								"type": "text",
								"value": "{{request-date}}"
							},
							{
								"key": "Content-Length",
								"type": "text",
								"value": "{{content-length}}"
							},
							{
								"key": "x-content-sha256",
								"type": "text",
								"value": "{{content-sha256}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"modelType\": \"PRIVATE_END_POINT\",\n    \"identifier\": \"TEST_PRIVATE_END_POINTR\",\n    \"parentRef\": {},\n    \"description\": \"TEST_PRIVATE_END_POINT\",\n    \"name\": \"pe_teste\",\n    \"dcmsEndpointId\": \"ocid1.endpointservice.oc1.phx.aaaaaaaamma3fvgw5xlefdoio4f2nfx5fn76yfezbdcnlls2jiaisydl3rra\",\n    \"peId\": \"ocid1.privateendpoint.oc1.phx.aaaaaaaaeetp4i5umqbhr66bp5n3q7j6j4bsjss7gjrqfzdsgq6ab4ryx7ia\",\n    \"compartmentId\": \"ocid1.compartment.oc1..aaaaaaaarbixr6kly2asc2qhox6ucmxmi3sglhh4c5hglkpa2pajp6dtrfgq\",\n    \"dnsProxyIp\": \"10.1.0.14\",\n    \"privateEndpointIp\": \"10.0.0.2\",\n    \"state\": \"ACTIVE\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cp-api}}/{{service-api-version}}/endpoints?registryId={{registry-id}}&compartmentId={{compartmentId}}",
							"protocol": "https",
							"host": [
								"{{cp-api}}"
							],
							"path": [
								"{{service-api-version}}",
								"endpoints"
							],
							"query": [
								{
									"key": "registryId",
									"value": "{{registry-id}}"
								},
								{
									"key": "compartmentId",
									"value": "{{compartmentId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get endpoint CP Testing Old Compartment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{auth-signature}}"
							},
							{
								"key": "hostname",
								"type": "text",
								"value": "{{hostname}}"
							},
							{
								"key": "date",
								"type": "text",
								"value": "{{request-date}}"
							},
							{
								"key": "Content-Length",
								"type": "text",
								"value": "{{content-length}}"
							},
							{
								"key": "x-content-sha256",
								"type": "text",
								"value": "{{content-sha256}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"modelType\": \"PRIVATE_END_POINT\",\n    \"identifier\": \"TEST_PRIVATE_END_POINTR\",\n    \"parentRef\": {},\n    \"description\": \"TEST_PRIVATE_END_POINT\",\n    \"name\": \"pe_teste\",\n    \"dcmsEndpointId\": \"ocid1.endpointservice.oc1.phx.aaaaaaaamma3fvgw5xlefdoio4f2nfx5fn76yfezbdcnlls2jiaisydl3rra\",\n    \"peId\": \"ocid1.privateendpoint.oc1.phx.aaaaaaaaeetp4i5umqbhr66bp5n3q7j6j4bsjss7gjrqfzdsgq6ab4ryx7ia\",\n    \"compartmentId\": \"ocid1.compartment.oc1..aaaaaaaarbixr6kly2asc2qhox6ucmxmi3sglhh4c5hglkpa2pajp6dtrfgq\",\n    \"dnsProxyIp\": \"10.1.0.14\",\n    \"privateEndpointIp\": \"10.0.0.2\",\n    \"state\": \"ACTIVE\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cp-api}}/{{service-api-version}}/endpoints?registryId={{registry-id}}&compartmentId={{compartmentId}}",
							"protocol": "https",
							"host": [
								"{{cp-api}}"
							],
							"path": [
								"{{service-api-version}}",
								"endpoints"
							],
							"query": [
								{
									"key": "registryId",
									"value": "{{registry-id}}"
								},
								{
									"key": "compartmentId",
									"value": "{{compartmentId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get Openendpoint DP working",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{auth-signature}}"
							},
							{
								"key": "hostname",
								"type": "text",
								"value": "{{hostname}}"
							},
							{
								"key": "date",
								"type": "text",
								"value": "{{request-date}}"
							},
							{
								"key": "Content-Length",
								"type": "text",
								"value": "{{content-length}}"
							},
							{
								"key": "x-content-sha256",
								"type": "text",
								"value": "{{content-sha256}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"modelType\": \"PRIVATE_END_POINT\",\n    \"identifier\": \"TEST_PRIVATE_END_POINTR\",\n    \"parentRef\": {},\n    \"description\": \"TEST_PRIVATE_END_POINT\",\n    \"name\": \"pe_teste\",\n    \"dcmsEndpointId\": \"ocid1.endpointservice.oc1.phx.aaaaaaaamma3fvgw5xlefdoio4f2nfx5fn76yfezbdcnlls2jiaisydl3rra\",\n    \"peId\": \"ocid1.privateendpoint.oc1.phx.aaaaaaaaeetp4i5umqbhr66bp5n3q7j6j4bsjss7gjrqfzdsgq6ab4ryx7ia\",\n    \"compartmentId\": \"ocid1.compartment.oc1..aaaaaaaarbixr6kly2asc2qhox6ucmxmi3sglhh4c5hglkpa2pajp6dtrfgq\",\n    \"dnsProxyIp\": \"10.1.0.14\",\n    \"privateEndpointIp\": \"10.0.0.2\",\n    \"state\": \"ACTIVE\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cp-api}}/{{service-api-version}}/endpoints/{{endpointId}}?registryId={{registry-id}}",
							"protocol": "https",
							"host": [
								"{{cp-api}}"
							],
							"path": [
								"{{service-api-version}}",
								"endpoints",
								"{{endpointId}}"
							],
							"query": [
								{
									"key": "registryId",
									"value": "{{registry-id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete endpoint DP working",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{auth-signature}}"
							},
							{
								"key": "hostname",
								"type": "text",
								"value": "{{hostname}}"
							},
							{
								"key": "date",
								"type": "text",
								"value": "{{request-date}}"
							},
							{
								"key": "Content-Length",
								"type": "text",
								"value": "{{content-length}}"
							},
							{
								"key": "x-content-sha256",
								"type": "text",
								"value": "{{content-sha256}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"modelType\": \"PRIVATE_END_POINT\",\n    \"identifier\": \"TEST_PRIVATE_END_POINTR\",\n    \"parentRef\": {},\n    \"description\": \"TEST_PRIVATE_END_POINT\",\n    \"name\": \"pe_teste\",\n    \"dcmsEndpointId\": \"ocid1.endpointservice.oc1.phx.aaaaaaaamma3fvgw5xlefdoio4f2nfx5fn76yfezbdcnlls2jiaisydl3rra\",\n    \"peId\": \"ocid1.privateendpoint.oc1.phx.aaaaaaaaeetp4i5umqbhr66bp5n3q7j6j4bsjss7gjrqfzdsgq6ab4ryx7ia\",\n    \"compartmentId\": \"ocid1.compartment.oc1..aaaaaaaarbixr6kly2asc2qhox6ucmxmi3sglhh4c5hglkpa2pajp6dtrfgq\",\n    \"dnsProxyIp\": \"10.1.0.14\",\n    \"privateEndpointIp\": \"10.0.0.2\",\n    \"state\": \"ACTIVE\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cp-api}}/{{service-api-version}}/endpoints/ocid1.dcmsendpoint.oc1.iad.amaaaaaaftu3mtyaskp6xjbgradg7erzmg42ugn24wrl4lbti55yitranyaa?registryId=ocid1.dcmsregistry.oc1.iad.anuwcljsmvkuopyajsdjh7l3cohrmvievphviw2vvrfc7su7d2mnggckdbsq&isForceOperation=true",
							"protocol": "https",
							"host": [
								"{{cp-api}}"
							],
							"path": [
								"{{service-api-version}}",
								"endpoints",
								"ocid1.dcmsendpoint.oc1.iad.amaaaaaaftu3mtyaskp6xjbgradg7erzmg42ugn24wrl4lbti55yitranyaa"
							],
							"query": [
								{
									"key": "registryId",
									"value": "ocid1.dcmsregistry.oc1.iad.anuwcljsmvkuopyajsdjh7l3cohrmvievphviw2vvrfc7su7d2mnggckdbsq"
								},
								{
									"key": "isForceOperation",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "1. Create Folder working",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{auth-signature}}"
							},
							{
								"key": "hostname",
								"type": "text",
								"value": "{{hostname}}"
							},
							{
								"key": "date",
								"type": "text",
								"value": "{{request-date}}"
							},
							{
								"key": "Content-Length",
								"type": "text",
								"value": "{{content-length}}"
							},
							{
								"key": "x-content-sha256",
								"type": "text",
								"value": "{{content-sha256}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"DEFAULT_FOLDER\",\n    \"identifier\": \"DEFAULT_FOLDER\",\n    \"description\": \"Folder for Aggregating Data Assets\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{dp-api}}/{{service-dp-api-version}}/registries/{{registry-id}}/folders",
							"protocol": "https",
							"host": [
								"{{dp-api}}"
							],
							"path": [
								"{{service-dp-api-version}}",
								"registries",
								"{{registry-id}}",
								"folders"
							]
						}
					},
					"response": []
				},
				{
					"name": "1. Create Folder Testing",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{auth-signature}}"
							},
							{
								"key": "hostname",
								"type": "text",
								"value": "{{hostname}}"
							},
							{
								"key": "date",
								"type": "text",
								"value": "{{request-date}}"
							},
							{
								"key": "Content-Length",
								"type": "text",
								"value": "{{content-length}}"
							},
							{
								"key": "x-content-sha256",
								"type": "text",
								"value": "{{content-sha256}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"DEFAULT_FOLDER\",\n    \"identifier\": \"DEFAULT_FOLDER\",\n    \"description\": \"Folder for Aggregating Data Assets\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{dp-api}}/{{service-dp-api-version}}/registries/{{registry-id}}/folders",
							"protocol": "https",
							"host": [
								"{{dp-api}}"
							],
							"path": [
								"{{service-dp-api-version}}",
								"registries",
								"{{registry-id}}",
								"folders"
							]
						}
					},
					"response": []
				},
				{
					"name": "1. Create Default Folder working",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{auth-signature}}"
							},
							{
								"key": "hostname",
								"type": "text",
								"value": "{{hostname}}"
							},
							{
								"key": "date",
								"type": "text",
								"value": "{{request-date}}"
							},
							{
								"key": "Content-Length",
								"type": "text",
								"value": "{{content-length}}"
							},
							{
								"key": "x-content-sha256",
								"type": "text",
								"value": "{{content-sha256}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"DEFAULTFOLDER\",\n    \"identifier\": \"DEFAULTFOLDER\",\n    \"description\": \"Folder for Aggregating Data Assets\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{dp-api}}/{{service-dp-api-version}}/registries/{{registry-id}}/folders",
							"protocol": "https",
							"host": [
								"{{dp-api}}"
							],
							"path": [
								"{{service-dp-api-version}}",
								"registries",
								"{{registry-id}}",
								"folders"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.1. Create  DA OracleDB psrdjsm workings",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{auth-signature}}"
							},
							{
								"key": "hostname",
								"type": "text",
								"value": "{{hostname}}"
							},
							{
								"key": "date",
								"type": "text",
								"value": "{{request-date}}"
							},
							{
								"key": "Content-Length",
								"type": "text",
								"value": "{{content-length}}"
							},
							{
								"key": "x-content-sha256",
								"type": "text",
								"value": "{{content-sha256}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"PSR_SRC_DB_SCRIPT\",\n    \"identifier\": \"PSR_SRC_DB_SCRIPT\",\n    \"type\": \"ORACLE_DATA_ASSET\",\n    \"modelType\": \"GENERIC_DATA_ASSET\",\n    \"properties\": {\n        \"serviceName\": \"orclpdb.psrdjsmpublic.psrdjsm1iad.oraclevcn.com\",\n        \"host\": \"100.92.47.2\",\n        \"port\": \"1521\"\n    },\n    \"defaultConnection\": {\n        \"name\": \"ORADBCONNA\",\n        \"modelType\": \"GENERIC_CONNECTION\",\n        \"identifier\": \"ORADBCONNA\",\n        \"type\": \"ORACLEDB_CONNECTION\",\n        \"properties\": {\n            \"username\": \"tpcdsuser3\",\n            \"password\": \"welcome1234\"\n        }\n    },\n    \"registryMetadata\": {\n        \"aggregatorKey\": \"{{folderKey}}\"\n    },\n    \"endPoints\": [\n        {\n            \"modelType\": \"PRIVATE_END_POINT\",\n            \"dcmsEndpointId\": \"{{endpointId}}\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{dp-api}}/{{service-dp-api-version}}/registries/{{registry-id}}/dataAssets?folderKey={{folderKey}}",
							"protocol": "https",
							"host": [
								"{{dp-api}}"
							],
							"path": [
								"{{service-dp-api-version}}",
								"registries",
								"{{registry-id}}",
								"dataAssets"
							],
							"query": [
								{
									"key": "folderKey",
									"value": "{{folderKey}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "2.1. Create  DA OracleDB psrdjsm testing",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{auth-signature}}"
							},
							{
								"key": "hostname",
								"type": "text",
								"value": "{{hostname}}"
							},
							{
								"key": "date",
								"type": "text",
								"value": "{{request-date}}"
							},
							{
								"key": "Content-Length",
								"type": "text",
								"value": "{{content-length}}"
							},
							{
								"key": "x-content-sha256",
								"type": "text",
								"value": "{{content-sha256}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"name\":\"PSR_SRC_DB_SCRIPT1\",\n   \"identifier\":\"PSR_SRC_DB_SCRIPT1\",\n   \"type\":\"ORACLE_DATA_ASSET\",\n   \"modelType\":\"GENERIC_DATA_ASSET\",\n   \"properties\":{\n      \"serviceName\":\"orclpdb.psrdjsmpublic.psrdjsm1iad.oraclevcn.com\",\n      \"host\":\"100.92.47.2\",\n      \"port\":\"1521\"\n   },\n   \"defaultConnection\":{\n      \"name\":\"PSR_SRC_DB_SCRIPT1_C\",\n      \"modelType\":\"GENERIC_CONNECTION\",\n      \"identifier\":\"PSR_SRC_DB_SCRIPT1_C\",\n      \"type\":\"ORACLEDB_CONNECTION\",\n      \"properties\":{\n         \"username\":\"tpcdsuser3\",\n         \"password\":\"welcome1234\"\n      }\n   },\n   \"registryMetadata\":{\n      \"aggregatorKey\":\"18a9671d-193c-4d94-af49-3d0ee9694efa\"\n   },\n   \"endPoints\":[\n      {\n         \"modelType\":\"PRIVATE_END_POINT\",\n         \"dcmsEndpointId\":\"ocid1.dcmsendpoint.oc1.iad.amaaaaaaftu3mtyaskp6xjbgradg7erzmg42ugn24wrl4lbti55yitranyaa\"\n      }\n   ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{dp-api}}/{{service-dp-api-version}}/registries/{{registry-id}}/dataAssets",
							"protocol": "https",
							"host": [
								"{{dp-api}}"
							],
							"path": [
								"{{service-dp-api-version}}",
								"registries",
								"{{registry-id}}",
								"dataAssets"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.1. Update DA OracleDB psrdjsm working",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{auth-signature}}"
							},
							{
								"key": "hostname",
								"type": "text",
								"value": "{{hostname}}"
							},
							{
								"key": "date",
								"type": "text",
								"value": "{{request-date}}"
							},
							{
								"key": "Content-Length",
								"type": "text",
								"value": "{{content-length}}"
							},
							{
								"key": "x-content-sha256",
								"type": "text",
								"value": "{{content-sha256}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"modelType\": \"GENERIC_DATA_ASSET\",\n    \"key\": \"dcms:54124b1c-6eaf-454b-a385-f80077ee5502\",\n    \"modelVersion\": \"20210217\",\n    \"parentRef\": {},\n    \"name\": \"DATAASSET_DB_PSR_NWRCPTC\",\n    \"objectVersion\": 2,\n    \"defaultConnection\": {\n        \"modelType\": \"GENERIC_CONNECTION\",\n        \"key\": \"dcms:90855a3f-a42a-464c-a0ee-040004842509\",\n        \"modelVersion\": \"20210217\",\n        \"parentRef\": {},\n        \"name\": \"DATAASSET_DB_PSR_NWRCPTC_C\",\n        \"objectVersion\": 2,\n        \"isDefault\": false,\n        \"connectionProperties\": [],\n        \"type\": \"ORACLEDB_CONNECTION\",\n        \"properties\": {\n            \"disableSSL\": false\n        },\n        \"objectStatus\": 1,\n        \"identifier\": \"DATAASSET_DB_PSR_NWRCPTC_C\"\n    },\n    \"originalHostNames\": {},\n    \"assetProperties\": {},\n    \"type\": \"ORACLE_DATA_ASSET\",\n    \"properties\": {\n        \"port\": \"1521\",\n        \"host\": \"100.92.47.2\",\n        \"serviceName\": \"orclpdb.psrdjsmpublic.psrdjsm1iad.oraclevcn.com\"\n    },\n    \"objectStatus\": 8,\n    \"identifier\": \"DATAASSET_DB_PSR_NWRCPTC\",\n    \"metadata\": {\n        \"createdBy\": \"User\",\n        \"createdByName\": \"Unknown\",\n        \"updatedBy\": \"User\",\n        \"updatedByName\": \"Unknown\",\n        \"timeCreated\": \"2021-07-30T08:16:09.411Z\",\n        \"timeUpdated\": \"2021-07-30T08:16:09.411Z\",\n        \"registryVersion\": 1\n    },\n    \"externalKey\": \"ORACLEDB:100.92.47.2:1521:orclpdb.psrdjsmpublic.psrdjsm1iad.oraclevcn.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{dp-api}}/{{service-dp-api-version}}/registries/{{registry-id}}/dataAssets/dcms:54124b1c-6eaf-454b-a385-f80077ee5502",
							"protocol": "https",
							"host": [
								"{{dp-api}}"
							],
							"path": [
								"{{service-dp-api-version}}",
								"registries",
								"{{registry-id}}",
								"dataAssets",
								"dcms:54124b1c-6eaf-454b-a385-f80077ee5502"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.1. Update DA OracleDB psrdjsmtesting",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{auth-signature}}"
							},
							{
								"key": "hostname",
								"type": "text",
								"value": "{{hostname}}"
							},
							{
								"key": "date",
								"type": "text",
								"value": "{{request-date}}"
							},
							{
								"key": "Content-Length",
								"type": "text",
								"value": "{{content-length}}"
							},
							{
								"key": "x-content-sha256",
								"type": "text",
								"value": "{{content-sha256}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"modelType\": \"GENERIC_DATA_ASSET\",\n    \"key\": \"dcms:43f2f275-d9ab-491a-bbc0-6cc60e911005\",\n    \"modelVersion\": \"20210217\",\n    \"parentRef\": {},\n    \"name\": \"UPDATE_PSR_SRC_DB_DEBUG\",\n    \"objectVersion\": 1,\n    \"defaultConnection\": {\n        \"modelType\": \"GENERIC_CONNECTION\",\n        \"key\": \"dcms:510d60ce-d2d0-4031-8973-70c299518d3f\",\n        \"modelVersion\": \"20210217\",\n        \"parentRef\": {},\n        \"name\": \"ORADBCONNA\",\n        \"objectVersion\": 1,\n        \"isDefault\": true,\n        \"connectionProperties\": [],\n        \"type\": \"ORACLEDB_CONNECTION\",\n        \"properties\": {\n            \"password\": \"********\",\n            \"disableSSL\": false,\n            \"passwordSecret\": {\n                \"value\": \"********\"\n            },\n            \"username\": \"tpcdsuser3\"\n        },\n        \"objectStatus\": 8,\n        \"identifier\": \"ORADBCONNA\"\n    },\n    \"endPoints\": [\n        {\n            \"modelType\": \"PRIVATE_END_POINT\",\n            \"key\": \"5e9ea365-b48e-4308-bc5c-646cc8b64bbc\",\n            \"modelVersion\": \"20210217\",\n            \"parentRef\": {},\n            \"name\": \"PSR_ENDPOINT_PREPROD\",\n            \"objectVersion\": 1,\n            \"dcmsEndpointId\": \"ocid1.dcmsendpoint.oc1.iad.amaaaaaaftu3mtyacepd5fwvlclyhqgtvx56sqlemktehzvf2m6fgkxugkia\",\n            \"peId\": \"ocid1.privateendpoint.oc1.iad.aaaaaaaahfx4zhggi3hkj6n25bqz34wkeaiyaspgusv3tfykenq6yzykhmka\",\n            \"compartmentId\": \"ocid1.compartment.oc1..aaaaaaaaie5ssrmlumn6qi4iu5fhleuusiwkqsnnkxrmlfghoc4aos5rvm6a\",\n            \"dnsProxyIp\": \"10.1.6.122\",\n            \"privateEndpointIp\": \"100.92.47.65\",\n            \"objectStatus\": 8,\n            \"identifier\": \"PHKOWZMJFPAKJFP\",\n            \"state\": \"ACTIVE\"\n        }\n    ],\n    \"originalHostNames\": {},\n    \"assetProperties\": {},\n    \"type\": \"ORACLE_DATA_ASSET\",\n    \"properties\": {\n        \"port\": \"1521\",\n        \"host\": \"100.92.47.2\",\n        \"serviceName\": \"orclpdb.psrdjsmpublic.psrdjsm1iad.oraclevcn.com\"\n    },\n    \"objectStatus\": 8,\n    \"identifier\": \"PSR_SRC_DB_DEBUG\",\n    \"metadata\": {\n        \"createdBy\": \"User\",\n        \"createdByName\": \"Unknown\",\n        \"updatedBy\": \"User\",\n        \"updatedByName\": \"Unknown\",\n        \"timeCreated\": \"2021-07-27T06:53:33.118Z\",\n        \"timeUpdated\": \"2021-07-27T06:53:33.118Z\",\n        \"aggregatorKey\": \"7ddaf35e-e58e-41e7-84f9-fceb08d09340\",\n        \"registryVersion\": 1\n    },\n    \"externalKey\": \"ORACLEDB:100.92.47.2:1521:orclpdb.psrdjsmpublic.psrdjsm1iad.oraclevcn.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{dp-api}}/{{service-dp-api-version}}/registries/{{registry-id}}/dataAssets/{{dataAssetKey}}",
							"protocol": "https",
							"host": [
								"{{dp-api}}"
							],
							"path": [
								"{{service-dp-api-version}}",
								"registries",
								"{{registry-id}}",
								"dataAssets",
								"{{dataAssetKey}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test Connection OracleDB working",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{auth-signature}}"
							},
							{
								"key": "hostname",
								"type": "text",
								"value": "{{hostname}}"
							},
							{
								"key": "date",
								"type": "text",
								"value": "{{request-date}}"
							},
							{
								"key": "Content-Length",
								"type": "text",
								"value": "{{content-length}}"
							},
							{
								"key": "x-content-sha256",
								"type": "text",
								"value": "{{content-sha256}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"dataAsset\": {\n        \"name\": \"DA_ORACLEEEWER\",\n        \"identifier\": \"DA_ORACLEEEWER\",\n        \"type\": \"ORACLE_DATA_ASSET\",\n        \"modelType\": \"GENERIC_DATA_ASSET\",\n        \"properties\": {\n            \"serviceName\": \"orclpdb.psrdjsmpublic.psrdjsm1iad.oraclevcn.com\",\n            \"host\": \"100.92.47.2\",\n            \"port\": \"1521\"\n        },\n        \"defaultConnection\": {\n            \"name\": \"Default Connectionsswer\",\n            \"modelType\": \"GENERIC_CONNECTION\",\n            \"identifier\": \"DEFAULT_CONNECTIONSSWER\",\n            \"type\": \"ORACLEDB_CONNECTION\",\n            \"properties\": {\n                \"username\": \"tpcdsuser3\",\n                \"password\": \"welcome1234\"\n            }\n        },\n        \"endPoints\": [\n            {\n                \"modelType\": \"PRIVATE_END_POINT\",\n                \"dcmsEndpointId\": \"{{endpointId}}\"\n            }\n        ]\n    },\n    \"connection\": {\n        \"name\": \"Default Connectionsswer\",\n        \"modelType\": \"GENERIC_CONNECTION\",\n        \"identifier\": \"DEFAULT_CONNECTIONSSWER\",\n        \"type\": \"ORACLEDB_CONNECTION\",\n        \"properties\": {\n            \"username\": \"tpcdsuser3\",\n            \"password\": \"welcome1234\"\n        }\n    }\n}"
						},
						"url": {
							"raw": "https://{{dp-api}}/{{service-dp-api-version}}/registries/{{registry-id}}/connectionValidations",
							"protocol": "https",
							"host": [
								"{{dp-api}}"
							],
							"path": [
								"{{service-dp-api-version}}",
								"registries",
								"{{registry-id}}",
								"connectionValidations"
							]
						}
					},
					"response": []
				},
				{
					"name": "List Connection OracleDB working",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{auth-signature}}"
							},
							{
								"key": "hostname",
								"type": "text",
								"value": "{{hostname}}"
							},
							{
								"key": "date",
								"type": "text",
								"value": "{{request-date}}"
							},
							{
								"key": "Content-Length",
								"type": "text",
								"value": "{{content-length}}"
							},
							{
								"key": "x-content-sha256",
								"type": "text",
								"value": "{{content-sha256}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"dataAsset\": {\n        \"name\": \"DA_ORACLEEEWER\",\n        \"identifier\": \"DA_ORACLEEEWER\",\n        \"type\": \"ORACLE_DATA_ASSET\",\n        \"modelType\": \"GENERIC_DATA_ASSET\",\n        \"properties\": {\n            \"serviceName\": \"orclpdb.psrdjsmpublic.psrdjsm1iad.oraclevcn.com\",\n            \"host\": \"100.92.47.2\",\n            \"port\": \"1521\"\n        },\n        \"defaultConnection\": {\n            \"name\": \"Default Connectionsswer\",\n            \"modelType\": \"GENERIC_CONNECTION\",\n            \"identifier\": \"DEFAULT_CONNECTIONSSWER\",\n            \"type\": \"ORACLEDB_CONNECTION\",\n            \"properties\": {\n                \"username\": \"tpcdsuser3\",\n                \"password\": \"welcome1234\"\n            }\n        },\n        \"endPoints\": [\n            {\n                \"modelType\": \"PRIVATE_END_POINT\",\n                \"dcmsEndpointId\": \"{{endpointId}}\"\n            }\n        ]\n    },\n    \"connection\": {\n        \"name\": \"Default Connectionsswer\",\n        \"modelType\": \"GENERIC_CONNECTION\",\n        \"identifier\": \"DEFAULT_CONNECTIONSSWER\",\n        \"type\": \"ORACLEDB_CONNECTION\",\n        \"properties\": {\n            \"username\": \"tpcdsuser3\",\n            \"password\": \"welcome1234\"\n        }\n    }\n}"
						},
						"url": {
							"raw": "https://{{dp-api}}/{{service-dp-api-version}}/registries/{{registry-id}}/connections?dataAssetKey={{dataAssetKey}}",
							"protocol": "https",
							"host": [
								"{{dp-api}}"
							],
							"path": [
								"{{service-dp-api-version}}",
								"registries",
								"{{registry-id}}",
								"connections"
							],
							"query": [
								{
									"key": "dataAssetKey",
									"value": "{{dataAssetKey}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List Connection OracleDB Testing",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{auth-signature}}"
							},
							{
								"key": "hostname",
								"type": "text",
								"value": "{{hostname}}"
							},
							{
								"key": "date",
								"type": "text",
								"value": "{{request-date}}"
							},
							{
								"key": "Content-Length",
								"type": "text",
								"value": "{{content-length}}"
							},
							{
								"key": "x-content-sha256",
								"type": "text",
								"value": "{{content-sha256}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"dataAsset\": {\n        \"name\": \"DA_ORACLEEEWER\",\n        \"identifier\": \"DA_ORACLEEEWER\",\n        \"type\": \"ORACLE_DATA_ASSET\",\n        \"modelType\": \"GENERIC_DATA_ASSET\",\n        \"properties\": {\n            \"serviceName\": \"orclpdb.psrdjsmpublic.psrdjsm1iad.oraclevcn.com\",\n            \"host\": \"100.92.47.2\",\n            \"port\": \"1521\"\n        },\n        \"defaultConnection\": {\n            \"name\": \"Default Connectionsswer\",\n            \"modelType\": \"GENERIC_CONNECTION\",\n            \"identifier\": \"DEFAULT_CONNECTIONSSWER\",\n            \"type\": \"ORACLEDB_CONNECTION\",\n            \"properties\": {\n                \"username\": \"tpcdsuser3\",\n                \"password\": \"welcome1234\"\n            }\n        },\n        \"endPoints\": [\n            {\n                \"modelType\": \"PRIVATE_END_POINT\",\n                \"dcmsEndpointId\": \"{{endpointId}}\"\n            }\n        ]\n    },\n    \"connection\": {\n        \"name\": \"Default Connectionsswer\",\n        \"modelType\": \"GENERIC_CONNECTION\",\n        \"identifier\": \"DEFAULT_CONNECTIONSSWER\",\n        \"type\": \"ORACLEDB_CONNECTION\",\n        \"properties\": {\n            \"username\": \"tpcdsuser3\",\n            \"password\": \"welcome1234\"\n        }\n    }\n}"
						},
						"url": {
							"raw": "https://{{dp-api}}/{{service-dp-api-version}}/registries/{{registry-id}}/connections?dataAssetKey=dcms:903f2471-306c-43bd-962f-82e10c1c5a23",
							"protocol": "https",
							"host": [
								"{{dp-api}}"
							],
							"path": [
								"{{service-dp-api-version}}",
								"registries",
								"{{registry-id}}",
								"connections"
							],
							"query": [
								{
									"key": "dataAssetKey",
									"value": "dcms:903f2471-306c-43bd-962f-82e10c1c5a23"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "1. List  Folder working",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{auth-signature}}"
							},
							{
								"key": "hostname",
								"type": "text",
								"value": "{{hostname}}"
							},
							{
								"key": "date",
								"type": "text",
								"value": "{{request-date}}"
							},
							{
								"key": "Content-Length",
								"type": "text",
								"value": "{{content-length}}"
							},
							{
								"key": "x-content-sha256",
								"type": "text",
								"value": "{{content-sha256}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"TestFolderPSR\",\n    \"identifier\": \"TESTFOLDERPSR\",\n    \"description\": \"Folder for Aggregating Data Assets\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{dp-api}}/{{service-dp-api-version}}/registries/{{registry-id}}/folders/",
							"protocol": "https",
							"host": [
								"{{dp-api}}"
							],
							"path": [
								"{{service-dp-api-version}}",
								"registries",
								"{{registry-id}}",
								"folders",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "1. List  Folder ENDPOINT_3",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{auth-signature}}"
							},
							{
								"key": "hostname",
								"type": "text",
								"value": "{{hostname}}"
							},
							{
								"key": "date",
								"type": "text",
								"value": "{{request-date}}"
							},
							{
								"key": "Content-Length",
								"type": "text",
								"value": "{{content-length}}"
							},
							{
								"key": "x-content-sha256",
								"type": "text",
								"value": "{{content-sha256}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"TestFolderPSR\",\n    \"identifier\": \"TESTFOLDERPSR\",\n    \"description\": \"Folder for Aggregating Data Assets\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{dp-api}}/{{service-dp-api-version}}/registries/{{registry-id}}/folders/",
							"protocol": "https",
							"host": [
								"{{dp-api}}"
							],
							"path": [
								"{{service-dp-api-version}}",
								"registries",
								"{{registry-id}}",
								"folders",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "1. Delete  Folder working",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{auth-signature}}"
							},
							{
								"key": "hostname",
								"type": "text",
								"value": "{{hostname}}"
							},
							{
								"key": "date",
								"type": "text",
								"value": "{{request-date}}"
							},
							{
								"key": "Content-Length",
								"type": "text",
								"value": "{{content-length}}"
							},
							{
								"key": "x-content-sha256",
								"type": "text",
								"value": "{{content-sha256}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"TestFolderPSR\",\n    \"identifier\": \"TESTFOLDERPSR\",\n    \"description\": \"Folder for Aggregating Data Assets\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{dp-api}}/{{service-dp-api-version}}/registries/{{registry-id}}/folders/9fe7a967-b22a-40ec-ab72-82274ca858fa",
							"protocol": "https",
							"host": [
								"{{dp-api}}"
							],
							"path": [
								"{{service-dp-api-version}}",
								"registries",
								"{{registry-id}}",
								"folders",
								"9fe7a967-b22a-40ec-ab72-82274ca858fa"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.1. Open DA OracleDB working",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{auth-signature}}"
							},
							{
								"key": "hostname",
								"type": "text",
								"value": "{{hostname}}"
							},
							{
								"key": "date",
								"type": "text",
								"value": "{{request-date}}"
							},
							{
								"key": "Content-Length",
								"type": "text",
								"value": "{{content-length}}"
							},
							{
								"key": "x-content-sha256",
								"type": "text",
								"value": "{{content-sha256}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"PSR_SRC_DB6\",\n    \"identifier\": \"PSR_SRC_DB6\",\n    \"type\": \"ORACLE_DATA_ASSET\",\n    \"modelType\": \"GENERIC_DATA_ASSET\",\n    \"properties\": {\n        \"serviceName\": \"orclpdb.psrdjsmpublic.psrdjsm1iad.oraclevcn.com\",\n        \"host\": \"144.25.38.150\",\n        \"port\": \"1521\"\n    },\n    \"defaultConnection\": {\n        \"name\": \"ORADBCONNA\",\n        \"modelType\": \"GENERIC_CONNECTION\",\n        \"identifier\": \"ORADBCONNA\",\n        \"type\": \"ORACLEDB_CONNECTION\",\n        \"properties\": {\n            \"username\": \"tpcdsuser3\",\n            \"password\": \"welcome1234\"\n        }\n    },\n    \"registryMetadata\": {\n        \"aggregatorKey\": \"{{folderKey}}\"\n    },\n    \"endPoints\": [\n        {\n            \"modelType\": \"PRIVATE_END_POINT\",\n            \"key\": \"{{endpointId}}\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{dp-api}}/{{service-dp-api-version}}/registries/{{registry-id}}/dataAssets/{{dataAssetKey}}",
							"protocol": "https",
							"host": [
								"{{dp-api}}"
							],
							"path": [
								"{{service-dp-api-version}}",
								"registries",
								"{{registry-id}}",
								"dataAssets",
								"{{dataAssetKey}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.1. Open DA OracleDB Testing",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{auth-signature}}"
							},
							{
								"key": "hostname",
								"type": "text",
								"value": "{{hostname}}"
							},
							{
								"key": "date",
								"type": "text",
								"value": "{{request-date}}"
							},
							{
								"key": "Content-Length",
								"type": "text",
								"value": "{{content-length}}"
							},
							{
								"key": "x-content-sha256",
								"type": "text",
								"value": "{{content-sha256}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"PSR_SRC_DB6\",\n    \"identifier\": \"PSR_SRC_DB6\",\n    \"type\": \"ORACLE_DATA_ASSET\",\n    \"modelType\": \"GENERIC_DATA_ASSET\",\n    \"properties\": {\n        \"serviceName\": \"orclpdb.psrdjsmpublic.psrdjsm1iad.oraclevcn.com\",\n        \"host\": \"144.25.38.150\",\n        \"port\": \"1521\"\n    },\n    \"defaultConnection\": {\n        \"name\": \"ORADBCONNA\",\n        \"modelType\": \"GENERIC_CONNECTION\",\n        \"identifier\": \"ORADBCONNA\",\n        \"type\": \"ORACLEDB_CONNECTION\",\n        \"properties\": {\n            \"username\": \"tpcdsuser3\",\n            \"password\": \"welcome1234\"\n        }\n    },\n    \"registryMetadata\": {\n        \"aggregatorKey\": \"{{folderKey}}\"\n    },\n    \"endPoints\": [\n        {\n            \"modelType\": \"PRIVATE_END_POINT\",\n            \"key\": \"{{endpointId}}\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{dp-api}}/{{service-dp-api-version}}/registries/{{registry-id}}/dataAssets/dcms:24903de6-bf0c-4b61-8529-fd732492a8b2",
							"protocol": "https",
							"host": [
								"{{dp-api}}"
							],
							"path": [
								"{{service-dp-api-version}}",
								"registries",
								"{{registry-id}}",
								"dataAssets",
								"dcms:24903de6-bf0c-4b61-8529-fd732492a8b2"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.1. Delete  DA OracleDB working",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{auth-signature}}"
							},
							{
								"key": "hostname",
								"type": "text",
								"value": "{{hostname}}"
							},
							{
								"key": "date",
								"type": "text",
								"value": "{{request-date}}"
							},
							{
								"key": "Content-Length",
								"type": "text",
								"value": "{{content-length}}"
							},
							{
								"key": "x-content-sha256",
								"type": "text",
								"value": "{{content-sha256}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"PSR_SRC_DB6\",\n    \"identifier\": \"PSR_SRC_DB6\",\n    \"type\": \"ORACLE_DATA_ASSET\",\n    \"modelType\": \"GENERIC_DATA_ASSET\",\n    \"properties\": {\n        \"serviceName\": \"orclpdb.psrdjsmpublic.psrdjsm1iad.oraclevcn.com\",\n        \"host\": \"144.25.38.150\",\n        \"port\": \"1521\"\n    },\n    \"defaultConnection\": {\n        \"name\": \"ORADBCONNA\",\n        \"modelType\": \"GENERIC_CONNECTION\",\n        \"identifier\": \"ORADBCONNA\",\n        \"type\": \"ORACLEDB_CONNECTION\",\n        \"properties\": {\n            \"username\": \"tpcdsuser3\",\n            \"password\": \"welcome1234\"\n        }\n    },\n    \"registryMetadata\": {\n        \"aggregatorKey\": \"{{folderKey}}\"\n    },\n    \"endPoints\": [\n        {\n            \"modelType\": \"PRIVATE_END_POINT\",\n            \"key\": \"{{endpointId}}\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{dp-api}}/{{service-dp-api-version}}/registries/{{registry-id}}/dataAssets/{{dataAssetKey}}",
							"protocol": "https",
							"host": [
								"{{dp-api}}"
							],
							"path": [
								"{{service-dp-api-version}}",
								"registries",
								"{{registry-id}}",
								"dataAssets",
								"{{dataAssetKey}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.1. Delete  DA OracleDB Testing",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{auth-signature}}"
							},
							{
								"key": "hostname",
								"type": "text",
								"value": "{{hostname}}"
							},
							{
								"key": "date",
								"type": "text",
								"value": "{{request-date}}"
							},
							{
								"key": "Content-Length",
								"type": "text",
								"value": "{{content-length}}"
							},
							{
								"key": "x-content-sha256",
								"type": "text",
								"value": "{{content-sha256}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"PSR_SRC_DB6\",\n    \"identifier\": \"PSR_SRC_DB6\",\n    \"type\": \"ORACLE_DATA_ASSET\",\n    \"modelType\": \"GENERIC_DATA_ASSET\",\n    \"properties\": {\n        \"serviceName\": \"orclpdb.psrdjsmpublic.psrdjsm1iad.oraclevcn.com\",\n        \"host\": \"144.25.38.150\",\n        \"port\": \"1521\"\n    },\n    \"defaultConnection\": {\n        \"name\": \"ORADBCONNA\",\n        \"modelType\": \"GENERIC_CONNECTION\",\n        \"identifier\": \"ORADBCONNA\",\n        \"type\": \"ORACLEDB_CONNECTION\",\n        \"properties\": {\n            \"username\": \"tpcdsuser3\",\n            \"password\": \"welcome1234\"\n        }\n    },\n    \"registryMetadata\": {\n        \"aggregatorKey\": \"{{folderKey}}\"\n    },\n    \"endPoints\": [\n        {\n            \"modelType\": \"PRIVATE_END_POINT\",\n            \"key\": \"{{endpointId}}\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{dp-api}}/{{service-dp-api-version}}/registries/{{registry-id}}/dataAssets/dcms:54124b1c-6eaf-454b-a385-f80077ee5502",
							"protocol": "https",
							"host": [
								"{{dp-api}}"
							],
							"path": [
								"{{service-dp-api-version}}",
								"registries",
								"{{registry-id}}",
								"dataAssets",
								"dcms:54124b1c-6eaf-454b-a385-f80077ee5502"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.1. List DA OracleDB working",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{auth-signature}}"
							},
							{
								"key": "hostname",
								"type": "text",
								"value": "{{hostname}}"
							},
							{
								"key": "date",
								"type": "text",
								"value": "{{request-date}}"
							},
							{
								"key": "Content-Length",
								"type": "text",
								"value": "{{content-length}}"
							},
							{
								"key": "x-content-sha256",
								"type": "text",
								"value": "{{content-sha256}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"PSR_SRC_DB6\",\n    \"identifier\": \"PSR_SRC_DB6\",\n    \"type\": \"ORACLE_DATA_ASSET\",\n    \"modelType\": \"GENERIC_DATA_ASSET\",\n    \"properties\": {\n        \"serviceName\": \"orclpdb.psrdjsmpublic.psrdjsm1iad.oraclevcn.com\",\n        \"host\": \"144.25.38.150\",\n        \"port\": \"1521\"\n    },\n    \"defaultConnection\": {\n        \"name\": \"ORADBCONNA\",\n        \"modelType\": \"GENERIC_CONNECTION\",\n        \"identifier\": \"ORADBCONNA\",\n        \"type\": \"ORACLEDB_CONNECTION\",\n        \"properties\": {\n            \"username\": \"tpcdsuser3\",\n            \"password\": \"welcome1234\"\n        }\n    },\n    \"registryMetadata\": {\n        \"aggregatorKey\": \"{{folderKey}}\"\n    },\n    \"endPoints\": [\n        {\n            \"modelType\": \"PRIVATE_END_POINT\",\n            \"key\": \"{{endpointId}}\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{dp-api}}/{{service-dp-api-version}}/registries/{{registry-id}}/dataAssets",
							"protocol": "https",
							"host": [
								"{{dp-api}}"
							],
							"path": [
								"{{service-dp-api-version}}",
								"registries",
								"{{registry-id}}",
								"dataAssets"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.1. List DA OracleDB Testing",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{auth-signature}}"
							},
							{
								"key": "hostname",
								"type": "text",
								"value": "{{hostname}}"
							},
							{
								"key": "date",
								"type": "text",
								"value": "{{request-date}}"
							},
							{
								"key": "Content-Length",
								"type": "text",
								"value": "{{content-length}}"
							},
							{
								"key": "x-content-sha256",
								"type": "text",
								"value": "{{content-sha256}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"PSR_SRC_DB6\",\n    \"identifier\": \"PSR_SRC_DB6\",\n    \"type\": \"ORACLE_DATA_ASSET\",\n    \"modelType\": \"GENERIC_DATA_ASSET\",\n    \"properties\": {\n        \"serviceName\": \"orclpdb.psrdjsmpublic.psrdjsm1iad.oraclevcn.com\",\n        \"host\": \"144.25.38.150\",\n        \"port\": \"1521\"\n    },\n    \"defaultConnection\": {\n        \"name\": \"ORADBCONNA\",\n        \"modelType\": \"GENERIC_CONNECTION\",\n        \"identifier\": \"ORADBCONNA\",\n        \"type\": \"ORACLEDB_CONNECTION\",\n        \"properties\": {\n            \"username\": \"tpcdsuser3\",\n            \"password\": \"welcome1234\"\n        }\n    },\n    \"registryMetadata\": {\n        \"aggregatorKey\": \"{{folderKey}}\"\n    },\n    \"endPoints\": [\n        {\n            \"modelType\": \"PRIVATE_END_POINT\",\n            \"key\": \"{{endpointId}}\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{dp-api}}/{{service-dp-api-version}}/registries/{{registry-id}}/dataAssets",
							"protocol": "https",
							"host": [
								"{{dp-api}}"
							],
							"path": [
								"{{service-dp-api-version}}",
								"registries",
								"{{registry-id}}",
								"dataAssets"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.1. Open DA OracleDB FullDetails not working",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{auth-signature}}"
							},
							{
								"key": "hostname",
								"type": "text",
								"value": "{{hostname}}"
							},
							{
								"key": "date",
								"type": "text",
								"value": "{{request-date}}"
							},
							{
								"key": "Content-Length",
								"type": "text",
								"value": "{{content-length}}"
							},
							{
								"key": "x-content-sha256",
								"type": "text",
								"value": "{{content-sha256}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"PSR_SRC_DB6\",\n    \"identifier\": \"PSR_SRC_DB6\",\n    \"type\": \"ORACLE_DATA_ASSET\",\n    \"modelType\": \"GENERIC_DATA_ASSET\",\n    \"properties\": {\n        \"serviceName\": \"orclpdb.psrdjsmpublic.psrdjsm1iad.oraclevcn.com\",\n        \"host\": \"144.25.38.150\",\n        \"port\": \"1521\"\n    },\n    \"defaultConnection\": {\n        \"name\": \"ORADBCONNA\",\n        \"modelType\": \"GENERIC_CONNECTION\",\n        \"identifier\": \"ORADBCONNA\",\n        \"type\": \"ORACLEDB_CONNECTION\",\n        \"properties\": {\n            \"username\": \"tpcdsuser3\",\n            \"password\": \"welcome1234\"\n        }\n    },\n    \"registryMetadata\": {\n        \"aggregatorKey\": \"{{folderKey}}\"\n    },\n    \"endPoints\": [\n        {\n            \"modelType\": \"PRIVATE_END_POINT\",\n            \"key\": \"{{endpointId}}\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{dp-api}}/{{service-dp-api-version}}/registries/{{registry-id}}/dataAssetFullDetails/{{dataAssetKey}}",
							"protocol": "https",
							"host": [
								"{{dp-api}}"
							],
							"path": [
								"{{service-dp-api-version}}",
								"registries",
								"{{registry-id}}",
								"dataAssetFullDetails",
								"{{dataAssetKey}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "List Schemas OracleDB working",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{auth-signature}}"
							},
							{
								"key": "hostname",
								"type": "text",
								"value": "{{hostname}}"
							},
							{
								"key": "date",
								"type": "text",
								"value": "{{request-date}}"
							},
							{
								"key": "Content-Length",
								"type": "text",
								"value": "{{content-length}}",
								"disabled": true
							},
							{
								"key": "x-content-sha256",
								"type": "text",
								"value": "{{content-sha256}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{dp-api}}/{{service-dp-api-version}}/registries/{{registry-id}}/connections/{{connectionKey}}/schemas?dataAssetKey={{dataAssetKey}}&folderKey={{folderKey}}",
							"protocol": "https",
							"host": [
								"{{dp-api}}"
							],
							"path": [
								"{{service-dp-api-version}}",
								"registries",
								"{{registry-id}}",
								"connections",
								"{{connectionKey}}",
								"schemas"
							],
							"query": [
								{
									"key": "dataAssetKey",
									"value": "{{dataAssetKey}}"
								},
								{
									"key": "folderKey",
									"value": "{{folderKey}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List Schemas OracleDB working Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{auth-signature}}"
							},
							{
								"key": "hostname",
								"type": "text",
								"value": "{{hostname}}"
							},
							{
								"key": "date",
								"type": "text",
								"value": "{{request-date}}"
							},
							{
								"key": "Content-Length",
								"type": "text",
								"value": "{{content-length}}",
								"disabled": true
							},
							{
								"key": "x-content-sha256",
								"type": "text",
								"value": "{{content-sha256}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{dp-api}}/{{service-dp-api-version}}/registries/{{registry-id}}/connections/{{connectionKey}}/schemas?dataAssetKey={{dataAssetKey}}",
							"protocol": "https",
							"host": [
								"{{dp-api}}"
							],
							"path": [
								"{{service-dp-api-version}}",
								"registries",
								"{{registry-id}}",
								"connections",
								"{{connectionKey}}",
								"schemas"
							],
							"query": [
								{
									"key": "dataAssetKey",
									"value": "{{dataAssetKey}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List Schemas OracleDB Testing",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{auth-signature}}"
							},
							{
								"key": "hostname",
								"type": "text",
								"value": "{{hostname}}"
							},
							{
								"key": "date",
								"type": "text",
								"value": "{{request-date}}"
							},
							{
								"key": "Content-Length",
								"type": "text",
								"value": "{{content-length}}"
							},
							{
								"key": "x-content-sha256",
								"type": "text",
								"value": "{{content-sha256}}",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://dcmspreprod.us-ashburn-1.oci.oraclecloud.com/20210217/registries/ocid1.dcmsregistry.oc1.iad.anuwcljrmvkuopyaldcwuask2jkl2yqxpprleb3qrioubcm7xewbqr6mk7ka/connections/dcms:a1eee4eb-3572-4750-b8be-25942d17ec70/schemas?dataAssetKey=dcms:24903de6-bf0c-4b61-8529-fd732492a8b2&folderKey=f76ea1b6-ac70-4eb9-9bb3-937a017403ac",
							"protocol": "https",
							"host": [
								"dcmspreprod",
								"us-ashburn-1",
								"oci",
								"oraclecloud",
								"com"
							],
							"path": [
								"20210217",
								"registries",
								"ocid1.dcmsregistry.oc1.iad.anuwcljrmvkuopyaldcwuask2jkl2yqxpprleb3qrioubcm7xewbqr6mk7ka",
								"connections",
								"dcms:a1eee4eb-3572-4750-b8be-25942d17ec70",
								"schemas"
							],
							"query": [
								{
									"key": "dataAssetKey",
									"value": "dcms:24903de6-bf0c-4b61-8529-fd732492a8b2"
								},
								{
									"key": "folderKey",
									"value": "f76ea1b6-ac70-4eb9-9bb3-937a017403ac"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List Schemas OracleDB Debug",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{auth-signature}}"
							},
							{
								"key": "hostname",
								"type": "text",
								"value": "{{hostname}}"
							},
							{
								"key": "date",
								"type": "text",
								"value": "{{request-date}}"
							},
							{
								"key": "Content-Length",
								"type": "text",
								"value": "{{content-length}}",
								"disabled": true
							},
							{
								"key": "x-content-sha256",
								"type": "text",
								"value": "{{content-sha256}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://dcmspreprod.us-ashburn-1.oci.oraclecloud.com/20210217/registries/ocid1.dcmsregistry.oc1.iad.anuwcljrmvkuopyaldcwuask2jkl2yqxpprleb3qrioubcm7xewbqr6mk7ka/connections/dcms:510d60ce-d2d0-4031-8973-70c299518d3f/schemas?dataAssetKey=dcms:43f2f275-d9ab-491a-bbc0-6cc60e911005&folderKey=7ddaf35e-e58e-41e7-84f9-fceb08d09340",
							"protocol": "https",
							"host": [
								"dcmspreprod",
								"us-ashburn-1",
								"oci",
								"oraclecloud",
								"com"
							],
							"path": [
								"20210217",
								"registries",
								"ocid1.dcmsregistry.oc1.iad.anuwcljrmvkuopyaldcwuask2jkl2yqxpprleb3qrioubcm7xewbqr6mk7ka",
								"connections",
								"dcms:510d60ce-d2d0-4031-8973-70c299518d3f",
								"schemas"
							],
							"query": [
								{
									"key": "dataAssetKey",
									"value": "dcms:43f2f275-d9ab-491a-bbc0-6cc60e911005"
								},
								{
									"key": "folderKey",
									"value": "7ddaf35e-e58e-41e7-84f9-fceb08d09340"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List SIngle Schemas Details OracleDB working",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{auth-signature}}"
							},
							{
								"key": "hostname",
								"type": "text",
								"value": "{{hostname}}"
							},
							{
								"key": "date",
								"type": "text",
								"value": "{{request-date}}"
							},
							{
								"key": "Content-Length",
								"type": "text",
								"value": "{{content-length}}",
								"disabled": true
							},
							{
								"key": "x-content-sha256",
								"type": "text",
								"value": "{{content-sha256}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{dp-api}}/{{service-dp-api-version}}/registries/{{registry-id}}/connections/{{connectionKey}}/schemas/TPCDSUSER3?dataAssetKey={{dataAssetKey}}",
							"protocol": "https",
							"host": [
								"{{dp-api}}"
							],
							"path": [
								"{{service-dp-api-version}}",
								"registries",
								"{{registry-id}}",
								"connections",
								"{{connectionKey}}",
								"schemas",
								"TPCDSUSER3"
							],
							"query": [
								{
									"key": "dataAssetKey",
									"value": "{{dataAssetKey}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List SIngle Schemas Details OracleDB Testing",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{auth-signature}}"
							},
							{
								"key": "hostname",
								"type": "text",
								"value": "{{hostname}}"
							},
							{
								"key": "date",
								"type": "text",
								"value": "{{request-date}}"
							},
							{
								"key": "Content-Length",
								"type": "text",
								"value": "{{content-length}}",
								"disabled": true
							},
							{
								"key": "x-content-sha256",
								"type": "text",
								"value": "{{content-sha256}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://dcmspreprod.us-ashburn-1.oci.oraclecloud.com/20210217/registries/ocid1.dcmsregistry.oc1.iad.anuwcljrmvkuopyaldcwuask2jkl2yqxpprleb3qrioubcm7xewbqr6mk7ka/connections/dcms:2edf64fe-9234-4a65-a60a-a7279e0299a3/schemas/TPCDSUSER3?dataAssetKey=dcms:34d6599e-da3c-49e8-a06b-80849b404efc",
							"protocol": "https",
							"host": [
								"dcmspreprod",
								"us-ashburn-1",
								"oci",
								"oraclecloud",
								"com"
							],
							"path": [
								"20210217",
								"registries",
								"ocid1.dcmsregistry.oc1.iad.anuwcljrmvkuopyaldcwuask2jkl2yqxpprleb3qrioubcm7xewbqr6mk7ka",
								"connections",
								"dcms:2edf64fe-9234-4a65-a60a-a7279e0299a3",
								"schemas",
								"TPCDSUSER3"
							],
							"query": [
								{
									"key": "dataAssetKey",
									"value": "dcms:34d6599e-da3c-49e8-a06b-80849b404efc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List Entities OracleDB working",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{auth-signature}}"
							},
							{
								"key": "hostname",
								"type": "text",
								"value": "{{hostname}}"
							},
							{
								"key": "date",
								"type": "text",
								"value": "{{request-date}}"
							},
							{
								"key": "Content-Length",
								"type": "text",
								"value": "{{content-length}}"
							},
							{
								"key": "x-content-sha256",
								"type": "text",
								"value": "{{content-sha256}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"DA_OOS\",\n    \"identifier\": \"DA_OOS\",\n    \"modelType\": \"ORACLE_OBJECT_STORAGE_DATA_ASSET\",\n    \"defaultConnection\": {\n        \"name\": \"Default Connection\",\n        \"identifier\": \"DEFAULT_CONNECTION\",\n        \"modelType\": \"ORACLE_OBJECT_STORAGE_CONNECTION\"\n    },\n    \"url\": \"https://objectstorage.us-phoenix-1.oraclecloud.com\",\n    \"tenancyId\": \"ocid1.tenancy.oc1..aaaaaaaas2jlh27ryqdw4kxbkv2ulrvzgoszbpzobmcyh3zsmyi2xfpmby3a\",\n    \"namespace\": \"dcmsdevtenancy\"\n}"
						},
						"url": {
							"raw": "https://{{dp-api}}/{{service-dp-api-version}}/registries/{{registry-id}}/connections/{{connectionKey}}/schemas/TPCDSUSER3/dataEntities?dataAssetKey={{dataAssetKey}}&folderKey={{folderKey}}",
							"protocol": "https",
							"host": [
								"{{dp-api}}"
							],
							"path": [
								"{{service-dp-api-version}}",
								"registries",
								"{{registry-id}}",
								"connections",
								"{{connectionKey}}",
								"schemas",
								"TPCDSUSER3",
								"dataEntities"
							],
							"query": [
								{
									"key": "dataAssetKey",
									"value": "{{dataAssetKey}}"
								},
								{
									"key": "folderKey",
									"value": "{{folderKey}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List Entities single table OracleDB working",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{auth-signature}}"
							},
							{
								"key": "hostname",
								"type": "text",
								"value": "{{hostname}}"
							},
							{
								"key": "date",
								"type": "text",
								"value": "{{request-date}}"
							},
							{
								"key": "Content-Length",
								"type": "text",
								"value": "{{content-length}}"
							},
							{
								"key": "x-content-sha256",
								"type": "text",
								"value": "{{content-sha256}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"DA_OOS\",\n    \"identifier\": \"DA_OOS\",\n    \"modelType\": \"ORACLE_OBJECT_STORAGE_DATA_ASSET\",\n    \"defaultConnection\": {\n        \"name\": \"Default Connection\",\n        \"identifier\": \"DEFAULT_CONNECTION\",\n        \"modelType\": \"ORACLE_OBJECT_STORAGE_CONNECTION\"\n    },\n    \"url\": \"https://objectstorage.us-phoenix-1.oraclecloud.com\",\n    \"tenancyId\": \"ocid1.tenancy.oc1..aaaaaaaas2jlh27ryqdw4kxbkv2ulrvzgoszbpzobmcyh3zsmyi2xfpmby3a\",\n    \"namespace\": \"dcmsdevtenancy\"\n}"
						},
						"url": {
							"raw": "https://{{dp-api}}/{{service-dp-api-version}}/registries/{{registry-id}}/connections/{{connectionKey}}/schemas/TPCDSUSER3/dataEntities/TABLE_ENTITY:WEB_SALES?dataAssetKey={{dataAssetKey}}&folderKey={{folderKey}}",
							"protocol": "https",
							"host": [
								"{{dp-api}}"
							],
							"path": [
								"{{service-dp-api-version}}",
								"registries",
								"{{registry-id}}",
								"connections",
								"{{connectionKey}}",
								"schemas",
								"TPCDSUSER3",
								"dataEntities",
								"TABLE_ENTITY:WEB_SALES"
							],
							"query": [
								{
									"key": "dataAssetKey",
									"value": "{{dataAssetKey}}"
								},
								{
									"key": "folderKey",
									"value": "{{folderKey}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "EntityShape OracleDB working",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{auth-signature}}"
							},
							{
								"key": "hostname",
								"type": "text",
								"value": "{{hostname}}"
							},
							{
								"key": "date",
								"type": "text",
								"value": "{{request-date}}"
							},
							{
								"key": "Content-Length",
								"type": "text",
								"value": "{{content-length}}"
							},
							{
								"key": "x-content-sha256",
								"type": "text",
								"value": "{{content-sha256}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"modelType\": \"TABLE_ENTITY\",\n    \"name\": \"STORE_SALES_1000M\",\n    \"resourceName\": \"TABLE_ENTITY:STORE_SALES_1000M\"\n}"
						},
						"url": {
							"raw": "https://{{dp-api}}/{{service-dp-api-version}}/registries/{{registry-id}}/connections/{{connectionKey}}/schemas/TPCDSUSER3/actions/entityShapes?dataAssetKey={{dataAssetKey}}&folderKey={{folderKey}}",
							"protocol": "https",
							"host": [
								"{{dp-api}}"
							],
							"path": [
								"{{service-dp-api-version}}",
								"registries",
								"{{registry-id}}",
								"connections",
								"{{connectionKey}}",
								"schemas",
								"TPCDSUSER3",
								"actions",
								"entityShapes"
							],
							"query": [
								{
									"key": "dataAssetKey",
									"value": "{{dataAssetKey}}"
								},
								{
									"key": "folderKey",
									"value": "{{folderKey}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "8. DataPreview OracleDB working",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{auth-signature}}"
							},
							{
								"key": "hostname",
								"type": "text",
								"value": "{{hostname}}"
							},
							{
								"key": "date",
								"type": "text",
								"value": "{{request-date}}"
							},
							{
								"key": "Content-Length",
								"type": "text",
								"value": "{{content-length}}"
							},
							{
								"key": "x-content-sha256",
								"type": "text",
								"value": "{{content-sha256}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"dataAsset\": {\n        \"key\": \"{{dataAssetKey}}\",\n        \"type\": \"ORACLE_DATA_ASSET\",\n        \"modelType\": \"GENERIC_DATA_ASSET\",\n        \"objectStatus\": 0\n    },\n    \"connection\": {\n        \"key\": \"{{connectionKey}}\",\n        \"type\": \"ORACLEDB_CONNECTION\",\n        \"modelType\": \"GENERIC_CONNECTION\",\n        \"objectStatus\": 0\n    },\n    \"schema\": {\n        \"name\": \"TPCDSUSER3\",\n        \"modelType\": \"SCHEMA\",\n        \"resourceName\": \"TPCDSUSER3\"\n    },\n    \"dataEntity\": {\n        \"name\": \"STORE_SALES_1000M\",\n        \"modelType\": \"TABLE_ENTITY\"\n    },\n    \"readOperationConfig\": {\n        \"modelType\": \"READ_OPERATION_CONFIG\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{dp-api}}/{{service-dp-api-version}}/registries/{{registry-id}}/actions/dataPreview?dataAssetKey={{dataAssetKey}}&folderKey={{folderKey}}",
							"protocol": "https",
							"host": [
								"{{dp-api}}"
							],
							"path": [
								"{{service-dp-api-version}}",
								"registries",
								"{{registry-id}}",
								"actions",
								"dataPreview"
							],
							"query": [
								{
									"key": "dataAssetKey",
									"value": "{{dataAssetKey}}"
								},
								{
									"key": "folderKey",
									"value": "{{folderKey}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "8. DataPreview OracleDB Testing",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{auth-signature}}"
							},
							{
								"key": "hostname",
								"type": "text",
								"value": "{{hostname}}"
							},
							{
								"key": "date",
								"type": "text",
								"value": "{{request-date}}"
							},
							{
								"key": "Content-Length",
								"type": "text",
								"value": "{{content-length}}"
							},
							{
								"key": "x-content-sha256",
								"type": "text",
								"value": "{{content-sha256}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"dataAsset\":{\n      \"key\":\"dcms:dc39fd3d-a049-4431-8199-881a1bc83681\",\n      \"type\":\"ORACLE_DATA_ASSET\",\n      \"modelType\":\"GENERIC_DATA_ASSET\",\n      \"objectStatus\":0\n   },\n   \"connection\":{\n      \"key\":\"dcms:efc1510a-da3c-4fb4-a079-baa4a92f7262\",\n      \"type\":\"ORACLEDB_CONNECTION\",\n      \"modelType\":\"GENERIC_CONNECTION\",\n      \"objectStatus\":0\n   },\n   \"schema\":{\n      \"name\":\"TPCDSUSER3\",\n      \"modelType\":\"SCHEMA\",\n      \"resourceName\":\"TPCDSUSER3\"\n   },\n   \"dataEntity\":{\n      \"name\":\"STORE_SALES_1000M\",\n      \"modelType\":\"TABLE_ENTITY\"\n   },\n   \"readOperationConfig\":{\n      \"modelType\":\"READ_OPERATION_CONFIG\"\n   }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dcmspreprod.us-ashburn-1.oci.oraclecloud.com/20210217/registries/ocid1.dcmsregistry.oc1.iad.anuwcljrmvkuopyaldcwuask2jkl2yqxpprleb3qrioubcm7xewbqr6mk7ka/actions/dataPreview?dataAssetKey=dcms:54124b1c-6eaf-454b-a385-f80077ee5502&folderKey=2a759648-3b34-464b-8fef-cc1b056c20a5",
							"protocol": "https",
							"host": [
								"dcmspreprod",
								"us-ashburn-1",
								"oci",
								"oraclecloud",
								"com"
							],
							"path": [
								"20210217",
								"registries",
								"ocid1.dcmsregistry.oc1.iad.anuwcljrmvkuopyaldcwuask2jkl2yqxpprleb3qrioubcm7xewbqr6mk7ka",
								"actions",
								"dataPreview"
							],
							"query": [
								{
									"key": "dataAssetKey",
									"value": "dcms:54124b1c-6eaf-454b-a385-f80077ee5502"
								},
								{
									"key": "folderKey",
									"value": "2a759648-3b34-464b-8fef-cc1b056c20a5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "8. DataPreview OracleDB Testing Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{auth-signature}}"
							},
							{
								"key": "hostname",
								"type": "text",
								"value": "{{hostname}}"
							},
							{
								"key": "date",
								"type": "text",
								"value": "{{request-date}}"
							},
							{
								"key": "Content-Length",
								"type": "text",
								"value": "{{content-length}}"
							},
							{
								"key": "x-content-sha256",
								"type": "text",
								"value": "{{content-sha256}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"dataAsset\":{\n      \"key\":\"dcms:dc39fd3d-a049-4431-8199-881a1bc83681\",\n      \"type\":\"ORACLE_DATA_ASSET\",\n      \"modelType\":\"GENERIC_DATA_ASSET\",\n      \"objectStatus\":0\n   },\n   \"connection\":{\n      \"key\":\"dcms:efc1510a-da3c-4fb4-a079-baa4a92f7262\",\n      \"type\":\"ORACLEDB_CONNECTION\",\n      \"modelType\":\"GENERIC_CONNECTION\",\n      \"objectStatus\":0\n   },\n   \"schema\":{\n      \"name\":\"TPCDSUSER3\",\n      \"modelType\":\"SCHEMA\",\n      \"resourceName\":\"TPCDSUSER3\"\n   },\n   \"dataEntity\":{\n      \"name\":\"STORE_SALES_1000M\",\n      \"modelType\":\"TABLE_ENTITY\"\n   },\n   \"readOperationConfig\":{\n      \"modelType\":\"READ_OPERATION_CONFIG\"\n   }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dcmspreprod.us-ashburn-1.oci.oraclecloud.com/20210217/registries/ocid1.dcmsregistry.oc1.iad.anuwcljrmvkuopyaldcwuask2jkl2yqxpprleb3qrioubcm7xewbqr6mk7ka/actions/dataPreview?dataAssetKey=dcms:54124b1c-6eaf-454b-a385-f80077ee5502&folderKey=2a759648-3b34-464b-8fef-cc1b056c20a5",
							"protocol": "https",
							"host": [
								"dcmspreprod",
								"us-ashburn-1",
								"oci",
								"oraclecloud",
								"com"
							],
							"path": [
								"20210217",
								"registries",
								"ocid1.dcmsregistry.oc1.iad.anuwcljrmvkuopyaldcwuask2jkl2yqxpprleb3qrioubcm7xewbqr6mk7ka",
								"actions",
								"dataPreview"
							],
							"query": [
								{
									"key": "dataAssetKey",
									"value": "dcms:54124b1c-6eaf-454b-a385-f80077ee5502"
								},
								{
									"key": "folderKey",
									"value": "2a759648-3b34-464b-8fef-cc1b056c20a5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "8. DataProfile OracleDB working",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{auth-signature}}"
							},
							{
								"key": "hostname",
								"type": "text",
								"value": "{{hostname}}"
							},
							{
								"key": "date",
								"type": "text",
								"value": "{{request-date}}"
							},
							{
								"key": "Content-Length",
								"type": "text",
								"value": "{{content-length}}"
							},
							{
								"key": "x-content-sha256",
								"type": "text",
								"value": "{{content-sha256}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"dataAsset\": {\n        \"key\": \"{{dataAssetKey}}\",\n        \"type\": \"ORACLE_DATA_ASSET\",\n        \"modelType\": \"GENERIC_DATA_ASSET\",\n        \"objectStatus\": 0\n    },\n    \"connection\": {\n        \"key\": \"{{connectionKey}}\",\n        \"type\": \"ORACLEDB_CONNECTION\",\n        \"modelType\": \"GENERIC_CONNECTION\",\n        \"objectStatus\": 0\n    },\n    \"schema\": {\n        \"name\": \"TPCDSUSER3\",\n        \"modelType\": \"SCHEMA\",\n        \"resourceName\": \"TPCDSUSER3\"\n    },\n    \"dataEntity\": {\n        \"name\": \"STORE_SALES_1000M\",\n        \"modelType\": \"TABLE_ENTITY\"\n    },\n    \"readOperationConfig\": {\n        \"modelType\": \"READ_OPERATION_CONFIG\",\n        \"operations\": [\n            {\n                \"modelType\": \"SELECT\",\n                \"selectColumns\": []\n            }\n        ]\n    },\n    \"profileConfig\": {\n        \"attributes\": [\n            \"SS_TICKET_NUMBER\"\n        ]\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{dp-api}}/{{service-dp-api-version}}/registries/{{registry-id}}/actions/dataProfile?dataAssetKey={{dataAssetKey}}&folderKey={{folderKey}}",
							"protocol": "https",
							"host": [
								"{{dp-api}}"
							],
							"path": [
								"{{service-dp-api-version}}",
								"registries",
								"{{registry-id}}",
								"actions",
								"dataProfile"
							],
							"query": [
								{
									"key": "dataAssetKey",
									"value": "{{dataAssetKey}}"
								},
								{
									"key": "folderKey",
									"value": "{{folderKey}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete endpoint CP",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{auth-signature}}"
							},
							{
								"key": "hostname",
								"type": "text",
								"value": "{{hostname}}"
							},
							{
								"key": "date",
								"type": "text",
								"value": "{{request-date}}"
							},
							{
								"key": "Content-Length",
								"type": "text",
								"value": "{{content-length}}"
							},
							{
								"key": "x-content-sha256",
								"type": "text",
								"value": "{{content-sha256}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"modelType\": \"PRIVATE_END_POINT\",\n    \"identifier\": \"TEST_PRIVATE_END_POINTR\",\n    \"parentRef\": {},\n    \"description\": \"TEST_PRIVATE_END_POINT\",\n    \"name\": \"pe_teste\",\n    \"dcmsEndpointId\": \"ocid1.endpointservice.oc1.phx.aaaaaaaamma3fvgw5xlefdoio4f2nfx5fn76yfezbdcnlls2jiaisydl3rra\",\n    \"peId\": \"ocid1.privateendpoint.oc1.phx.aaaaaaaaeetp4i5umqbhr66bp5n3q7j6j4bsjss7gjrqfzdsgq6ab4ryx7ia\",\n    \"compartmentId\": \"ocid1.compartment.oc1..aaaaaaaarbixr6kly2asc2qhox6ucmxmi3sglhh4c5hglkpa2pajp6dtrfgq\",\n    \"dnsProxyIp\": \"10.1.0.14\",\n    \"privateEndpointIp\": \"10.0.0.2\",\n    \"state\": \"ACTIVE\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cp-api}}/20210531/registries/{{registry-id}}/endpoints/ocid1.disworkspace.oc1.phx.amaaaaaaosqi62qa53nalzssv37crwk6mhsnyr6obej3gelfg7atzm4yv2sa",
							"protocol": "https",
							"host": [
								"{{cp-api}}"
							],
							"path": [
								"20210531",
								"registries",
								"{{registry-id}}",
								"endpoints",
								"ocid1.disworkspace.oc1.phx.amaaaaaaosqi62qa53nalzssv37crwk6mhsnyr6obej3gelfg7atzm4yv2sa"
							]
						}
					},
					"response": []
				},
				{
					"name": "get endpoint DP",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{auth-signature}}"
							},
							{
								"key": "hostname",
								"type": "text",
								"value": "{{hostname}}"
							},
							{
								"key": "date",
								"type": "text",
								"value": "{{request-date}}"
							},
							{
								"key": "Content-Length",
								"type": "text",
								"value": "{{content-length}}"
							},
							{
								"key": "x-content-sha256",
								"type": "text",
								"value": "{{content-sha256}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"modelType\": \"PRIVATE_END_POINT\",\n    \"identifier\": \"TEST_PRIVATE_END_POINTR\",\n    \"parentRef\": {},\n    \"description\": \"TEST_PRIVATE_END_POINT\",\n    \"name\": \"pe_teste\",\n    \"dcmsEndpointId\": \"ocid1.endpointservice.oc1.phx.aaaaaaaamma3fvgw5xlefdoio4f2nfx5fn76yfezbdcnlls2jiaisydl3rra\",\n    \"peId\": \"ocid1.privateendpoint.oc1.phx.aaaaaaaaeetp4i5umqbhr66bp5n3q7j6j4bsjss7gjrqfzdsgq6ab4ryx7ia\",\n    \"compartmentId\": \"ocid1.compartment.oc1..aaaaaaaarbixr6kly2asc2qhox6ucmxmi3sglhh4c5hglkpa2pajp6dtrfgq\",\n    \"dnsProxyIp\": \"10.1.0.14\",\n    \"privateEndpointIp\": \"10.0.0.2\",\n    \"state\": \"ACTIVE\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{dp-api}}/{{service-dp-api-version}}/registries/{{registry-id}}/endpoints",
							"protocol": "http",
							"host": [
								"{{dp-api}}"
							],
							"path": [
								"{{service-dp-api-version}}",
								"registries",
								"{{registry-id}}",
								"endpoints"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update endpoint CP",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{auth-signature}}"
							},
							{
								"key": "hostname",
								"type": "text",
								"value": "{{hostname}}"
							},
							{
								"key": "date",
								"type": "text",
								"value": "{{request-date}}"
							},
							{
								"key": "Content-Length",
								"type": "text",
								"value": "{{content-length}}"
							},
							{
								"key": "x-content-sha256",
								"type": "text",
								"value": "{{content-sha256}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"modelType\": \"PRIVATE_END_POINT\",\n    \"key\": \"5260ad31-30a2-42ba-8a68-6e6a76ca1cf6\",\n    \"modelVersion\": \"20210217\",\n    \"parentRef\": {},\n    \"name\": \"ENDPOINT_PSR_EWMBRHO\",\n    \"description\": \"TEST_PRIVATE_END_POINT\",\n    \"objectVersion\": 1,\n    \"keyMap\": {\n        \"cc960336-a227-4bb2-8e13-ab1ce0cfdb56\": \"4ec30a21-9860-4d82-a021-adc4ec7a3599\"\n    },\n    \"compartmentId\": \"{{compartmentId}}\",\n    \"dnsProxyIp\": \"10.1.63.107\",\n    \"privateEndpointIp\": \"196.1.1.76\",\n    \"objectStatus\": 8,\n    \"identifier\": \"MXZCHXDXQWOEHKC\",\n    \"metadata\": {\n        \"createdBy\": \"User\",\n        \"createdByName\": \"Unknown\",\n        \"updatedBy\": \"User\",\n        \"updatedByName\": \"Unknown\",\n        \"timeCreated\": \"2021-04-19T11:34:42.287Z\",\n        \"timeUpdated\": \"2021-04-19T11:34:42.287Z\",\n        \"infoFields\": {\n            \"state\": \"ACTIVE\"\n        },\n        \"aggregatorKey\": \"ba5f75b4-e95b-4418-8792-a6f075bdbea9\",\n        \"registryVersion\": 1\n    },\n    \"state\": \"ACTIVE\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{cp-api}}/{{service-api-version}}/registries/{{registry-id}}/endpoints/5260ad31-30a2-42ba-8a68-6e6a76ca1cf6",
							"protocol": "https",
							"host": [
								"{{cp-api}}"
							],
							"path": [
								"{{service-api-version}}",
								"registries",
								"{{registry-id}}",
								"endpoints",
								"5260ad31-30a2-42ba-8a68-6e6a76ca1cf6"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete endpoint DP",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{auth-signature}}"
							},
							{
								"key": "hostname",
								"type": "text",
								"value": "{{hostname}}"
							},
							{
								"key": "date",
								"type": "text",
								"value": "{{request-date}}"
							},
							{
								"key": "Content-Length",
								"type": "text",
								"value": "{{content-length}}"
							},
							{
								"key": "x-content-sha256",
								"type": "text",
								"value": "{{content-sha256}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"modelType\": \"PRIVATE_END_POINT\",\n    \"identifier\": \"TEST_PRIVATE_END_POINTR\",\n    \"parentRef\": {},\n    \"description\": \"TEST_PRIVATE_END_POINT\",\n    \"name\": \"pe_teste\",\n    \"dcmsEndpointId\": \"ocid1.endpointservice.oc1.phx.aaaaaaaamma3fvgw5xlefdoio4f2nfx5fn76yfezbdcnlls2jiaisydl3rra\",\n    \"peId\": \"ocid1.privateendpoint.oc1.phx.aaaaaaaaeetp4i5umqbhr66bp5n3q7j6j4bsjss7gjrqfzdsgq6ab4ryx7ia\",\n    \"compartmentId\": \"ocid1.compartment.oc1..aaaaaaaarbixr6kly2asc2qhox6ucmxmi3sglhh4c5hglkpa2pajp6dtrfgq\",\n    \"dnsProxyIp\": \"10.1.0.14\",\n    \"privateEndpointIp\": \"10.0.0.2\",\n    \"state\": \"ACTIVE\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{dp-api}}/{{service-dp-api-version}}/registries/{{registry-id}}/endpoints/f1176ba1-9d01-4d00-b3cf-42ec2aef9651",
							"protocol": "http",
							"host": [
								"{{dp-api}}"
							],
							"path": [
								"{{service-dp-api-version}}",
								"registries",
								"{{registry-id}}",
								"endpoints",
								"f1176ba1-9d01-4d00-b3cf-42ec2aef9651"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.1. Create DA OracleDB Disdevtenancy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{auth-signature}}"
							},
							{
								"key": "hostname",
								"type": "text",
								"value": "{{hostname}}"
							},
							{
								"key": "date",
								"type": "text",
								"value": "{{request-date}}"
							},
							{
								"key": "Content-Length",
								"type": "text",
								"value": "{{content-length}}"
							},
							{
								"key": "x-content-sha256",
								"type": "text",
								"value": "{{content-sha256}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"PSR_SRC_DB\",\n    \"identifier\": \"PSR_SRC_DB\",\n    \"type\": \"ORACLE_DATA_ASSET\",\n    \"modelType\": \"GENERIC_DATA_ASSET\",\n    \"properties\": {\n        \"serviceName\": \"orclpdb.psrdjsmpublic.psrdjsm1iad.oraclevcn.com\",\n        \"host\": \"144.25.38.150\",\n        \"port\": \"1521\"\n    },\n    \"defaultConnection\": {\n        \"name\": \"ORADBCONNA\",\n        \"modelType\": \"GENERIC_CONNECTION\",\n        \"identifier\": \"ORADBCONNA\",\n        \"type\": \"ORACLEDB_CONNECTION\",\n        \"properties\": {\n            \"username\": \"tpcdsuser3\",\n            \"password\": \"welcome1234\"\n        }\n    },\n    \"registryMetadata\": {\n        \"aggregatorKey\": \"{{folderKey}}\"\n    },\n    \"endPoints\": [\n        {\n            \"modelType\": \"PRIVATE_END_POINT\",\n            \"key\": \"{{endpointId}}\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{dp-api}}/{{service-dp-api-version}}/registries/{{registry-id}}/dataAssets?folderKey={{folderKey}}",
							"protocol": "http",
							"host": [
								"{{dp-api}}"
							],
							"path": [
								"{{service-dp-api-version}}",
								"registries",
								"{{registry-id}}",
								"dataAssets"
							],
							"query": [
								{
									"key": "folderKey",
									"value": "{{folderKey}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "2.1. Open DA OracleDB",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{auth-signature}}"
							},
							{
								"key": "hostname",
								"type": "text",
								"value": "{{hostname}}"
							},
							{
								"key": "date",
								"type": "text",
								"value": "{{request-date}}"
							},
							{
								"key": "Content-Length",
								"type": "text",
								"value": "{{content-length}}"
							},
							{
								"key": "x-content-sha256",
								"type": "text",
								"value": "{{content-sha256}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"PSR_SRC_DB6\",\n    \"identifier\": \"PSR_SRC_DB6\",\n    \"type\": \"ORACLE_DATA_ASSET\",\n    \"modelType\": \"GENERIC_DATA_ASSET\",\n    \"properties\": {\n        \"serviceName\": \"orclpdb.psrdjsmpublic.psrdjsm1iad.oraclevcn.com\",\n        \"host\": \"144.25.38.150\",\n        \"port\": \"1521\"\n    },\n    \"defaultConnection\": {\n        \"name\": \"ORADBCONNA\",\n        \"modelType\": \"GENERIC_CONNECTION\",\n        \"identifier\": \"ORADBCONNA\",\n        \"type\": \"ORACLEDB_CONNECTION\",\n        \"properties\": {\n            \"username\": \"tpcdsuser3\",\n            \"password\": \"welcome1234\"\n        }\n    },\n    \"registryMetadata\": {\n        \"aggregatorKey\": \"{{folderKey}}\"\n    },\n    \"endPoints\": [\n        {\n            \"modelType\": \"PRIVATE_END_POINT\",\n            \"key\": \"{{endpointId}}\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{dp-api}}/{{service-dp-api-version}}/registries/{{registry-id}}/dataAssets/{{dataAssetKey}}?folderKey={{folderKey}}",
							"protocol": "http",
							"host": [
								"{{dp-api}}"
							],
							"path": [
								"{{service-dp-api-version}}",
								"registries",
								"{{registry-id}}",
								"dataAssets",
								"{{dataAssetKey}}"
							],
							"query": [
								{
									"key": "folderKey",
									"value": "{{folderKey}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "2.1. List DA OracleDB",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{auth-signature}}"
							},
							{
								"key": "hostname",
								"type": "text",
								"value": "{{hostname}}"
							},
							{
								"key": "date",
								"type": "text",
								"value": "{{request-date}}"
							},
							{
								"key": "Content-Length",
								"type": "text",
								"value": "{{content-length}}"
							},
							{
								"key": "x-content-sha256",
								"type": "text",
								"value": "{{content-sha256}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"PSR_SRC_DB6\",\n    \"identifier\": \"PSR_SRC_DB6\",\n    \"type\": \"ORACLE_DATA_ASSET\",\n    \"modelType\": \"GENERIC_DATA_ASSET\",\n    \"properties\": {\n        \"serviceName\": \"orclpdb.psrdjsmpublic.psrdjsm1iad.oraclevcn.com\",\n        \"host\": \"144.25.38.150\",\n        \"port\": \"1521\"\n    },\n    \"defaultConnection\": {\n        \"name\": \"ORADBCONNA\",\n        \"modelType\": \"GENERIC_CONNECTION\",\n        \"identifier\": \"ORADBCONNA\",\n        \"type\": \"ORACLEDB_CONNECTION\",\n        \"properties\": {\n            \"username\": \"tpcdsuser3\",\n            \"password\": \"welcome1234\"\n        }\n    },\n    \"registryMetadata\": {\n        \"aggregatorKey\": \"{{folderKey}}\"\n    },\n    \"endPoints\": [\n        {\n            \"modelType\": \"PRIVATE_END_POINT\",\n            \"key\": \"{{endpointId}}\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{dp-api}}/{{service-dp-api-version}}/registries/{{registry-id}}/dataAssets",
							"protocol": "https",
							"host": [
								"{{dp-api}}"
							],
							"path": [
								"{{service-dp-api-version}}",
								"registries",
								"{{registry-id}}",
								"dataAssets"
							]
						}
					},
					"response": []
				},
				{
					"name": "List Schemas OracleDB Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{auth-signature}}"
							},
							{
								"key": "hostname",
								"type": "text",
								"value": "{{hostname}}"
							},
							{
								"key": "date",
								"type": "text",
								"value": "{{request-date}}"
							},
							{
								"key": "Content-Length",
								"type": "text",
								"value": "{{content-length}}",
								"disabled": true
							},
							{
								"key": "x-content-sha256",
								"type": "text",
								"value": "{{content-sha256}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{dp-api}}/{{service-dp-api-version}}/registries/{{registry-id}}/connections/{{connectionKey}}/schemas?dataAssetKey={{dataAssetKey}}&folderKey={{folderKey}}",
							"protocol": "http",
							"host": [
								"{{dp-api}}"
							],
							"path": [
								"{{service-dp-api-version}}",
								"registries",
								"{{registry-id}}",
								"connections",
								"{{connectionKey}}",
								"schemas"
							],
							"query": [
								{
									"key": "dataAssetKey",
									"value": "{{dataAssetKey}}"
								},
								{
									"key": "folderKey",
									"value": "{{folderKey}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List Schemas OracleDB Testing",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{auth-signature}}"
							},
							{
								"key": "hostname",
								"type": "text",
								"value": "{{hostname}}"
							},
							{
								"key": "date",
								"type": "text",
								"value": "{{request-date}}"
							},
							{
								"key": "Content-Length",
								"type": "text",
								"value": "{{content-length}}",
								"disabled": true
							},
							{
								"key": "x-content-sha256",
								"type": "text",
								"value": "{{content-sha256}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{dp-api}}/{{service-dp-api-version}}/registries/{{registry-id}}/connections/{{connectionKey}}/schemas?dataAssetKey={{dataAssetKey}}&folderKey={{folderKey}}",
							"protocol": "http",
							"host": [
								"{{dp-api}}"
							],
							"path": [
								"{{service-dp-api-version}}",
								"registries",
								"{{registry-id}}",
								"connections",
								"{{connectionKey}}",
								"schemas"
							],
							"query": [
								{
									"key": "dataAssetKey",
									"value": "{{dataAssetKey}}"
								},
								{
									"key": "folderKey",
									"value": "{{folderKey}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List Entities OracleDB",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{auth-signature}}"
							},
							{
								"key": "hostname",
								"type": "text",
								"value": "{{hostname}}"
							},
							{
								"key": "date",
								"type": "text",
								"value": "{{request-date}}"
							},
							{
								"key": "Content-Length",
								"type": "text",
								"value": "{{content-length}}"
							},
							{
								"key": "x-content-sha256",
								"type": "text",
								"value": "{{content-sha256}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"DA_OOS\",\n    \"identifier\": \"DA_OOS\",\n    \"modelType\": \"ORACLE_OBJECT_STORAGE_DATA_ASSET\",\n    \"defaultConnection\": {\n        \"name\": \"Default Connection\",\n        \"identifier\": \"DEFAULT_CONNECTION\",\n        \"modelType\": \"ORACLE_OBJECT_STORAGE_CONNECTION\"\n    },\n    \"url\": \"https://objectstorage.us-phoenix-1.oraclecloud.com\",\n    \"tenancyId\": \"ocid1.tenancy.oc1..aaaaaaaas2jlh27ryqdw4kxbkv2ulrvzgoszbpzobmcyh3zsmyi2xfpmby3a\",\n    \"namespace\": \"dcmsdevtenancy\"\n}"
						},
						"url": {
							"raw": "http://{{dp-api}}/{{service-dp-api-version}}/registries/{{registry-id}}/connections/{{connectionKey}}/schemas/TPCDSUSER3/dataEntities?dataAssetKey={{dataAssetKey}}&folderKey={{folderKey}}",
							"protocol": "http",
							"host": [
								"{{dp-api}}"
							],
							"path": [
								"{{service-dp-api-version}}",
								"registries",
								"{{registry-id}}",
								"connections",
								"{{connectionKey}}",
								"schemas",
								"TPCDSUSER3",
								"dataEntities"
							],
							"query": [
								{
									"key": "dataAssetKey",
									"value": "{{dataAssetKey}}"
								},
								{
									"key": "folderKey",
									"value": "{{folderKey}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List Entities OracleDB Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{auth-signature}}"
							},
							{
								"key": "hostname",
								"type": "text",
								"value": "{{hostname}}"
							},
							{
								"key": "date",
								"type": "text",
								"value": "{{request-date}}"
							},
							{
								"key": "Content-Length",
								"type": "text",
								"value": "{{content-length}}"
							},
							{
								"key": "x-content-sha256",
								"type": "text",
								"value": "{{content-sha256}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"DA_OOS\",\n    \"identifier\": \"DA_OOS\",\n    \"modelType\": \"ORACLE_OBJECT_STORAGE_DATA_ASSET\",\n    \"defaultConnection\": {\n        \"name\": \"Default Connection\",\n        \"identifier\": \"DEFAULT_CONNECTION\",\n        \"modelType\": \"ORACLE_OBJECT_STORAGE_CONNECTION\"\n    },\n    \"url\": \"https://objectstorage.us-phoenix-1.oraclecloud.com\",\n    \"tenancyId\": \"ocid1.tenancy.oc1..aaaaaaaas2jlh27ryqdw4kxbkv2ulrvzgoszbpzobmcyh3zsmyi2xfpmby3a\",\n    \"namespace\": \"dcmsdevtenancy\"\n}"
						},
						"url": {
							"raw": "http://{{dp-api}}/{{service-dp-api-version}}/registries/{{registry-id}}/connections/{{connectionKey}}/schemas/TPCDSUSER3/dataEntities?dataAssetKey={{dataAssetKey}}&folderKey={{folderKey}}",
							"protocol": "http",
							"host": [
								"{{dp-api}}"
							],
							"path": [
								"{{service-dp-api-version}}",
								"registries",
								"{{registry-id}}",
								"connections",
								"{{connectionKey}}",
								"schemas",
								"TPCDSUSER3",
								"dataEntities"
							],
							"query": [
								{
									"key": "dataAssetKey",
									"value": "{{dataAssetKey}}"
								},
								{
									"key": "folderKey",
									"value": "{{folderKey}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "EntityShape OracleDB",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{auth-signature}}"
							},
							{
								"key": "hostname",
								"type": "text",
								"value": "{{hostname}}"
							},
							{
								"key": "date",
								"type": "text",
								"value": "{{request-date}}"
							},
							{
								"key": "Content-Length",
								"type": "text",
								"value": "{{content-length}}"
							},
							{
								"key": "x-content-sha256",
								"type": "text",
								"value": "{{content-sha256}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"modelType\": \"TABLE_ENTITY\",\n    \"name\": \"STORE_SALES_1000M\",\n    \"resourceName\": \"TABLE_ENTITY:STORE_SALES_1000M\"\n}"
						},
						"url": {
							"raw": "http://{{dp-api}}/{{service-dp-api-version}}/registries/{{registry-id}}/connections/{{connectionKey}}/schemas/TPCDSUSER3/entityShapes?dataAssetKey={{dataAssetKey}}&folderKey={{folderKey}}",
							"protocol": "http",
							"host": [
								"{{dp-api}}"
							],
							"path": [
								"{{service-dp-api-version}}",
								"registries",
								"{{registry-id}}",
								"connections",
								"{{connectionKey}}",
								"schemas",
								"TPCDSUSER3",
								"entityShapes"
							],
							"query": [
								{
									"key": "dataAssetKey",
									"value": "{{dataAssetKey}}"
								},
								{
									"key": "folderKey",
									"value": "{{folderKey}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "8. DataPreview OracleDB",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{auth-signature}}"
							},
							{
								"key": "hostname",
								"type": "text",
								"value": "{{hostname}}"
							},
							{
								"key": "date",
								"type": "text",
								"value": "{{request-date}}"
							},
							{
								"key": "Content-Length",
								"type": "text",
								"value": "{{content-length}}"
							},
							{
								"key": "x-content-sha256",
								"type": "text",
								"value": "{{content-sha256}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"dataAsset\": {\n        \"key\": \"{{dataAssetKey}}\",\n        \"type\": \"ORACLE_DATA_ASSET\",\n        \"modelType\": \"GENERIC_DATA_ASSET\",\n        \"objectStatus\": 0\n    },\n    \"connection\": {\n        \"key\": \"{{connectionKey}}\",\n        \"type\": \"ORACLEDB_CONNECTION\",\n        \"modelType\": \"GENERIC_CONNECTION\",\n        \"objectStatus\": 0\n    },\n    \"schema\": {\n        \"name\": \"TPCDSUSER3\",\n        \"modelType\": \"SCHEMA\",\n        \"resourceName\": \"TPCDSUSER3\"\n    },\n    \"dataEntity\": {\n        \"name\": \"STORE_SALES_1000M\",\n        \"modelType\": \"TABLE_ENTITY\"\n    },\n    \"readOperationConfig\": {\n        \"modelType\": \"READ_OPERATION_CONFIG\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{dp-api}}/{{service-dp-api-version}}/registries/{{registry-id}}/actions/dataPreview?dataAssetKey={{dataAssetKey}}&folderKey={{folderKey}}",
							"protocol": "http",
							"host": [
								"{{dp-api}}"
							],
							"path": [
								"{{service-dp-api-version}}",
								"registries",
								"{{registry-id}}",
								"actions",
								"dataPreview"
							],
							"query": [
								{
									"key": "dataAssetKey",
									"value": "{{dataAssetKey}}"
								},
								{
									"key": "folderKey",
									"value": "{{folderKey}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "more",
			"item": [
				{
					"name": "0. Create Endpoint Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{auth-signature}}"
							},
							{
								"key": "hostname",
								"type": "text",
								"value": "{{hostname}}"
							},
							{
								"key": "date",
								"type": "text",
								"value": "{{request-date}}"
							},
							{
								"key": "Content-Length",
								"type": "text",
								"value": "{{content-length}}"
							},
							{
								"key": "x-content-sha256",
								"type": "text",
								"value": "{{content-sha256}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"modelType\": \"PRIVATE_END_POINT\",\n    \"identifier\": \"TEST_PRIVATE_END_POINTR\",\n    \"parentRef\": {},\n    \"description\": \"TEST_PRIVATE_END_POINT\",\n    \"name\": \"pe_teste\",\n    \"dcmsEndpointId\": \"ocid1.endpointservice.oc1.phx.aaaaaaaamma3fvgw5xlefdoio4f2nfx5fn76yfezbdcnlls2jiaisydl3rra\",\n    \"peId\": \"ocid1.privateendpoint.oc1.phx.aaaaaaaaeetp4i5umqbhr66bp5n3q7j6j4bsjss7gjrqfzdsgq6ab4ryx7ia\",\n    \"compartmentId\": \"ocid1.compartment.oc1..aaaaaaaarbixr6kly2asc2qhox6ucmxmi3sglhh4c5hglkpa2pajp6dtrfgq\",\n    \"dnsProxyIp\": \"10.1.0.14\",\n    \"privateEndpointIp\": \"10.0.0.2\",\n    \"state\": \"ACTIVE\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8082/20200430/instances/1234/metadataObjects",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"20200430",
								"instances",
								"1234",
								"metadataObjects"
							]
						}
					},
					"response": []
				},
				{
					"name": "2. Create DA OOS",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{auth-signature}}"
							},
							{
								"key": "hostname",
								"type": "text",
								"value": "{{hostname}}"
							},
							{
								"key": "date",
								"type": "text",
								"value": "{{request-date}}"
							},
							{
								"key": "Content-Length",
								"type": "text",
								"value": "{{content-length}}"
							},
							{
								"key": "x-content-sha256",
								"type": "text",
								"value": "{{content-sha256}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"modelType\": \"GENERIC_DATA_ASSET\",\n    \"type\": \"ORACLE_OBJECT_STORAGE_DATA_ASSET\",\n    \"name\": \"OOSDIS\",\n    \"description\": \"OOS For DIS\",\n    \"properties\": {\n        \"tenantOCId\": \"ocid1.tenancy.oc1..aaaaaaaangdg77mg3cxnialazk7whbtd2didftz3rv2bhqrxcvymaecagxdq\",\n        \"namespace\": \"disdevtenancy\",\n        \"url\": \"https://objectstorage.us-ashburn-1.oraclecloud.com\"\n    },\n    \"identifier\": \"OOSDAAA_DIS\",\n    \"defaultConnection\": {\n        \"modelType\": \"GENERIC_CONNECTION\",\n        \"type\": \"ORACLE_OBJECT_STORAGE_CONNECTION\",\n        \"name\": \"OODCON22DIS\",\n        \"description\": \"OODCON for DOS\",\n        \"identifier\": \"OODCONN_DIS\",\n        \"properties\": {}\n    },\n    \"registryMetadata\": {\n        \"aggregatorKey\": \"d4eea2c3-6e94-4928-9981-008ce5f4d7e7\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://dp-private-lbr-host:8081/{{service-api-version}}/registries/{{registry-id}}/dataAssets?folderKey=d4eea2c3-6e94-4928-9981-008ce5f4d7e7",
							"protocol": "http",
							"host": [
								"dp-private-lbr-host"
							],
							"port": "8081",
							"path": [
								"{{service-api-version}}",
								"registries",
								"{{registry-id}}",
								"dataAssets"
							],
							"query": [
								{
									"key": "folderKey",
									"value": "d4eea2c3-6e94-4928-9981-008ce5f4d7e7"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "2.1. Create DA MSSQL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{auth-signature}}"
							},
							{
								"key": "hostname",
								"type": "text",
								"value": "{{hostname}}"
							},
							{
								"key": "date",
								"type": "text",
								"value": "{{request-date}}"
							},
							{
								"key": "Content-Length",
								"type": "text",
								"value": "{{content-length}}"
							},
							{
								"key": "x-content-sha256",
								"type": "text",
								"value": "{{content-sha256}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"MSSQLDBBA\",\n    \"identifier\": \"MSSQLDBBA\",\n    \"type\": \"GENERIC_JDBC_DATA_ASSET\",\n    \"modelType\": \"GENERIC_DATA_ASSET\",\n    \"properties\": {\n        \"serviceName\": \"DCMSDB_phx1fz.testsubnetcck.testvcnvvk.oraclevcn.com\",\n        \"host\": \"10.0.0.100\",\n        \"port\": \"1521\",\n        \"dataAssetType\": \"SQLSERVER\"\n    },\n    \"defaultConnection\": {\n        \"name\": \"ORADBCONNA\",\n        \"modelType\": \"GENERIC_CONNECTION\",\n        \"identifier\": \"ORADBCONNA\",\n        \"type\": \"ORACLEDB_CONNECTION\",\n        \"properties\": {\n            \"username\": \"sys as sysdba\",\n            \"password\": \"WelcomeDB##123\"\n        }\n    },\n    \"registryMetadata\": {\n        \"aggregatorKey\": \"13e38d4f-84fa-439a-be6d-716831b866bb\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8081/{{service-api-version}}/registries/{{registry-id}}/dataAssets?folderKey=5d1d7c8f-aa70-42a5-86ce-efc52e1caf2d",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"{{service-api-version}}",
								"registries",
								"{{registry-id}}",
								"dataAssets"
							],
							"query": [
								{
									"key": "folderKey",
									"value": "5d1d7c8f-aa70-42a5-86ce-efc52e1caf2d"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "2.1. Create DA OracleDB",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{auth-signature}}"
							},
							{
								"key": "hostname",
								"type": "text",
								"value": "{{hostname}}"
							},
							{
								"key": "date",
								"type": "text",
								"value": "{{request-date}}"
							},
							{
								"key": "Content-Length",
								"type": "text",
								"value": "{{content-length}}"
							},
							{
								"key": "x-content-sha256",
								"type": "text",
								"value": "{{content-sha256}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"ORADBBA\",\n    \"identifier\": \"ORADBBA\",\n    \"type\": \"ORACLE_DATA_ASSET\",\n    \"modelType\": \"GENERIC_DATA_ASSET\",\n    \"properties\": {\n        \"serviceName\": \"DCMSDB_phx1fz.testsubnetcck.testvcnvvk.oraclevcn.com\",\n        \"host\": \"10.0.0.100\",\n        \"port\": \"1521\"\n    },\n    \"defaultConnection\": {\n        \"name\": \"ORADBCONNA\",\n        \"modelType\": \"GENERIC_CONNECTION\",\n        \"identifier\": \"ORADBCONNA\",\n        \"type\": \"ORACLEDB_CONNECTION\",\n        \"properties\": {\n            \"username\": \"sys as sysdba\",\n            \"password\": \"WelcomeDB##123\"\n        }\n    },\n    \"registryMetadata\": {\n        \"aggregatorKey\": \"5d1d7c8f-aa70-42a5-86ce-efc52e1caf2d\"\n    },\n    \"endPoints\": [\n        {\n            \"modelType\": \"PRIVATE_END_POINT\",\n            \"key\": \"037fe6b5-f7f9-4f94-932d-65a1f6552c06\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8081/{{service-api-version}}/registries/{{registry-id}}/dataAssets?folderKey=5d1d7c8f-aa70-42a5-86ce-efc52e1caf2d",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"{{service-api-version}}",
								"registries",
								"{{registry-id}}",
								"dataAssets"
							],
							"query": [
								{
									"key": "folderKey",
									"value": "5d1d7c8f-aa70-42a5-86ce-efc52e1caf2d"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "2.1. Create DA Generic ADWC",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{auth-signature}}"
							},
							{
								"key": "hostname",
								"type": "text",
								"value": "{{hostname}}"
							},
							{
								"key": "date",
								"type": "text",
								"value": "{{request-date}}"
							},
							{
								"key": "Content-Length",
								"type": "text",
								"value": "{{content-length}}"
							},
							{
								"key": "x-content-sha256",
								"type": "text",
								"value": "{{content-sha256}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"ADWDBBA3\",\n    \"identifier\": \"ADWDBBA3\",\n    \"type\": \"ORACLE_ADWC_DATA_ASSET\",\n    \"modelType\": \"GENERIC_DATA_ASSET\",\n    \"properties\": {\n        \"tnsAlias\": \"db202003281057_high\",\n        \"databaseOCID\": \"1\",\n        \"walletSecret\": {\n            \"value\": \"\"\n        }\n    },\n    \"serviceName\": \"db202003281057_high\",\n    \"defaultConnection\": {\n        \"name\": \"ORADBCONNA\",\n        \"modelType\": \"GENERIC_CONNECTION\",\n        \"identifier\": \"ORADBCONNA\",\n        \"type\": \"ORACLE_ADWC_CONNECTION\",\n        \"properties\": {\n            \"username\": \"admin\",\n            \"passwordSecret\": {\n                \"value\": \"Welcome#@1234\"\n            },\n            \"tnsAlias\": \"db202003281057_high\"\n        },\n        \"serviceName\": \"db202003281057_high\"\n    },\n    \"registryMetadata\": {\n        \"aggregatorKey\": \"5d1d7c8f-aa70-42a5-86ce-efc52e1caf2d\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8081/{{service-api-version}}/registries/{{registry-id}}/dataAssets?folderKey=5d1d7c8f-aa70-42a5-86ce-efc52e1caf2d",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"{{service-api-version}}",
								"registries",
								"{{registry-id}}",
								"dataAssets"
							],
							"query": [
								{
									"key": "folderKey",
									"value": "5d1d7c8f-aa70-42a5-86ce-efc52e1caf2d"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "3. Get DA FullDetails",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{auth-signature}}"
							},
							{
								"key": "hostname",
								"type": "text",
								"value": "{{hostname}}"
							},
							{
								"key": "date",
								"type": "text",
								"value": "{{request-date}}"
							},
							{
								"key": "Content-Length",
								"type": "text",
								"value": "{{content-length}}"
							},
							{
								"key": "x-content-sha256",
								"type": "text",
								"value": "{{content-sha256}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://dp-private-lbr-host:8081/{{service-api-version}}/registries/{{registry-id}}/dataAssetFullDetails/1237fa1b-e830-4883-b9ad-5b757fbf987e?folderKey=d4eea2c3-6e94-4928-9981-008ce5f4d7e7&connectionKey=30643f49-e409-49c0-a689-1e4522bafee6&endpointId=3e9b447a-e83e-45b4-805e-3b77e06dc669",
							"protocol": "http",
							"host": [
								"dp-private-lbr-host"
							],
							"port": "8081",
							"path": [
								"{{service-api-version}}",
								"registries",
								"{{registry-id}}",
								"dataAssetFullDetails",
								"1237fa1b-e830-4883-b9ad-5b757fbf987e"
							],
							"query": [
								{
									"key": "folderKey",
									"value": "d4eea2c3-6e94-4928-9981-008ce5f4d7e7"
								},
								{
									"key": "connectionKey",
									"value": "30643f49-e409-49c0-a689-1e4522bafee6"
								},
								{
									"key": "endpointId",
									"value": "3e9b447a-e83e-45b4-805e-3b77e06dc669"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "4.1 Delete DA",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{auth-signature}}"
							},
							{
								"key": "hostname",
								"type": "text",
								"value": "{{hostname}}"
							},
							{
								"key": "date",
								"type": "text",
								"value": "{{request-date}}"
							},
							{
								"key": "Content-Length",
								"type": "text",
								"value": "{{content-length}}"
							},
							{
								"key": "x-content-sha256",
								"type": "text",
								"value": "{{content-sha256}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"DA_Oracle1\",\n    \"identifier\": \"DA_ORACLE1\",\n    \"modelType\": \"ORACLE_DATA_ASSET\",\n    \"defaultConnection\": {\n        \"name\": \"Default Connection\",\n        \"identifier\": \"DEFAULT_CONNECTION\",\n        \"modelType\": \"ORACLEDB_CONNECTION\",\n        \"username\": \"alpha\",\n        \"password\": \"a1phaOffice1_\"\n    },\n    \"serviceName\": \"orclpdb.us.oracle.com\",\n    \"host\": \"den03cyq.us.oracle.com\",\n    \"port\": \"1521\"\n}"
						},
						"url": {
							"raw": "http://dp-private-lbr-host:8081/{{service-api-version}}/registries/{{registry-id}}/dataAssets/1237fa1b-e830-4883-b9ad-5b757fbf987e?folderKey=d4eea2c3-6e94-4928-9981-008ce5f4d7e7",
							"protocol": "http",
							"host": [
								"dp-private-lbr-host"
							],
							"port": "8081",
							"path": [
								"{{service-api-version}}",
								"registries",
								"{{registry-id}}",
								"dataAssets",
								"1237fa1b-e830-4883-b9ad-5b757fbf987e"
							],
							"query": [
								{
									"key": "folderKey",
									"value": "d4eea2c3-6e94-4928-9981-008ce5f4d7e7"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "4. Create DA MySQL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{auth-signature}}"
							},
							{
								"key": "hostname",
								"type": "text",
								"value": "{{hostname}}"
							},
							{
								"key": "date",
								"type": "text",
								"value": "{{request-date}}"
							},
							{
								"key": "Content-Length",
								"type": "text",
								"value": "{{content-length}}"
							},
							{
								"key": "x-content-sha256",
								"type": "text",
								"value": "{{content-sha256}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"MySQLDADS\",\n    \"identifier\": \"MYSQLDAAA\",\n    \"type\": \"MYSQL_DATA_ASSET\",\n    \"modelType\": \"GENERIC_DATA_ASSET\",\n    \"properties\": {\n        \"host\": \"10.0.0.6\",\n        \"port\": \"3306\"\n    },\n    \"defaultConnection\": {\n        \"name\": \"MySQLCONNAA\",\n        \"modelType\": \"GENERIC_CONNECTION\",\n        \"identifier\": \"MYSQLCONNDA\",\n        \"type\": \"MYSQL_CONNECTION\",\n        \"properties\": {\n            \"username\": \"admin\",\n            \"password\": \"1qazZAQ!\"\n        }\n    },\n    \"registryMetadata\": {\n        \"aggregatorKey\": \"d4eea2c3-6e94-4928-9981-008ce5f4d7e7\"\n    },\n    \"endPoints\": [\n        {\n            \"modelType\": \"PRIVATE_END_POINT\",\n            \"key\": \"3e9b447a-e83e-45b4-805e-3b77e06dc669\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://dp-private-lbr-host:8081/{{service-api-version}}/registries/{{registry-id}}/dataAssets?folderKey=d4eea2c3-6e94-4928-9981-008ce5f4d7e7",
							"protocol": "http",
							"host": [
								"dp-private-lbr-host"
							],
							"port": "8081",
							"path": [
								"{{service-api-version}}",
								"registries",
								"{{registry-id}}",
								"dataAssets"
							],
							"query": [
								{
									"key": "folderKey",
									"value": "d4eea2c3-6e94-4928-9981-008ce5f4d7e7"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "5. DataAsset Reference",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{auth-signature}}"
							},
							{
								"key": "hostname",
								"type": "text",
								"value": "{{hostname}}"
							},
							{
								"key": "date",
								"type": "text",
								"value": "{{request-date}}"
							},
							{
								"key": "Content-Length",
								"type": "text",
								"value": "{{content-length}}"
							},
							{
								"key": "x-content-sha256",
								"type": "text",
								"value": "{{content-sha256}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"serviceArtifactId\": \"SERVICEA\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://dp-private-lbr-host:8081/{{service-api-version}}/registries/{{registry-id}}/dataAsset/1237fa1b-e830-4883-b9ad-5b757fbf987e/actions/register?folderKey=d4eea2c3-6e94-4928-9981-008ce5f4d7e7",
							"protocol": "http",
							"host": [
								"dp-private-lbr-host"
							],
							"port": "8081",
							"path": [
								"{{service-api-version}}",
								"registries",
								"{{registry-id}}",
								"dataAsset",
								"1237fa1b-e830-4883-b9ad-5b757fbf987e",
								"actions",
								"register"
							],
							"query": [
								{
									"key": "folderKey",
									"value": "d4eea2c3-6e94-4928-9981-008ce5f4d7e7"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "6. DataAsset De-Reference",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{auth-signature}}"
							},
							{
								"key": "hostname",
								"type": "text",
								"value": "{{hostname}}"
							},
							{
								"key": "date",
								"type": "text",
								"value": "{{request-date}}"
							},
							{
								"key": "Content-Length",
								"type": "text",
								"value": "{{content-length}}"
							},
							{
								"key": "x-content-sha256",
								"type": "text",
								"value": "{{content-sha256}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"serviceArtifactId\": \"SERVICEA\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://dp-private-lbr-host:8081/{{service-api-version}}/registries/{{registry-id}}/dataAsset/1237fa1b-e830-4883-b9ad-5b757fbf987e/actions/deRegister?folderKey=d4eea2c3-6e94-4928-9981-008ce5f4d7e7",
							"protocol": "http",
							"host": [
								"dp-private-lbr-host"
							],
							"port": "8081",
							"path": [
								"{{service-api-version}}",
								"registries",
								"{{registry-id}}",
								"dataAsset",
								"1237fa1b-e830-4883-b9ad-5b757fbf987e",
								"actions",
								"deRegister"
							],
							"query": [
								{
									"key": "folderKey",
									"value": "d4eea2c3-6e94-4928-9981-008ce5f4d7e7"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "7. List Schemas OracleDB",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{auth-signature}}"
							},
							{
								"key": "hostname",
								"type": "text",
								"value": "{{hostname}}"
							},
							{
								"key": "date",
								"type": "text",
								"value": "{{request-date}}"
							},
							{
								"key": "Content-Length",
								"type": "text",
								"value": "{{content-length}}",
								"disabled": true
							},
							{
								"key": "x-content-sha256",
								"type": "text",
								"value": "{{content-sha256}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "di-internal-request",
								"value": "dsdsdsds",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:8081/{{service-api-version}}/registries/{{registry-id}}/connections/cb2075b5-d04f-46be-a4a9-17891f27976d/schemas/ADMIN/dataEntities?dataAssetKey=cf1efbce-5cb2-4b21-9a4f-d505db194850&folderKey=f7badf21-6763-46de-a2d3-fa6ed95e5b53",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"{{service-api-version}}",
								"registries",
								"{{registry-id}}",
								"connections",
								"cb2075b5-d04f-46be-a4a9-17891f27976d",
								"schemas",
								"ADMIN",
								"dataEntities"
							],
							"query": [
								{
									"key": "dataAssetKey",
									"value": "cf1efbce-5cb2-4b21-9a4f-d505db194850"
								},
								{
									"key": "folderKey",
									"value": "f7badf21-6763-46de-a2d3-fa6ed95e5b53"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "9. EntityShape OracleDB",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{auth-signature}}"
							},
							{
								"key": "hostname",
								"type": "text",
								"value": "{{hostname}}"
							},
							{
								"key": "date",
								"type": "text",
								"value": "{{request-date}}"
							},
							{
								"key": "Content-Length",
								"type": "text",
								"value": "{{content-length}}"
							},
							{
								"key": "x-content-sha256",
								"type": "text",
								"value": "{{content-sha256}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"modelType\": \"TABLE_ENTITY\",\n    \"name\": \"AUDIT_TRAIL$\",\n    \"resourceName\": \"TABLE_ENTITY:AUDIT_TRAIL$\"\n}"
						},
						"url": {
							"raw": "http://dp-private-lbr-host:8081/{{service-api-version}}/registries/{{registry-id}}/connections/5058229c-f4dc-4e72-a271-416e122aad7c/schemas/DVSYS/entityShapes?dataAssetKey=d07675ba-bff5-4787-a59a-5836f0396b75&folderKey=d4eea2c3-6e94-4928-9981-008ce5f4d7e7",
							"protocol": "http",
							"host": [
								"dp-private-lbr-host"
							],
							"port": "8081",
							"path": [
								"{{service-api-version}}",
								"registries",
								"{{registry-id}}",
								"connections",
								"5058229c-f4dc-4e72-a271-416e122aad7c",
								"schemas",
								"DVSYS",
								"entityShapes"
							],
							"query": [
								{
									"key": "dataAssetKey",
									"value": "d07675ba-bff5-4787-a59a-5836f0396b75"
								},
								{
									"key": "folderKey",
									"value": "d4eea2c3-6e94-4928-9981-008ce5f4d7e7"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Endpoint Test",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{auth-signature}}"
							},
							{
								"key": "hostname",
								"type": "text",
								"value": "{{hostname}}"
							},
							{
								"key": "date",
								"type": "text",
								"value": "{{request-date}}"
							},
							{
								"key": "Content-Length",
								"type": "text",
								"value": "{{content-length}}"
							},
							{
								"key": "x-content-sha256",
								"type": "text",
								"value": "{{content-sha256}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"modelType\": \"PRIVATE_END_POINT\",\n    \"identifier\": \"TEST_PRIVATE_END_POINT_TEST\",\n    \"parentRef\": {},\n    \"description\": \"TEST_PRIVATE_END_POINT\",\n    \"name\": \"pe_testtest\",\n    \"dcmsEndpointOcid\": \"ocid1.endpointservice.oc1.phx.aaaaaaaamma3fvgw5xlefdoio4f2nfx5fn76yfezbdcnlls2jiaisydl3rra\",\n    \"peOcid\": \"ocid1.privateendpoint.oc1.phx.aaaaaaaaeetp4i5umqbhr66bp5n3q7j6j4bsjss7gjrqfzdsgq6ab4ryx7ia\",\n    \"compartmentId\": \"ocid1.compartment.oc1..aaaaaaaarbixr6kly2asc2qhox6ucmxmi3sglhh4c5hglkpa2pajp6dtrfgq\",\n    \"dnsProxyIp\": \"10.1.0.14\",\n    \"privateEndpointIp\": \"10.0.0.2\",\n    \"state\": \"ACTIVE\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://dp-private-lbr-host:8081/{{service-api-version}}/registries/{{registry-id}}/endpoints",
							"protocol": "http",
							"host": [
								"dp-private-lbr-host"
							],
							"port": "8081",
							"path": [
								"{{service-api-version}}",
								"registries",
								"{{registry-id}}",
								"endpoints"
							]
						}
					},
					"response": []
				},
				{
					"name": "List DA",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{auth-signature}}"
							},
							{
								"key": "hostname",
								"type": "text",
								"value": "{{hostname}}"
							},
							{
								"key": "date",
								"type": "text",
								"value": "{{request-date}}"
							},
							{
								"key": "Content-Length",
								"type": "text",
								"value": "{{content-length}}"
							},
							{
								"key": "x-content-sha256",
								"type": "text",
								"value": "{{content-sha256}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"DA_Oracle1\",\n    \"identifier\": \"DA_ORACLE1\",\n    \"modelType\": \"ORACLE_DATA_ASSET\",\n    \"defaultConnection\": {\n        \"name\": \"Default Connection\",\n        \"identifier\": \"DEFAULT_CONNECTION\",\n        \"modelType\": \"ORACLEDB_CONNECTION\",\n        \"username\": \"alpha\",\n        \"password\": \"a1phaOffice1_\"\n    },\n    \"serviceName\": \"orclpdb.us.oracle.com\",\n    \"host\": \"den03cyq.us.oracle.com\",\n    \"port\": \"1521\"\n}"
						},
						"url": {
							"raw": "http://dp-private-lbr-host:8081/{{service-api-version}}/registries/{{registry-id}}/dataAssets",
							"protocol": "http",
							"host": [
								"dp-private-lbr-host"
							],
							"port": "8081",
							"path": [
								"{{service-api-version}}",
								"registries",
								"{{registry-id}}",
								"dataAssets"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"/*",
					" * Postman pre-request signature generation for OCI.",
					" * Assembled (not really 'written') by Callan Howell-Pavia (callan.howell-pavia@oracle.com)",
					" * ",
					" * Copyright (c) 2019-2021 Callan Howell-Pavia (callan.howell-pavia@oracle.com)",
					" * Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl/",
					" * ",
					" * Required notices for open source or other separately licensed software products or components distributed",
					" * in this collection are included inline. Additional notices and/or licenses may be found at the included ",
					" * URLs.",
					" *",
					" * Since Postman doesn't include libraries for RSA signing, we have to include a ",
					" * pure javascript implementation of RSA-SSA, which can leverage Postman's inbuilt",
					" * CryptoJS (which does reduces this script's insanity by a little...).",
					" * This includes an implementation of RSA-SSA, jsrsasign, by Kenji Urushima as well  ",
					" * as all of the supporting libraries (Thanks Tom Wu! Thanks Yahoo!). This is then ",
					" * incorporated into a script based loosely upon the HTTP signature pre-request gist",
					" * by Dino Chiesa of Google, available here: https://gist.github.com/DinoChiesa/75796b27828cf8e15c91",
					" * as well as the Node.js signing sample provided by Oracle, available here: ",
					" * https://docs.cloud.oracle.com/iaas/Content/Resources/Assets/signing_sample_nodejs.txt",
					" */",
					"",
					"/*!",
					"Copyright (c) 2011, Yahoo! Inc. All rights reserved.",
					"Code licensed under the BSD License:",
					"http://developer.yahoo.com/yui/license.html",
					"version: 2.9.0",
					"*/",
					"if (YAHOO === undefined) { var YAHOO = {} } YAHOO.lang = { extend: function (g, h, f) { if (!h || !g) { throw new Error(\"YAHOO.lang.extend failed, please check that all dependencies are included.\") } var d = function () { }; d.prototype = h.prototype; g.prototype = new d(); g.prototype.constructor = g; g.superclass = h.prototype; if (h.prototype.constructor == Object.prototype.constructor) { h.prototype.constructor = h } if (f) { var b; for (b in f) { g.prototype[b] = f[b] } var e = function () { }, c = [\"toString\", \"valueOf\"]; try { if (false) { e = function (j, i) { for (b = 0; b < c.length; b = b + 1) { var l = c[b], k = i[l]; if (typeof k === \"function\" && k != Object.prototype[l]) { j[l] = k } } } } } catch (a) { } e(g.prototype, f) } } };",
					"",
					"/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/",
					" * Code licensed under the BSD License:",
					" * http://www-cs-students.stanford.edu/~tjw/jsbn/LICENSE",
					" */",
					"var b64map = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"; var b64pad = \"=\"; function hex2b64(d) { var b; var e; var a = \"\"; for (b = 0; b + 3 <= d.length; b += 3) { e = parseInt(d.substring(b, b + 3), 16); a += b64map.charAt(e >> 6) + b64map.charAt(e & 63) } if (b + 1 == d.length) { e = parseInt(d.substring(b, b + 1), 16); a += b64map.charAt(e << 2) } else { if (b + 2 == d.length) { e = parseInt(d.substring(b, b + 2), 16); a += b64map.charAt(e >> 2) + b64map.charAt((e & 3) << 4) } } if (b64pad) { while ((a.length & 3) > 0) { a += b64pad } } return a } function b64tohex(f) { var d = \"\"; var e; var b = 0; var c; var a; for (e = 0; e < f.length; ++e) { if (f.charAt(e) == b64pad) { break } a = b64map.indexOf(f.charAt(e)); if (a < 0) { continue } if (b == 0) { d += int2char(a >> 2); c = a & 3; b = 1 } else { if (b == 1) { d += int2char((c << 2) | (a >> 4)); c = a & 15; b = 2 } else { if (b == 2) { d += int2char(c); d += int2char(a >> 2); c = a & 3; b = 3 } else { d += int2char((c << 2) | (a >> 4)); d += int2char(a & 15); b = 0 } } } } if (b == 1) { d += int2char(c << 2) } return d } function b64toBA(e) { var d = b64tohex(e); var c; var b = new Array(); for (c = 0; 2 * c < d.length; ++c) { b[c] = parseInt(d.substring(2 * c, 2 * c + 2), 16) } return b };",
					"/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/",
					" * Code licensed under the BSD License:",
					" * http://www-cs-students.stanford.edu/~tjw/jsbn/LICENSE",
					" */",
					"var dbits; var canary = 244837814094590; var j_lm = ((canary & 16777215) == 15715070); function BigInteger(e, d, f) { if (e != null) { if (\"number\" == typeof e) { this.fromNumber(e, d, f) } else { if (d == null && \"string\" != typeof e) { this.fromString(e, 256) } else { this.fromString(e, d) } } } } function nbi() { return new BigInteger(null) } function am1(f, a, b, e, h, g) { while (--g >= 0) { var d = a * this[f++] + b[e] + h; h = Math.floor(d / 67108864); b[e++] = d & 67108863 } return h } function am2(f, q, r, e, o, a) { var k = q & 32767, p = q >> 15; while (--a >= 0) { var d = this[f] & 32767; var g = this[f++] >> 15; var b = p * d + g * k; d = k * d + ((b & 32767) << 15) + r[e] + (o & 1073741823); o = (d >>> 30) + (b >>> 15) + p * g + (o >>> 30); r[e++] = d & 1073741823 } return o } function am3(f, q, r, e, o, a) { var k = q & 16383, p = q >> 14; while (--a >= 0) { var d = this[f] & 16383; var g = this[f++] >> 14; var b = p * d + g * k; d = k * d + ((b & 16383) << 14) + r[e] + o; o = (d >> 28) + (b >> 14) + p * g; r[e++] = d & 268435455 } return o }; BigInteger.prototype.am = am3; dbits = 28; BigInteger.prototype.DB = dbits; BigInteger.prototype.DM = ((1 << dbits) - 1); BigInteger.prototype.DV = (1 << dbits); var BI_FP = 52; BigInteger.prototype.FV = Math.pow(2, BI_FP); BigInteger.prototype.F1 = BI_FP - dbits; BigInteger.prototype.F2 = 2 * dbits - BI_FP; var BI_RM = \"0123456789abcdefghijklmnopqrstuvwxyz\"; var BI_RC = new Array(); var rr, vv; rr = \"0\".charCodeAt(0); for (vv = 0; vv <= 9; ++vv) { BI_RC[rr++] = vv } rr = \"a\".charCodeAt(0); for (vv = 10; vv < 36; ++vv) { BI_RC[rr++] = vv } rr = \"A\".charCodeAt(0); for (vv = 10; vv < 36; ++vv) { BI_RC[rr++] = vv } function int2char(a) { return BI_RM.charAt(a) } function intAt(b, a) { var d = BI_RC[b.charCodeAt(a)]; return (d == null) ? -1 : d } function bnpCopyTo(b) { for (var a = this.t - 1; a >= 0; --a) { b[a] = this[a] } b.t = this.t; b.s = this.s } function bnpFromInt(a) { this.t = 1; this.s = (a < 0) ? -1 : 0; if (a > 0) { this[0] = a } else { if (a < -1) { this[0] = a + this.DV } else { this.t = 0 } } } function nbv(a) { var b = nbi(); b.fromInt(a); return b } function bnpFromString(h, c) { var e; if (c == 16) { e = 4 } else { if (c == 8) { e = 3 } else { if (c == 256) { e = 8 } else { if (c == 2) { e = 1 } else { if (c == 32) { e = 5 } else { if (c == 4) { e = 2 } else { this.fromRadix(h, c); return } } } } } } this.t = 0; this.s = 0; var g = h.length, d = false, f = 0; while (--g >= 0) { var a = (e == 8) ? h[g] & 255 : intAt(h, g); if (a < 0) { if (h.charAt(g) == \"-\") { d = true } continue } d = false; if (f == 0) { this[this.t++] = a } else { if (f + e > this.DB) { this[this.t - 1] |= (a & ((1 << (this.DB - f)) - 1)) << f; this[this.t++] = (a >> (this.DB - f)) } else { this[this.t - 1] |= a << f } } f += e; if (f >= this.DB) { f -= this.DB } } if (e == 8 && (h[0] & 128) != 0) { this.s = -1; if (f > 0) { this[this.t - 1] |= ((1 << (this.DB - f)) - 1) << f } } this.clamp(); if (d) { BigInteger.ZERO.subTo(this, this) } } function bnpClamp() { var a = this.s & this.DM; while (this.t > 0 && this[this.t - 1] == a) { --this.t } } function bnToString(c) { if (this.s < 0) { return \"-\" + this.negate().toString(c) } var e; if (c == 16) { e = 4 } else { if (c == 8) { e = 3 } else { if (c == 2) { e = 1 } else { if (c == 32) { e = 5 } else { if (c == 4) { e = 2 } else { return this.toRadix(c) } } } } } var g = (1 << e) - 1, l, a = false, h = \"\", f = this.t; var j = this.DB - (f * this.DB) % e; if (f-- > 0) { if (j < this.DB && (l = this[f] >> j) > 0) { a = true; h = int2char(l) } while (f >= 0) { if (j < e) { l = (this[f] & ((1 << j) - 1)) << (e - j); l |= this[--f] >> (j += this.DB - e) } else { l = (this[f] >> (j -= e)) & g; if (j <= 0) { j += this.DB; --f } } if (l > 0) { a = true } if (a) { h += int2char(l) } } } return a ? h : \"0\" } function bnNegate() { var a = nbi(); BigInteger.ZERO.subTo(this, a); return a } function bnAbs() { return (this.s < 0) ? this.negate() : this } function bnCompareTo(b) { var d = this.s - b.s; if (d != 0) { return d } var c = this.t; d = c - b.t; if (d != 0) { return (this.s < 0) ? -d : d } while (--c >= 0) { if ((d = this[c] - b[c]) != 0) { return d } } return 0 } function nbits(a) { var c = 1, b; if ((b = a >>> 16) != 0) { a = b; c += 16 } if ((b = a >> 8) != 0) { a = b; c += 8 } if ((b = a >> 4) != 0) { a = b; c += 4 } if ((b = a >> 2) != 0) { a = b; c += 2 } if ((b = a >> 1) != 0) { a = b; c += 1 } return c } function bnBitLength() { if (this.t <= 0) { return 0 } return this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ (this.s & this.DM)) } function bnpDLShiftTo(c, b) { var a; for (a = this.t - 1; a >= 0; --a) { b[a + c] = this[a] } for (a = c - 1; a >= 0; --a) { b[a] = 0 } b.t = this.t + c; b.s = this.s } function bnpDRShiftTo(c, b) { for (var a = c; a < this.t; ++a) { b[a - c] = this[a] } b.t = Math.max(this.t - c, 0); b.s = this.s } function bnpLShiftTo(j, e) { var b = j % this.DB; var a = this.DB - b; var g = (1 << a) - 1; var f = Math.floor(j / this.DB), h = (this.s << b) & this.DM, d; for (d = this.t - 1; d >= 0; --d) { e[d + f + 1] = (this[d] >> a) | h; h = (this[d] & g) << b } for (d = f - 1; d >= 0; --d) { e[d] = 0 } e[f] = h; e.t = this.t + f + 1; e.s = this.s; e.clamp() } function bnpRShiftTo(g, d) { d.s = this.s; var e = Math.floor(g / this.DB); if (e >= this.t) { d.t = 0; return } var b = g % this.DB; var a = this.DB - b; var f = (1 << b) - 1; d[0] = this[e] >> b; for (var c = e + 1; c < this.t; ++c) { d[c - e - 1] |= (this[c] & f) << a; d[c - e] = this[c] >> b } if (b > 0) { d[this.t - e - 1] |= (this.s & f) << a } d.t = this.t - e; d.clamp() } function bnpSubTo(d, f) { var e = 0, g = 0, b = Math.min(d.t, this.t); while (e < b) { g += this[e] - d[e]; f[e++] = g & this.DM; g >>= this.DB } if (d.t < this.t) { g -= d.s; while (e < this.t) { g += this[e]; f[e++] = g & this.DM; g >>= this.DB } g += this.s } else { g += this.s; while (e < d.t) { g -= d[e]; f[e++] = g & this.DM; g >>= this.DB } g -= d.s } f.s = (g < 0) ? -1 : 0; if (g < -1) { f[e++] = this.DV + g } else { if (g > 0) { f[e++] = g } } f.t = e; f.clamp() } function bnpMultiplyTo(c, e) { var b = this.abs(), f = c.abs(); var d = b.t; e.t = d + f.t; while (--d >= 0) { e[d] = 0 } for (d = 0; d < f.t; ++d) { e[d + b.t] = b.am(0, f[d], e, d, 0, b.t) } e.s = 0; e.clamp(); if (this.s != c.s) { BigInteger.ZERO.subTo(e, e) } } function bnpSquareTo(d) { var a = this.abs(); var b = d.t = 2 * a.t; while (--b >= 0) { d[b] = 0 } for (b = 0; b < a.t - 1; ++b) { var e = a.am(b, a[b], d, 2 * b, 0, 1); if ((d[b + a.t] += a.am(b + 1, 2 * a[b], d, 2 * b + 1, e, a.t - b - 1)) >= a.DV) { d[b + a.t] -= a.DV; d[b + a.t + 1] = 1 } } if (d.t > 0) { d[d.t - 1] += a.am(b, a[b], d, 2 * b, 0, 1) } d.s = 0; d.clamp() } function bnpDivRemTo(n, h, g) { var w = n.abs(); if (w.t <= 0) { return } var k = this.abs(); if (k.t < w.t) { if (h != null) { h.fromInt(0) } if (g != null) { this.copyTo(g) } return } if (g == null) { g = nbi() } var d = nbi(), a = this.s, l = n.s; var v = this.DB - nbits(w[w.t - 1]); if (v > 0) { w.lShiftTo(v, d); k.lShiftTo(v, g) } else { w.copyTo(d); k.copyTo(g) } var p = d.t; var b = d[p - 1]; if (b == 0) { return } var o = b * (1 << this.F1) + ((p > 1) ? d[p - 2] >> this.F2 : 0); var A = this.FV / o, z = (1 << this.F1) / o, x = 1 << this.F2; var u = g.t, s = u - p, f = (h == null) ? nbi() : h; d.dlShiftTo(s, f); if (g.compareTo(f) >= 0) { g[g.t++] = 1; g.subTo(f, g) } BigInteger.ONE.dlShiftTo(p, f); f.subTo(d, d); while (d.t < p) { d[d.t++] = 0 } while (--s >= 0) { var c = (g[--u] == b) ? this.DM : Math.floor(g[u] * A + (g[u - 1] + x) * z); if ((g[u] += d.am(0, c, g, s, 0, p)) < c) { d.dlShiftTo(s, f); g.subTo(f, g); while (g[u] < --c) { g.subTo(f, g) } } } if (h != null) { g.drShiftTo(p, h); if (a != l) { BigInteger.ZERO.subTo(h, h) } } g.t = p; g.clamp(); if (v > 0) { g.rShiftTo(v, g) } if (a < 0) { BigInteger.ZERO.subTo(g, g) } } function bnMod(b) { var c = nbi(); this.abs().divRemTo(b, null, c); if (this.s < 0 && c.compareTo(BigInteger.ZERO) > 0) { b.subTo(c, c) } return c } function Classic(a) { this.m = a } function cConvert(a) { if (a.s < 0 || a.compareTo(this.m) >= 0) { return a.mod(this.m) } else { return a } } function cRevert(a) { return a } function cReduce(a) { a.divRemTo(this.m, null, a) } function cMulTo(a, c, b) { a.multiplyTo(c, b); this.reduce(b) } function cSqrTo(a, b) { a.squareTo(b); this.reduce(b) } Classic.prototype.convert = cConvert; Classic.prototype.revert = cRevert; Classic.prototype.reduce = cReduce; Classic.prototype.mulTo = cMulTo; Classic.prototype.sqrTo = cSqrTo; function bnpInvDigit() { if (this.t < 1) { return 0 } var a = this[0]; if ((a & 1) == 0) { return 0 } var b = a & 3; b = (b * (2 - (a & 15) * b)) & 15; b = (b * (2 - (a & 255) * b)) & 255; b = (b * (2 - (((a & 65535) * b) & 65535))) & 65535; b = (b * (2 - a * b % this.DV)) % this.DV; return (b > 0) ? this.DV - b : -b } function Montgomery(a) { this.m = a; this.mp = a.invDigit(); this.mpl = this.mp & 32767; this.mph = this.mp >> 15; this.um = (1 << (a.DB - 15)) - 1; this.mt2 = 2 * a.t } function montConvert(a) { var b = nbi(); a.abs().dlShiftTo(this.m.t, b); b.divRemTo(this.m, null, b); if (a.s < 0 && b.compareTo(BigInteger.ZERO) > 0) { this.m.subTo(b, b) } return b } function montRevert(a) { var b = nbi(); a.copyTo(b); this.reduce(b); return b } function montReduce(a) { while (a.t <= this.mt2) { a[a.t++] = 0 } for (var c = 0; c < this.m.t; ++c) { var b = a[c] & 32767; var d = (b * this.mpl + (((b * this.mph + (a[c] >> 15) * this.mpl) & this.um) << 15)) & a.DM; b = c + this.m.t; a[b] += this.m.am(0, d, a, c, 0, this.m.t); while (a[b] >= a.DV) { a[b] -= a.DV; a[++b]++ } } a.clamp(); a.drShiftTo(this.m.t, a); if (a.compareTo(this.m) >= 0) { a.subTo(this.m, a) } } function montSqrTo(a, b) { a.squareTo(b); this.reduce(b) } function montMulTo(a, c, b) { a.multiplyTo(c, b); this.reduce(b) } Montgomery.prototype.convert = montConvert; Montgomery.prototype.revert = montRevert; Montgomery.prototype.reduce = montReduce; Montgomery.prototype.mulTo = montMulTo; Montgomery.prototype.sqrTo = montSqrTo; function bnpIsEven() { return ((this.t > 0) ? (this[0] & 1) : this.s) == 0 } function bnpExp(h, j) { if (h > 4294967295 || h < 1) { return BigInteger.ONE } var f = nbi(), a = nbi(), d = j.convert(this), c = nbits(h) - 1; d.copyTo(f); while (--c >= 0) { j.sqrTo(f, a); if ((h & (1 << c)) > 0) { j.mulTo(a, d, f) } else { var b = f; f = a; a = b } } return j.revert(f) } function bnModPowInt(b, a) { var c; if (b < 256 || a.isEven()) { c = new Classic(a) } else { c = new Montgomery(a) } return this.exp(b, c) } BigInteger.prototype.copyTo = bnpCopyTo; BigInteger.prototype.fromInt = bnpFromInt; BigInteger.prototype.fromString = bnpFromString; BigInteger.prototype.clamp = bnpClamp; BigInteger.prototype.dlShiftTo = bnpDLShiftTo; BigInteger.prototype.drShiftTo = bnpDRShiftTo; BigInteger.prototype.lShiftTo = bnpLShiftTo; BigInteger.prototype.rShiftTo = bnpRShiftTo; BigInteger.prototype.subTo = bnpSubTo; BigInteger.prototype.multiplyTo = bnpMultiplyTo; BigInteger.prototype.squareTo = bnpSquareTo; BigInteger.prototype.divRemTo = bnpDivRemTo; BigInteger.prototype.invDigit = bnpInvDigit; BigInteger.prototype.isEven = bnpIsEven; BigInteger.prototype.exp = bnpExp; BigInteger.prototype.toString = bnToString; BigInteger.prototype.negate = bnNegate; BigInteger.prototype.abs = bnAbs; BigInteger.prototype.compareTo = bnCompareTo; BigInteger.prototype.bitLength = bnBitLength; BigInteger.prototype.mod = bnMod; BigInteger.prototype.modPowInt = bnModPowInt; BigInteger.ZERO = nbv(0); BigInteger.ONE = nbv(1);",
					"/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/",
					" * Code licensed under the BSD License:",
					" * http://www-cs-students.stanford.edu/~tjw/jsbn/LICENSE",
					" */",
					"function bnClone() { var a = nbi(); this.copyTo(a); return a } function bnIntValue() { if (this.s < 0) { if (this.t == 1) { return this[0] - this.DV } else { if (this.t == 0) { return -1 } } } else { if (this.t == 1) { return this[0] } else { if (this.t == 0) { return 0 } } } return ((this[1] & ((1 << (32 - this.DB)) - 1)) << this.DB) | this[0] } function bnByteValue() { return (this.t == 0) ? this.s : (this[0] << 24) >> 24 } function bnShortValue() { return (this.t == 0) ? this.s : (this[0] << 16) >> 16 } function bnpChunkSize(a) { return Math.floor(Math.LN2 * this.DB / Math.log(a)) } function bnSigNum() { if (this.s < 0) { return -1 } else { if (this.t <= 0 || (this.t == 1 && this[0] <= 0)) { return 0 } else { return 1 } } } function bnpToRadix(c) { if (c == null) { c = 10 } if (this.signum() == 0 || c < 2 || c > 36) { return \"0\" } var f = this.chunkSize(c); var e = Math.pow(c, f); var i = nbv(e), j = nbi(), h = nbi(), g = \"\"; this.divRemTo(i, j, h); while (j.signum() > 0) { g = (e + h.intValue()).toString(c).substr(1) + g; j.divRemTo(i, j, h) } return h.intValue().toString(c) + g } function bnpFromRadix(m, h) { this.fromInt(0); if (h == null) { h = 10 } var f = this.chunkSize(h); var g = Math.pow(h, f), e = false, a = 0, l = 0; for (var c = 0; c < m.length; ++c) { var k = intAt(m, c); if (k < 0) { if (m.charAt(c) == \"-\" && this.signum() == 0) { e = true } continue } l = h * l + k; if (++a >= f) { this.dMultiply(g); this.dAddOffset(l, 0); a = 0; l = 0 } } if (a > 0) { this.dMultiply(Math.pow(h, a)); this.dAddOffset(l, 0) } if (e) { BigInteger.ZERO.subTo(this, this) } } function bnpFromNumber(f, e, h) { if (\"number\" == typeof e) { if (f < 2) { this.fromInt(1) } else { this.fromNumber(f, h); if (!this.testBit(f - 1)) { this.bitwiseTo(BigInteger.ONE.shiftLeft(f - 1), op_or, this) } if (this.isEven()) { this.dAddOffset(1, 0) } while (!this.isProbablePrime(e)) { this.dAddOffset(2, 0); if (this.bitLength() > f) { this.subTo(BigInteger.ONE.shiftLeft(f - 1), this) } } } } else { var d = new Array(), g = f & 7; d.length = (f >> 3) + 1; e.nextBytes(d); if (g > 0) { d[0] &= ((1 << g) - 1) } else { d[0] = 0 } this.fromString(d, 256) } } function bnToByteArray() { var b = this.t, c = new Array(); c[0] = this.s; var e = this.DB - (b * this.DB) % 8, f, a = 0; if (b-- > 0) { if (e < this.DB && (f = this[b] >> e) != (this.s & this.DM) >> e) { c[a++] = f | (this.s << (this.DB - e)) } while (b >= 0) { if (e < 8) { f = (this[b] & ((1 << e) - 1)) << (8 - e); f |= this[--b] >> (e += this.DB - 8) } else { f = (this[b] >> (e -= 8)) & 255; if (e <= 0) { e += this.DB; --b } } if ((f & 128) != 0) { f |= -256 } if (a == 0 && (this.s & 128) != (f & 128)) { ++a } if (a > 0 || f != this.s) { c[a++] = f } } } return c } function bnEquals(b) { return (this.compareTo(b) == 0) } function bnMin(b) { return (this.compareTo(b) < 0) ? this : b } function bnMax(b) { return (this.compareTo(b) > 0) ? this : b } function bnpBitwiseTo(c, h, e) { var d, g, b = Math.min(c.t, this.t); for (d = 0; d < b; ++d) { e[d] = h(this[d], c[d]) } if (c.t < this.t) { g = c.s & this.DM; for (d = b; d < this.t; ++d) { e[d] = h(this[d], g) } e.t = this.t } else { g = this.s & this.DM; for (d = b; d < c.t; ++d) { e[d] = h(g, c[d]) } e.t = c.t } e.s = h(this.s, c.s); e.clamp() } function op_and(a, b) { return a & b } function bnAnd(b) { var c = nbi(); this.bitwiseTo(b, op_and, c); return c } function op_or(a, b) { return a | b } function bnOr(b) { var c = nbi(); this.bitwiseTo(b, op_or, c); return c } function op_xor(a, b) { return a ^ b } function bnXor(b) { var c = nbi(); this.bitwiseTo(b, op_xor, c); return c } function op_andnot(a, b) { return a & ~b } function bnAndNot(b) { var c = nbi(); this.bitwiseTo(b, op_andnot, c); return c } function bnNot() { var b = nbi(); for (var a = 0; a < this.t; ++a) { b[a] = this.DM & ~this[a] } b.t = this.t; b.s = ~this.s; return b } function bnShiftLeft(b) { var a = nbi(); if (b < 0) { this.rShiftTo(-b, a) } else { this.lShiftTo(b, a) } return a } function bnShiftRight(b) { var a = nbi(); if (b < 0) { this.lShiftTo(-b, a) } else { this.rShiftTo(b, a) } return a } function lbit(a) { if (a == 0) { return -1 } var b = 0; if ((a & 65535) == 0) { a >>= 16; b += 16 } if ((a & 255) == 0) { a >>= 8; b += 8 } if ((a & 15) == 0) { a >>= 4; b += 4 } if ((a & 3) == 0) { a >>= 2; b += 2 } if ((a & 1) == 0) { ++b } return b } function bnGetLowestSetBit() { for (var a = 0; a < this.t; ++a) { if (this[a] != 0) { return a * this.DB + lbit(this[a]) } } if (this.s < 0) { return this.t * this.DB } return -1 } function cbit(a) { var b = 0; while (a != 0) { a &= a - 1; ++b } return b } function bnBitCount() { var c = 0, a = this.s & this.DM; for (var b = 0; b < this.t; ++b) { c += cbit(this[b] ^ a) } return c } function bnTestBit(b) { var a = Math.floor(b / this.DB); if (a >= this.t) { return (this.s != 0) } return ((this[a] & (1 << (b % this.DB))) != 0) } function bnpChangeBit(c, b) { var a = BigInteger.ONE.shiftLeft(c); this.bitwiseTo(a, b, a); return a } function bnSetBit(a) { return this.changeBit(a, op_or) } function bnClearBit(a) { return this.changeBit(a, op_andnot) } function bnFlipBit(a) { return this.changeBit(a, op_xor) } function bnpAddTo(d, f) { var e = 0, g = 0, b = Math.min(d.t, this.t); while (e < b) { g += this[e] + d[e]; f[e++] = g & this.DM; g >>= this.DB } if (d.t < this.t) { g += d.s; while (e < this.t) { g += this[e]; f[e++] = g & this.DM; g >>= this.DB } g += this.s } else { g += this.s; while (e < d.t) { g += d[e]; f[e++] = g & this.DM; g >>= this.DB } g += d.s } f.s = (g < 0) ? -1 : 0; if (g > 0) { f[e++] = g } else { if (g < -1) { f[e++] = this.DV + g } } f.t = e; f.clamp() } function bnAdd(b) { var c = nbi(); this.addTo(b, c); return c } function bnSubtract(b) { var c = nbi(); this.subTo(b, c); return c } function bnMultiply(b) { var c = nbi(); this.multiplyTo(b, c); return c } function bnSquare() { var a = nbi(); this.squareTo(a); return a } function bnDivide(b) { var c = nbi(); this.divRemTo(b, c, null); return c } function bnRemainder(b) { var c = nbi(); this.divRemTo(b, null, c); return c } function bnDivideAndRemainder(b) { var d = nbi(), c = nbi(); this.divRemTo(b, d, c); return new Array(d, c) } function bnpDMultiply(a) { this[this.t] = this.am(0, a - 1, this, 0, 0, this.t); ++this.t; this.clamp() } function bnpDAddOffset(b, a) { if (b == 0) { return } while (this.t <= a) { this[this.t++] = 0 } this[a] += b; while (this[a] >= this.DV) { this[a] -= this.DV; if (++a >= this.t) { this[this.t++] = 0 } ++this[a] } } function NullExp() { } function nNop(a) { return a } function nMulTo(a, c, b) { a.multiplyTo(c, b) } function nSqrTo(a, b) { a.squareTo(b) } NullExp.prototype.convert = nNop; NullExp.prototype.revert = nNop; NullExp.prototype.mulTo = nMulTo; NullExp.prototype.sqrTo = nSqrTo; function bnPow(a) { return this.exp(a, new NullExp()) } function bnpMultiplyLowerTo(b, f, e) { var d = Math.min(this.t + b.t, f); e.s = 0; e.t = d; while (d > 0) { e[--d] = 0 } var c; for (c = e.t - this.t; d < c; ++d) { e[d + this.t] = this.am(0, b[d], e, d, 0, this.t) } for (c = Math.min(b.t, f); d < c; ++d) { this.am(0, b[d], e, d, 0, f - d) } e.clamp() } function bnpMultiplyUpperTo(b, e, d) { --e; var c = d.t = this.t + b.t - e; d.s = 0; while (--c >= 0) { d[c] = 0 } for (c = Math.max(e - this.t, 0); c < b.t; ++c) { d[this.t + c - e] = this.am(e - c, b[c], d, 0, 0, this.t + c - e) } d.clamp(); d.drShiftTo(1, d) } function Barrett(a) { this.r2 = nbi(); this.q3 = nbi(); BigInteger.ONE.dlShiftTo(2 * a.t, this.r2); this.mu = this.r2.divide(a); this.m = a } function barrettConvert(a) { if (a.s < 0 || a.t > 2 * this.m.t) { return a.mod(this.m) } else { if (a.compareTo(this.m) < 0) { return a } else { var b = nbi(); a.copyTo(b); this.reduce(b); return b } } } function barrettRevert(a) { return a } function barrettReduce(a) { a.drShiftTo(this.m.t - 1, this.r2); if (a.t > this.m.t + 1) { a.t = this.m.t + 1; a.clamp() } this.mu.multiplyUpperTo(this.r2, this.m.t + 1, this.q3); this.m.multiplyLowerTo(this.q3, this.m.t + 1, this.r2); while (a.compareTo(this.r2) < 0) { a.dAddOffset(1, this.m.t + 1) } a.subTo(this.r2, a); while (a.compareTo(this.m) >= 0) { a.subTo(this.m, a) } } function barrettSqrTo(a, b) { a.squareTo(b); this.reduce(b) } function barrettMulTo(a, c, b) { a.multiplyTo(c, b); this.reduce(b) } Barrett.prototype.convert = barrettConvert; Barrett.prototype.revert = barrettRevert; Barrett.prototype.reduce = barrettReduce; Barrett.prototype.mulTo = barrettMulTo; Barrett.prototype.sqrTo = barrettSqrTo; function bnModPow(q, f) { var o = q.bitLength(), h, b = nbv(1), v; if (o <= 0) { return b } else { if (o < 18) { h = 1 } else { if (o < 48) { h = 3 } else { if (o < 144) { h = 4 } else { if (o < 768) { h = 5 } else { h = 6 } } } } } if (o < 8) { v = new Classic(f) } else { if (f.isEven()) { v = new Barrett(f) } else { v = new Montgomery(f) } } var p = new Array(), d = 3, s = h - 1, a = (1 << h) - 1; p[1] = v.convert(this); if (h > 1) { var A = nbi(); v.sqrTo(p[1], A); while (d <= a) { p[d] = nbi(); v.mulTo(A, p[d - 2], p[d]); d += 2 } } var l = q.t - 1, x, u = true, c = nbi(), y; o = nbits(q[l]) - 1; while (l >= 0) { if (o >= s) { x = (q[l] >> (o - s)) & a } else { x = (q[l] & ((1 << (o + 1)) - 1)) << (s - o); if (l > 0) { x |= q[l - 1] >> (this.DB + o - s) } } d = h; while ((x & 1) == 0) { x >>= 1; --d } if ((o -= d) < 0) { o += this.DB; --l } if (u) { p[x].copyTo(b); u = false } else { while (d > 1) { v.sqrTo(b, c); v.sqrTo(c, b); d -= 2 } if (d > 0) { v.sqrTo(b, c) } else { y = b; b = c; c = y } v.mulTo(c, p[x], b) } while (l >= 0 && (q[l] & (1 << o)) == 0) { v.sqrTo(b, c); y = b; b = c; c = y; if (--o < 0) { o = this.DB - 1; --l } } } return v.revert(b) } function bnGCD(c) { var b = (this.s < 0) ? this.negate() : this.clone(); var h = (c.s < 0) ? c.negate() : c.clone(); if (b.compareTo(h) < 0) { var e = b; b = h; h = e } var d = b.getLowestSetBit(), f = h.getLowestSetBit(); if (f < 0) { return b } if (d < f) { f = d } if (f > 0) { b.rShiftTo(f, b); h.rShiftTo(f, h) } while (b.signum() > 0) { if ((d = b.getLowestSetBit()) > 0) { b.rShiftTo(d, b) } if ((d = h.getLowestSetBit()) > 0) { h.rShiftTo(d, h) } if (b.compareTo(h) >= 0) { b.subTo(h, b); b.rShiftTo(1, b) } else { h.subTo(b, h); h.rShiftTo(1, h) } } if (f > 0) { h.lShiftTo(f, h) } return h } function bnpModInt(e) { if (e <= 0) { return 0 } var c = this.DV % e, b = (this.s < 0) ? e - 1 : 0; if (this.t > 0) { if (c == 0) { b = this[0] % e } else { for (var a = this.t - 1; a >= 0; --a) { b = (c * b + this[a]) % e } } } return b } function bnModInverse(f) { var j = f.isEven(); if ((this.isEven() && j) || f.signum() == 0) { return BigInteger.ZERO } var i = f.clone(), h = this.clone(); var g = nbv(1), e = nbv(0), l = nbv(0), k = nbv(1); while (i.signum() != 0) { while (i.isEven()) { i.rShiftTo(1, i); if (j) { if (!g.isEven() || !e.isEven()) { g.addTo(this, g); e.subTo(f, e) } g.rShiftTo(1, g) } else { if (!e.isEven()) { e.subTo(f, e) } } e.rShiftTo(1, e) } while (h.isEven()) { h.rShiftTo(1, h); if (j) { if (!l.isEven() || !k.isEven()) { l.addTo(this, l); k.subTo(f, k) } l.rShiftTo(1, l) } else { if (!k.isEven()) { k.subTo(f, k) } } k.rShiftTo(1, k) } if (i.compareTo(h) >= 0) { i.subTo(h, i); if (j) { g.subTo(l, g) } e.subTo(k, e) } else { h.subTo(i, h); if (j) { l.subTo(g, l) } k.subTo(e, k) } } if (h.compareTo(BigInteger.ONE) != 0) { return BigInteger.ZERO } if (k.compareTo(f) >= 0) { return k.subtract(f) } if (k.signum() < 0) { k.addTo(f, k) } else { return k } if (k.signum() < 0) { return k.add(f) } else { return k } } var lowprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]; var lplim = (1 << 26) / lowprimes[lowprimes.length - 1]; function bnIsProbablePrime(e) { var d, b = this.abs(); if (b.t == 1 && b[0] <= lowprimes[lowprimes.length - 1]) { for (d = 0; d < lowprimes.length; ++d) { if (b[0] == lowprimes[d]) { return true } } return false } if (b.isEven()) { return false } d = 1; while (d < lowprimes.length) { var a = lowprimes[d], c = d + 1; while (c < lowprimes.length && a < lplim) { a *= lowprimes[c++] } a = b.modInt(a); while (d < c) { if (a % lowprimes[d++] == 0) { return false } } } return b.millerRabin(e) } function bnpMillerRabin(f) { var g = this.subtract(BigInteger.ONE); var c = g.getLowestSetBit(); if (c <= 0) { return false } var h = g.shiftRight(c); f = (f + 1) >> 1; if (f > lowprimes.length) { f = lowprimes.length } var b = nbi(); for (var e = 0; e < f; ++e) { b.fromInt(lowprimes[Math.floor(Math.random() * lowprimes.length)]); var l = b.modPow(h, this); if (l.compareTo(BigInteger.ONE) != 0 && l.compareTo(g) != 0) { var d = 1; while (d++ < c && l.compareTo(g) != 0) { l = l.modPowInt(2, this); if (l.compareTo(BigInteger.ONE) == 0) { return false } } if (l.compareTo(g) != 0) { return false } } } return true } BigInteger.prototype.chunkSize = bnpChunkSize; BigInteger.prototype.toRadix = bnpToRadix; BigInteger.prototype.fromRadix = bnpFromRadix; BigInteger.prototype.fromNumber = bnpFromNumber; BigInteger.prototype.bitwiseTo = bnpBitwiseTo; BigInteger.prototype.changeBit = bnpChangeBit; BigInteger.prototype.addTo = bnpAddTo; BigInteger.prototype.dMultiply = bnpDMultiply; BigInteger.prototype.dAddOffset = bnpDAddOffset; BigInteger.prototype.multiplyLowerTo = bnpMultiplyLowerTo; BigInteger.prototype.multiplyUpperTo = bnpMultiplyUpperTo; BigInteger.prototype.modInt = bnpModInt; BigInteger.prototype.millerRabin = bnpMillerRabin; BigInteger.prototype.clone = bnClone; BigInteger.prototype.intValue = bnIntValue; BigInteger.prototype.byteValue = bnByteValue; BigInteger.prototype.shortValue = bnShortValue; BigInteger.prototype.signum = bnSigNum; BigInteger.prototype.toByteArray = bnToByteArray; BigInteger.prototype.equals = bnEquals; BigInteger.prototype.min = bnMin; BigInteger.prototype.max = bnMax; BigInteger.prototype.and = bnAnd; BigInteger.prototype.or = bnOr; BigInteger.prototype.xor = bnXor; BigInteger.prototype.andNot = bnAndNot; BigInteger.prototype.not = bnNot; BigInteger.prototype.shiftLeft = bnShiftLeft; BigInteger.prototype.shiftRight = bnShiftRight; BigInteger.prototype.getLowestSetBit = bnGetLowestSetBit; BigInteger.prototype.bitCount = bnBitCount; BigInteger.prototype.testBit = bnTestBit; BigInteger.prototype.setBit = bnSetBit; BigInteger.prototype.clearBit = bnClearBit; BigInteger.prototype.flipBit = bnFlipBit; BigInteger.prototype.add = bnAdd; BigInteger.prototype.subtract = bnSubtract; BigInteger.prototype.multiply = bnMultiply; BigInteger.prototype.divide = bnDivide; BigInteger.prototype.remainder = bnRemainder; BigInteger.prototype.divideAndRemainder = bnDivideAndRemainder; BigInteger.prototype.modPow = bnModPow; BigInteger.prototype.modInverse = bnModInverse; BigInteger.prototype.pow = bnPow; BigInteger.prototype.gcd = bnGCD; BigInteger.prototype.isProbablePrime = bnIsProbablePrime; BigInteger.prototype.square = bnSquare;",
					"/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/",
					" */",
					"function Arcfour() { this.i = 0; this.j = 0; this.S = new Array() } function ARC4init(d) { var c, a, b; for (c = 0; c < 256; ++c) { this.S[c] = c } a = 0; for (c = 0; c < 256; ++c) { a = (a + this.S[c] + d[c % d.length]) & 255; b = this.S[c]; this.S[c] = this.S[a]; this.S[a] = b } this.i = 0; this.j = 0 } function ARC4next() { var a; this.i = (this.i + 1) & 255; this.j = (this.j + this.S[this.i]) & 255; a = this.S[this.i]; this.S[this.i] = this.S[this.j]; this.S[this.j] = a; return this.S[(a + this.S[this.i]) & 255] } Arcfour.prototype.init = ARC4init; Arcfour.prototype.next = ARC4next; function prng_newstate() { return new Arcfour() } var rng_psize = 256;",
					"/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/",
					" */",
					"var rng_state; var rng_pool; var rng_pptr; function rng_seed_int(a) { rng_pool[rng_pptr++] ^= a & 255; rng_pool[rng_pptr++] ^= (a >> 8) & 255; rng_pool[rng_pptr++] ^= (a >> 16) & 255; rng_pool[rng_pptr++] ^= (a >> 24) & 255; if (rng_pptr >= rng_psize) { rng_pptr -= rng_psize } } function rng_seed_time() { rng_seed_int(new Date().getTime()) } if (rng_pool == null) { rng_pool = new Array(); rng_pptr = 0; var t; while (rng_pptr < rng_psize) { t = Math.floor(65536 * Math.random()); rng_pool[rng_pptr++] = t >>> 8; rng_pool[rng_pptr++] = t & 255 } rng_pptr = 0; rng_seed_time() } function rng_get_byte() { if (rng_state == null) { rng_seed_time(); rng_state = prng_newstate(); rng_state.init(rng_pool); for (rng_pptr = 0; rng_pptr < rng_pool.length; ++rng_pptr) { rng_pool[rng_pptr] = 0 } rng_pptr = 0 } return rng_state.next() } function rng_get_bytes(b) { var a; for (a = 0; a < b.length; ++a) { b[a] = rng_get_byte() } } function SecureRandom() { } SecureRandom.prototype.nextBytes = rng_get_bytes;",
					"/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/",
					" * Code licensed under the BSD License:",
					" * http://www-cs-students.stanford.edu/~tjw/jsbn/LICENSE",
					" */",
					"function parseBigInt(b, a) { return new BigInteger(b, a) } function linebrk(c, d) { var a = \"\"; var b = 0; while (b + d < c.length) { a += c.substring(b, b + d) + \"\\n\"; b += d } return a + c.substring(b, c.length) } function byte2Hex(a) { if (a < 16) { return \"0\" + a.toString(16) } else { return a.toString(16) } } function pkcs1pad2(e, h) { if (h < e.length + 11) { throw \"Message too long for RSA\"; return null } var g = new Array(); var d = e.length - 1; while (d >= 0 && h > 0) { var f = e.charCodeAt(d--); if (f < 128) { g[--h] = f } else { if ((f > 127) && (f < 2048)) { g[--h] = (f & 63) | 128; g[--h] = (f >> 6) | 192 } else { g[--h] = (f & 63) | 128; g[--h] = ((f >> 6) & 63) | 128; g[--h] = (f >> 12) | 224 } } } g[--h] = 0; var b = new SecureRandom(); var a = new Array(); while (h > 2) { a[0] = 0; while (a[0] == 0) { b.nextBytes(a) } g[--h] = a[0] } g[--h] = 2; g[--h] = 0; return new BigInteger(g) } function oaep_mgf1_arr(c, a, e) { var b = \"\", d = 0; while (b.length < a) { b += e(String.fromCharCode.apply(String, c.concat([(d & 4278190080) >> 24, (d & 16711680) >> 16, (d & 65280) >> 8, d & 255]))); d += 1 } return b } function oaep_pad(q, a, f, l) { var c = KJUR.crypto.MessageDigest; var o = KJUR.crypto.Util; var b = null; if (!f) { f = \"sha1\" } if (typeof f === \"string\") { b = c.getCanonicalAlgName(f); l = c.getHashLength(b); f = function (i) { return hextorstr(o.hashHex(rstrtohex(i), b)) } } if (q.length + 2 * l + 2 > a) { throw \"Message too long for RSA\" } var k = \"\", e; for (e = 0; e < a - q.length - 2 * l - 2; e += 1) { k += \"\\x00\" } var h = f(\"\") + k + \"\\x01\" + q; var g = new Array(l); new SecureRandom().nextBytes(g); var j = oaep_mgf1_arr(g, h.length, f); var p = []; for (e = 0; e < h.length; e += 1) { p[e] = h.charCodeAt(e) ^ j.charCodeAt(e) } var m = oaep_mgf1_arr(p, g.length, f); var d = [0]; for (e = 0; e < g.length; e += 1) { d[e + 1] = g[e] ^ m.charCodeAt(e) } return new BigInteger(d.concat(p)) } function RSAKey() { this.n = null; this.e = 0; this.d = null; this.p = null; this.q = null; this.dmp1 = null; this.dmq1 = null; this.coeff = null } function RSASetPublic(b, a) { this.isPublic = true; this.isPrivate = false; if (typeof b !== \"string\") { this.n = b; this.e = a } else { if (b != null && a != null && b.length > 0 && a.length > 0) { this.n = parseBigInt(b, 16); this.e = parseInt(a, 16) } else { throw \"Invalid RSA public key\" } } } function RSADoPublic(a) { return a.modPowInt(this.e, this.n) } function RSAEncrypt(d) { var a = pkcs1pad2(d, (this.n.bitLength() + 7) >> 3); if (a == null) { return null } var e = this.doPublic(a); if (e == null) { return null } var b = e.toString(16); if ((b.length & 1) == 0) { return b } else { return \"0\" + b } } function RSAEncryptOAEP(f, e, b) { var a = oaep_pad(f, (this.n.bitLength() + 7) >> 3, e, b); if (a == null) { return null } var g = this.doPublic(a); if (g == null) { return null } var d = g.toString(16); if ((d.length & 1) == 0) { return d } else { return \"0\" + d } } RSAKey.prototype.doPublic = RSADoPublic; RSAKey.prototype.setPublic = RSASetPublic; RSAKey.prototype.encrypt = RSAEncrypt; RSAKey.prototype.encryptOAEP = RSAEncryptOAEP; RSAKey.prototype.type = \"RSA\";",
					"/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/",
					" * Code licensed under the BSD License:",
					" * http://www-cs-students.stanford.edu/~tjw/jsbn/LICENSE",
					" */",
					"var KEYUTIL = function () { var d = function (p, r, q) { return k(CryptoJS.AES, p, r, q) }; var e = function (p, r, q) { return k(CryptoJS.TripleDES, p, r, q) }; var a = function (p, r, q) { return k(CryptoJS.DES, p, r, q) }; var k = function (s, x, u, q) { var r = CryptoJS.enc.Hex.parse(x); var w = CryptoJS.enc.Hex.parse(u); var p = CryptoJS.enc.Hex.parse(q); var t = {}; t.key = w; t.iv = p; t.ciphertext = r; var v = s.decrypt(t, w, { iv: p }); return CryptoJS.enc.Hex.stringify(v) }; var l = function (p, r, q) { return g(CryptoJS.AES, p, r, q) }; var o = function (p, r, q) { return g(CryptoJS.TripleDES, p, r, q) }; var f = function (p, r, q) { return g(CryptoJS.DES, p, r, q) }; var g = function (t, y, v, q) { var s = CryptoJS.enc.Hex.parse(y); var x = CryptoJS.enc.Hex.parse(v); var p = CryptoJS.enc.Hex.parse(q); var w = t.encrypt(s, x, { iv: p }); var r = CryptoJS.enc.Hex.parse(w.toString()); var u = CryptoJS.enc.Base64.stringify(r); return u }; var i = { \"AES-256-CBC\": { proc: d, eproc: l, keylen: 32, ivlen: 16 }, \"AES-192-CBC\": { proc: d, eproc: l, keylen: 24, ivlen: 16 }, \"AES-128-CBC\": { proc: d, eproc: l, keylen: 16, ivlen: 16 }, \"DES-EDE3-CBC\": { proc: e, eproc: o, keylen: 24, ivlen: 8 }, \"DES-CBC\": { proc: a, eproc: f, keylen: 8, ivlen: 8 } }; var c = function (p) { return i[p][\"proc\"] }; var m = function (p) { var r = CryptoJS.lib.WordArray.random(p); var q = CryptoJS.enc.Hex.stringify(r); return q }; var n = function (v) { var w = {}; var q = v.match(new RegExp(\"DEK-Info: ([^,]+),([0-9A-Fa-f]+)\", \"m\")); if (q) { w.cipher = q[1]; w.ivsalt = q[2] } var p = v.match(new RegExp(\"-----BEGIN ([A-Z]+) PRIVATE KEY-----\")); if (p) { w.type = p[1] } var u = -1; var x = 0; if (v.indexOf(\"\\r\\n\\r\\n\") != -1) { u = v.indexOf(\"\\r\\n\\r\\n\"); x = 2 } if (v.indexOf(\"\\n\\n\") != -1) { u = v.indexOf(\"\\n\\n\"); x = 1 } var t = v.indexOf(\"-----END\"); if (u != -1 && t != -1) { var r = v.substring(u + x * 2, t - x); r = r.replace(/\\s+/g, \"\"); w.data = r } return w }; var j = function (q, y, p) { var v = p.substring(0, 16); var t = CryptoJS.enc.Hex.parse(v); var r = CryptoJS.enc.Utf8.parse(y); var u = i[q][\"keylen\"] + i[q][\"ivlen\"]; var x = \"\"; var w = null; for (; ;) { var s = CryptoJS.algo.MD5.create(); if (w != null) { s.update(w) } s.update(r); s.update(t); w = s.finalize(); x = x + CryptoJS.enc.Hex.stringify(w); if (x.length >= u * 2) { break } } var z = {}; z.keyhex = x.substr(0, i[q][\"keylen\"] * 2); z.ivhex = x.substr(i[q][\"keylen\"] * 2, i[q][\"ivlen\"] * 2); return z }; var b = function (p, v, r, w) { var s = CryptoJS.enc.Base64.parse(p); var q = CryptoJS.enc.Hex.stringify(s); var u = i[v][\"proc\"]; var t = u(q, r, w); return t }; var h = function (p, s, q, u) { var r = i[s][\"eproc\"]; var t = r(p, q, u); return t }; return { version: \"1.0.0\", parsePKCS5PEM: function (p) { return n(p) }, getKeyAndUnusedIvByPasscodeAndIvsalt: function (q, p, r) { return j(q, p, r) }, decryptKeyB64: function (p, r, q, s) { return b(p, r, q, s) }, getDecryptedKeyHex: function (y, x) { var q = n(y); var t = q.type; var r = q.cipher; var p = q.ivsalt; var s = q.data; var w = j(r, x, p); var v = w.keyhex; var u = b(s, r, v, p); return u }, getEncryptedPKCS5PEMFromPrvKeyHex: function (x, s, A, t, r) { var p = \"\"; if (typeof t == \"undefined\" || t == null) { t = \"AES-256-CBC\" } if (typeof i[t] == \"undefined\") { throw \"KEYUTIL unsupported algorithm: \" + t } if (typeof r == \"undefined\" || r == null) { var v = i[t][\"ivlen\"]; var u = m(v); r = u.toUpperCase() } var z = j(t, A, r); var y = z.keyhex; var w = h(s, t, y, r); var q = w.replace(/(.{64})/g, \"$1\\r\\n\"); var p = \"-----BEGIN \" + x + \" PRIVATE KEY-----\\r\\n\"; p += \"Proc-Type: 4,ENCRYPTED\\r\\n\"; p += \"DEK-Info: \" + t + \",\" + r + \"\\r\\n\"; p += \"\\r\\n\"; p += q; p += \"\\r\\n-----END \" + x + \" PRIVATE KEY-----\\r\\n\"; return p }, parseHexOfEncryptedPKCS8: function (y) { var B = ASN1HEX; var z = B.getChildIdx; var w = B.getV; var t = {}; var r = z(y, 0); if (r.length != 2) { throw \"malformed format: SEQUENCE(0).items != 2: \" + r.length } t.ciphertext = w(y, r[1]); var A = z(y, r[0]); if (A.length != 2) { throw \"malformed format: SEQUENCE(0.0).items != 2: \" + A.length } if (w(y, A[0]) != \"2a864886f70d01050d\") { throw \"this only supports pkcs5PBES2\" } var p = z(y, A[1]); if (A.length != 2) { throw \"malformed format: SEQUENCE(0.0.1).items != 2: \" + p.length } var q = z(y, p[1]); if (q.length != 2) { throw \"malformed format: SEQUENCE(0.0.1.1).items != 2: \" + q.length } if (w(y, q[0]) != \"2a864886f70d0307\") { throw \"this only supports TripleDES\" } t.encryptionSchemeAlg = \"TripleDES\"; t.encryptionSchemeIV = w(y, q[1]); var s = z(y, p[0]); if (s.length != 2) { throw \"malformed format: SEQUENCE(0.0.1.0).items != 2: \" + s.length } if (w(y, s[0]) != \"2a864886f70d01050c\") { throw \"this only supports pkcs5PBKDF2\" } var x = z(y, s[1]); if (x.length < 2) { throw \"malformed format: SEQUENCE(0.0.1.0.1).items < 2: \" + x.length } t.pbkdf2Salt = w(y, x[0]); var u = w(y, x[1]); try { t.pbkdf2Iter = parseInt(u, 16) } catch (v) { throw \"malformed format pbkdf2Iter: \" + u } return t }, getPBKDF2KeyHexFromParam: function (u, p) { var t = CryptoJS.enc.Hex.parse(u.pbkdf2Salt); var q = u.pbkdf2Iter; var s = CryptoJS.PBKDF2(p, t, { keySize: 192 / 32, iterations: q }); var r = CryptoJS.enc.Hex.stringify(s); return r }, _getPlainPKCS8HexFromEncryptedPKCS8PEM: function (x, y) { var r = pemtohex(x, \"ENCRYPTED PRIVATE KEY\"); var p = this.parseHexOfEncryptedPKCS8(r); var u = KEYUTIL.getPBKDF2KeyHexFromParam(p, y); var v = {}; v.ciphertext = CryptoJS.enc.Hex.parse(p.ciphertext); var t = CryptoJS.enc.Hex.parse(u); var s = CryptoJS.enc.Hex.parse(p.encryptionSchemeIV); var w = CryptoJS.TripleDES.decrypt(v, t, { iv: s }); var q = CryptoJS.enc.Hex.stringify(w); return q }, getKeyFromEncryptedPKCS8PEM: function (s, q) { var p = this._getPlainPKCS8HexFromEncryptedPKCS8PEM(s, q); var r = this.getKeyFromPlainPrivatePKCS8Hex(p); return r }, parsePlainPrivatePKCS8Hex: function (s) { var v = ASN1HEX; var u = v.getChildIdx; var t = v.getV; var q = {}; q.algparam = null; if (s.substr(0, 2) != \"30\") { throw \"malformed plain PKCS8 private key(code:001)\" } var r = u(s, 0); if (r.length != 3) { throw \"malformed plain PKCS8 private key(code:002)\" } if (s.substr(r[1], 2) != \"30\") { throw \"malformed PKCS8 private key(code:003)\" } var p = u(s, r[1]); if (p.length != 2) { throw \"malformed PKCS8 private key(code:004)\" } if (s.substr(p[0], 2) != \"06\") { throw \"malformed PKCS8 private key(code:005)\" } q.algoid = t(s, p[0]); if (s.substr(p[1], 2) == \"06\") { q.algparam = t(s, p[1]) } if (s.substr(r[2], 2) != \"04\") { throw \"malformed PKCS8 private key(code:006)\" } q.keyidx = v.getVidx(s, r[2]); return q }, getKeyFromPlainPrivatePKCS8PEM: function (q) { var p = pemtohex(q, \"PRIVATE KEY\"); var r = this.getKeyFromPlainPrivatePKCS8Hex(p); return r }, getKeyFromPlainPrivatePKCS8Hex: function (p) { var q = this.parsePlainPrivatePKCS8Hex(p); var r; if (q.algoid == \"2a864886f70d010101\") { r = new RSAKey() } else { if (q.algoid == \"2a8648ce380401\") { r = new KJUR.crypto.DSA() } else { if (q.algoid == \"2a8648ce3d0201\") { r = new KJUR.crypto.ECDSA() } else { throw \"unsupported private key algorithm\" } } } r.readPKCS8PrvKeyHex(p); return r }, _getKeyFromPublicPKCS8Hex: function (q) { var p; var r = ASN1HEX.getVbyList(q, 0, [0, 0], \"06\"); if (r === \"2a864886f70d010101\") { p = new RSAKey() } else { if (r === \"2a8648ce380401\") { p = new KJUR.crypto.DSA() } else { if (r === \"2a8648ce3d0201\") { p = new KJUR.crypto.ECDSA() } else { throw \"unsupported PKCS#8 public key hex\" } } } p.readPKCS8PubKeyHex(q); return p }, parsePublicRawRSAKeyHex: function (r) { var u = ASN1HEX; var t = u.getChildIdx; var s = u.getV; var p = {}; if (r.substr(0, 2) != \"30\") { throw \"malformed RSA key(code:001)\" } var q = t(r, 0); if (q.length != 2) { throw \"malformed RSA key(code:002)\" } if (r.substr(q[0], 2) != \"02\") { throw \"malformed RSA key(code:003)\" } p.n = s(r, q[0]); if (r.substr(q[1], 2) != \"02\") { throw \"malformed RSA key(code:004)\" } p.e = s(r, q[1]); return p }, parsePublicPKCS8Hex: function (t) { var v = ASN1HEX; var u = v.getChildIdx; var s = v.getV; var q = {}; q.algparam = null; var r = u(t, 0); if (r.length != 2) { throw \"outer DERSequence shall have 2 elements: \" + r.length } var w = r[0]; if (t.substr(w, 2) != \"30\") { throw \"malformed PKCS8 public key(code:001)\" } var p = u(t, w); if (p.length != 2) { throw \"malformed PKCS8 public key(code:002)\" } if (t.substr(p[0], 2) != \"06\") { throw \"malformed PKCS8 public key(code:003)\" } q.algoid = s(t, p[0]); if (t.substr(p[1], 2) == \"06\") { q.algparam = s(t, p[1]) } else { if (t.substr(p[1], 2) == \"30\") { q.algparam = {}; q.algparam.p = v.getVbyList(t, p[1], [0], \"02\"); q.algparam.q = v.getVbyList(t, p[1], [1], \"02\"); q.algparam.g = v.getVbyList(t, p[1], [2], \"02\") } } if (t.substr(r[1], 2) != \"03\") { throw \"malformed PKCS8 public key(code:004)\" } q.key = s(t, r[1]).substr(2); return q }, } }(); KEYUTIL.getKey = function (l, k, n) { var G = ASN1HEX, L = G.getChildIdx, v = G.getV, d = G.getVbyList, c = KJUR.crypto, i = c.ECDSA, C = c.DSA, w = RSAKey, M = pemtohex, F = KEYUTIL; if (typeof w != \"undefined\" && l instanceof w) { return l } if (typeof i != \"undefined\" && l instanceof i) { return l } if (typeof C != \"undefined\" && l instanceof C) { return l } if (l.curve !== undefined && l.xy !== undefined && l.d === undefined) { return new i({ pub: l.xy, curve: l.curve }) } if (l.curve !== undefined && l.d !== undefined) { return new i({ prv: l.d, curve: l.curve }) } if (l.kty === undefined && l.n !== undefined && l.e !== undefined && l.d === undefined) { var P = new w(); P.setPublic(l.n, l.e); return P } if (l.kty === undefined && l.n !== undefined && l.e !== undefined && l.d !== undefined && l.p !== undefined && l.q !== undefined && l.dp !== undefined && l.dq !== undefined && l.co !== undefined && l.qi === undefined) { var P = new w(); P.setPrivateEx(l.n, l.e, l.d, l.p, l.q, l.dp, l.dq, l.co); return P } if (l.kty === undefined && l.n !== undefined && l.e !== undefined && l.d !== undefined && l.p === undefined) { var P = new w(); P.setPrivate(l.n, l.e, l.d); return P } if (l.p !== undefined && l.q !== undefined && l.g !== undefined && l.y !== undefined && l.x === undefined) { var P = new C(); P.setPublic(l.p, l.q, l.g, l.y); return P } if (l.p !== undefined && l.q !== undefined && l.g !== undefined && l.y !== undefined && l.x !== undefined) { var P = new C(); P.setPrivate(l.p, l.q, l.g, l.y, l.x); return P } if (l.kty === \"RSA\" && l.n !== undefined && l.e !== undefined && l.d === undefined) { var P = new w(); P.setPublic(b64utohex(l.n), b64utohex(l.e)); return P } if (l.kty === \"RSA\" && l.n !== undefined && l.e !== undefined && l.d !== undefined && l.p !== undefined && l.q !== undefined && l.dp !== undefined && l.dq !== undefined && l.qi !== undefined) { var P = new w(); P.setPrivateEx(b64utohex(l.n), b64utohex(l.e), b64utohex(l.d), b64utohex(l.p), b64utohex(l.q), b64utohex(l.dp), b64utohex(l.dq), b64utohex(l.qi)); return P } if (l.kty === \"RSA\" && l.n !== undefined && l.e !== undefined && l.d !== undefined) { var P = new w(); P.setPrivate(b64utohex(l.n), b64utohex(l.e), b64utohex(l.d)); return P } if (l.kty === \"EC\" && l.crv !== undefined && l.x !== undefined && l.y !== undefined && l.d === undefined) { var j = new i({ curve: l.crv }); var t = j.ecparams.keylen / 4; var B = (\"0000000000\" + b64utohex(l.x)).slice(-t); var z = (\"0000000000\" + b64utohex(l.y)).slice(-t); var u = \"04\" + B + z; j.setPublicKeyHex(u); return j } if (l.kty === \"EC\" && l.crv !== undefined && l.x !== undefined && l.y !== undefined && l.d !== undefined) { var j = new i({ curve: l.crv }); var t = j.ecparams.keylen / 4; var B = (\"0000000000\" + b64utohex(l.x)).slice(-t); var z = (\"0000000000\" + b64utohex(l.y)).slice(-t); var u = \"04\" + B + z; var b = (\"0000000000\" + b64utohex(l.d)).slice(-t); j.setPublicKeyHex(u); j.setPrivateKeyHex(b); return j } if (n === \"pkcs5prv\") { var J = l, G = ASN1HEX, N, P; N = L(J, 0); if (N.length === 9) { P = new w(); P.readPKCS5PrvKeyHex(J) } else { if (N.length === 6) { P = new C(); P.readPKCS5PrvKeyHex(J) } else { if (N.length > 2 && J.substr(N[1], 2) === \"04\") { P = new i(); P.readPKCS5PrvKeyHex(J) } else { throw \"unsupported PKCS#1/5 hexadecimal key\" } } } return P } if (n === \"pkcs8prv\") { var P = F.getKeyFromPlainPrivatePKCS8Hex(l); return P } if (n === \"pkcs8pub\") { return F._getKeyFromPublicPKCS8Hex(l) } if (n === \"x509pub\") { return X509.getPublicKeyFromCertHex(l) } if (l.indexOf(\"-END CERTIFICATE-\", 0) != -1 || l.indexOf(\"-END X509 CERTIFICATE-\", 0) != -1 || l.indexOf(\"-END TRUSTED CERTIFICATE-\", 0) != -1) { return X509.getPublicKeyFromCertPEM(l) } if (l.indexOf(\"-END PUBLIC KEY-\") != -1) { var O = pemtohex(l, \"PUBLIC KEY\"); return F._getKeyFromPublicPKCS8Hex(O) } if (l.indexOf(\"-END RSA PRIVATE KEY-\") != -1 && l.indexOf(\"4,ENCRYPTED\") == -1) { var m = M(l, \"RSA PRIVATE KEY\"); return F.getKey(m, null, \"pkcs5prv\") } if (l.indexOf(\"-END DSA PRIVATE KEY-\") != -1 && l.indexOf(\"4,ENCRYPTED\") == -1) { var I = M(l, \"DSA PRIVATE KEY\"); var E = d(I, 0, [1], \"02\"); var D = d(I, 0, [2], \"02\"); var K = d(I, 0, [3], \"02\"); var r = d(I, 0, [4], \"02\"); var s = d(I, 0, [5], \"02\"); var P = new C(); P.setPrivate(new BigInteger(E, 16), new BigInteger(D, 16), new BigInteger(K, 16), new BigInteger(r, 16), new BigInteger(s, 16)); return P } if (l.indexOf(\"-END PRIVATE KEY-\") != -1) { return F.getKeyFromPlainPrivatePKCS8PEM(l) } if (l.indexOf(\"-END RSA PRIVATE KEY-\") != -1 && l.indexOf(\"4,ENCRYPTED\") != -1) { var o = F.getDecryptedKeyHex(l, k); var H = new RSAKey(); H.readPKCS5PrvKeyHex(o); return H } if (l.indexOf(\"-END EC PRIVATE KEY-\") != -1 && l.indexOf(\"4,ENCRYPTED\") != -1) { var I = F.getDecryptedKeyHex(l, k); var P = d(I, 0, [1], \"04\"); var f = d(I, 0, [2, 0], \"06\"); var A = d(I, 0, [3, 0], \"03\").substr(2); var e = \"\"; if (KJUR.crypto.OID.oidhex2name[f] !== undefined) { e = KJUR.crypto.OID.oidhex2name[f] } else { throw \"undefined OID(hex) in KJUR.crypto.OID: \" + f } var j = new i({ curve: e }); j.setPublicKeyHex(A); j.setPrivateKeyHex(P); j.isPublic = false; return j } if (l.indexOf(\"-END DSA PRIVATE KEY-\") != -1 && l.indexOf(\"4,ENCRYPTED\") != -1) { var I = F.getDecryptedKeyHex(l, k); var E = d(I, 0, [1], \"02\"); var D = d(I, 0, [2], \"02\"); var K = d(I, 0, [3], \"02\"); var r = d(I, 0, [4], \"02\"); var s = d(I, 0, [5], \"02\"); var P = new C(); P.setPrivate(new BigInteger(E, 16), new BigInteger(D, 16), new BigInteger(K, 16), new BigInteger(r, 16), new BigInteger(s, 16)); return P } if (l.indexOf(\"-END ENCRYPTED PRIVATE KEY-\") != -1) { return F.getKeyFromEncryptedPKCS8PEM(l, k) } throw \"not supported argument\" }; KEYUTIL.generateKeypair = function (a, c) { if (a == \"RSA\") { var b = c; var h = new RSAKey(); h.generate(b, \"10001\"); h.isPrivate = true; h.isPublic = true; var f = new RSAKey(); var e = h.n.toString(16); var i = h.e.toString(16); f.setPublic(e, i); f.isPrivate = false; f.isPublic = true; var k = {}; k.prvKeyObj = h; k.pubKeyObj = f; return k } else { if (a == \"EC\") { var d = c; var g = new KJUR.crypto.ECDSA({ curve: d }); var j = g.generateKeyPairHex(); var h = new KJUR.crypto.ECDSA({ curve: d }); h.setPublicKeyHex(j.ecpubhex); h.setPrivateKeyHex(j.ecprvhex); h.isPrivate = true; h.isPublic = false; var f = new KJUR.crypto.ECDSA({ curve: d }); f.setPublicKeyHex(j.ecpubhex); f.isPrivate = false; f.isPublic = true; var k = {}; k.prvKeyObj = h; k.pubKeyObj = f; return k } else { throw \"unknown algorithm: \" + a } } }; KEYUTIL.getPEM = function (b, D, y, m, q, j) { var F = KJUR, k = F.asn1, z = k.DERObjectIdentifier, f = k.DERInteger, l = k.ASN1Util.newObject, a = k.x509, C = a.SubjectPublicKeyInfo, e = F.crypto, u = e.DSA, r = e.ECDSA, n = RSAKey; function A(s) { var G = l({ seq: [{ \"int\": 0 }, { \"int\": { bigint: s.n } }, { \"int\": s.e }, { \"int\": { bigint: s.d } }, { \"int\": { bigint: s.p } }, { \"int\": { bigint: s.q } }, { \"int\": { bigint: s.dmp1 } }, { \"int\": { bigint: s.dmq1 } }, { \"int\": { bigint: s.coeff } }] }); return G } function B(G) { var s = l({ seq: [{ \"int\": 1 }, { octstr: { hex: G.prvKeyHex } }, { tag: [\"a0\", true, { oid: { name: G.curveName } }] }, { tag: [\"a1\", true, { bitstr: { hex: \"00\" + G.pubKeyHex } }] }] }); return s } function x(s) { var G = l({ seq: [{ \"int\": 0 }, { \"int\": { bigint: s.p } }, { \"int\": { bigint: s.q } }, { \"int\": { bigint: s.g } }, { \"int\": { bigint: s.y } }, { \"int\": { bigint: s.x } }] }); return G } if (((n !== undefined && b instanceof n) || (u !== undefined && b instanceof u) || (r !== undefined && b instanceof r)) && b.isPublic == true && (D === undefined || D == \"PKCS8PUB\")) { var E = new C(b); var w = E.getEncodedHex(); return hextopem(w, \"PUBLIC KEY\") } if (D == \"PKCS1PRV\" && n !== undefined && b instanceof n && (y === undefined || y == null) && b.isPrivate == true) { var E = A(b); var w = E.getEncodedHex(); return hextopem(w, \"RSA PRIVATE KEY\") } if (D == \"PKCS1PRV\" && r !== undefined && b instanceof r && (y === undefined || y == null) && b.isPrivate == true) { var i = new z({ name: b.curveName }); var v = i.getEncodedHex(); var h = B(b); var t = h.getEncodedHex(); var p = \"\"; p += hextopem(v, \"EC PARAMETERS\"); p += hextopem(t, \"EC PRIVATE KEY\"); return p } if (D == \"PKCS1PRV\" && u !== undefined && b instanceof u && (y === undefined || y == null) && b.isPrivate == true) { var E = x(b); var w = E.getEncodedHex(); return hextopem(w, \"DSA PRIVATE KEY\") } if (D == \"PKCS5PRV\" && n !== undefined && b instanceof n && (y !== undefined && y != null) && b.isPrivate == true) { var E = A(b); var w = E.getEncodedHex(); if (m === undefined) { m = \"DES-EDE3-CBC\" } return this.getEncryptedPKCS5PEMFromPrvKeyHex(\"RSA\", w, y, m, j) } if (D == \"PKCS5PRV\" && r !== undefined && b instanceof r && (y !== undefined && y != null) && b.isPrivate == true) { var E = B(b); var w = E.getEncodedHex(); if (m === undefined) { m = \"DES-EDE3-CBC\" } return this.getEncryptedPKCS5PEMFromPrvKeyHex(\"EC\", w, y, m, j) } if (D == \"PKCS5PRV\" && u !== undefined && b instanceof u && (y !== undefined && y != null) && b.isPrivate == true) { var E = x(b); var w = E.getEncodedHex(); if (m === undefined) { m = \"DES-EDE3-CBC\" } return this.getEncryptedPKCS5PEMFromPrvKeyHex(\"DSA\", w, y, m, j) } var o = function (G, s) { var I = c(G, s); var H = new l({ seq: [{ seq: [{ oid: { name: \"pkcs5PBES2\" } }, { seq: [{ seq: [{ oid: { name: \"pkcs5PBKDF2\" } }, { seq: [{ octstr: { hex: I.pbkdf2Salt } }, { \"int\": I.pbkdf2Iter }] }] }, { seq: [{ oid: { name: \"des-EDE3-CBC\" } }, { octstr: { hex: I.encryptionSchemeIV } }] }] }] }, { octstr: { hex: I.ciphertext } }] }); return H.getEncodedHex() }; var c = function (N, O) { var H = 100; var M = CryptoJS.lib.WordArray.random(8); var L = \"DES-EDE3-CBC\"; var s = CryptoJS.lib.WordArray.random(8); var I = CryptoJS.PBKDF2(O, M, { keySize: 192 / 32, iterations: H }); var J = CryptoJS.enc.Hex.parse(N); var K = CryptoJS.TripleDES.encrypt(J, I, { iv: s }) + \"\"; var G = {}; G.ciphertext = K; G.pbkdf2Salt = CryptoJS.enc.Hex.stringify(M); G.pbkdf2Iter = H; G.encryptionSchemeAlg = L; G.encryptionSchemeIV = CryptoJS.enc.Hex.stringify(s); return G }; if (D == \"PKCS8PRV\" && n != undefined && b instanceof n && b.isPrivate == true) { var g = A(b); var d = g.getEncodedHex(); var E = l({ seq: [{ \"int\": 0 }, { seq: [{ oid: { name: \"rsaEncryption\" } }, { \"null\": true }] }, { octstr: { hex: d } }] }); var w = E.getEncodedHex(); if (y === undefined || y == null) { return hextopem(w, \"PRIVATE KEY\") } else { var t = o(w, y); return hextopem(t, \"ENCRYPTED PRIVATE KEY\") } } if (D == \"PKCS8PRV\" && r !== undefined && b instanceof r && b.isPrivate == true) { var g = new l({ seq: [{ \"int\": 1 }, { octstr: { hex: b.prvKeyHex } }, { tag: [\"a1\", true, { bitstr: { hex: \"00\" + b.pubKeyHex } }] }] }); var d = g.getEncodedHex(); var E = l({ seq: [{ \"int\": 0 }, { seq: [{ oid: { name: \"ecPublicKey\" } }, { oid: { name: b.curveName } }] }, { octstr: { hex: d } }] }); var w = E.getEncodedHex(); if (y === undefined || y == null) { return hextopem(w, \"PRIVATE KEY\") } else { var t = o(w, y); return hextopem(t, \"ENCRYPTED PRIVATE KEY\") } } if (D == \"PKCS8PRV\" && u !== undefined && b instanceof u && b.isPrivate == true) { var g = new f({ bigint: b.x }); var d = g.getEncodedHex(); var E = l({ seq: [{ \"int\": 0 }, { seq: [{ oid: { name: \"dsa\" } }, { seq: [{ \"int\": { bigint: b.p } }, { \"int\": { bigint: b.q } }, { \"int\": { bigint: b.g } }] }] }, { octstr: { hex: d } }] }); var w = E.getEncodedHex(); if (y === undefined || y == null) { return hextopem(w, \"PRIVATE KEY\") } else { var t = o(w, y); return hextopem(t, \"ENCRYPTED PRIVATE KEY\") } } throw \"unsupported object nor format\" }; KEYUTIL.getKeyFromCSRPEM = function (b) { var a = pemtohex(b, \"CERTIFICATE REQUEST\"); var c = KEYUTIL.getKeyFromCSRHex(a); return c }; KEYUTIL.getKeyFromCSRHex = function (a) { var c = KEYUTIL.parseCSRHex(a); var b = KEYUTIL.getKey(c.p8pubkeyhex, null, \"pkcs8pub\"); return b }; KEYUTIL.parseCSRHex = function (d) { var i = ASN1HEX; var f = i.getChildIdx; var c = i.getTLV; var b = {}; var g = d; if (g.substr(0, 2) != \"30\") { throw \"malformed CSR(code:001)\" } var e = f(g, 0); if (e.length < 1) { throw \"malformed CSR(code:002)\" } if (g.substr(e[0], 2) != \"30\") { throw \"malformed CSR(code:003)\" } var a = f(g, e[0]); if (a.length < 3) { throw \"malformed CSR(code:004)\" } b.p8pubkeyhex = c(g, a[2]); return b }; KEYUTIL.getJWKFromKey = function (d) { var b = {}; if (d instanceof RSAKey && d.isPrivate) { b.kty = \"RSA\"; b.n = hextob64u(d.n.toString(16)); b.e = hextob64u(d.e.toString(16)); b.d = hextob64u(d.d.toString(16)); b.p = hextob64u(d.p.toString(16)); b.q = hextob64u(d.q.toString(16)); b.dp = hextob64u(d.dmp1.toString(16)); b.dq = hextob64u(d.dmq1.toString(16)); b.qi = hextob64u(d.coeff.toString(16)); return b } else { if (d instanceof RSAKey && d.isPublic) { b.kty = \"RSA\"; b.n = hextob64u(d.n.toString(16)); b.e = hextob64u(d.e.toString(16)); return b } else { if (d instanceof KJUR.crypto.ECDSA && d.isPrivate) { var a = d.getShortNISTPCurveName(); if (a !== \"P-256\" && a !== \"P-384\") { throw \"unsupported curve name for JWT: \" + a } var c = d.getPublicKeyXYHex(); b.kty = \"EC\"; b.crv = a; b.x = hextob64u(c.x); b.y = hextob64u(c.y); b.d = hextob64u(d.prvKeyHex); return b } else { if (d instanceof KJUR.crypto.ECDSA && d.isPublic) { var a = d.getShortNISTPCurveName(); if (a !== \"P-256\" && a !== \"P-384\") { throw \"unsupported curve name for JWT: \" + a } var c = d.getPublicKeyXYHex(); b.kty = \"EC\"; b.crv = a; b.x = hextob64u(c.x); b.y = hextob64u(c.y); return b } } } } throw \"not supported key object\" };",
					"function pkcs1unpad2(g, j) { var a = g.toByteArray(); var f = 0; while (f < a.length && a[f] == 0) { ++f } if (a.length - f != j - 1 || a[f] != 2) { return null } ++f; while (a[f] != 0) { if (++f >= a.length) { return null } } var e = \"\"; while (++f < a.length) { var h = a[f] & 255; if (h < 128) { e += String.fromCharCode(h) } else { if ((h > 191) && (h < 224)) { e += String.fromCharCode(((h & 31) << 6) | (a[f + 1] & 63)); ++f } else { e += String.fromCharCode(((h & 15) << 12) | ((a[f + 1] & 63) << 6) | (a[f + 2] & 63)); f += 2 } } } return e } function oaep_mgf1_str(c, a, e) { var b = \"\", d = 0; while (b.length < a) { b += e(c + String.fromCharCode.apply(String, [(d & 4278190080) >> 24, (d & 16711680) >> 16, (d & 65280) >> 8, d & 255])); d += 1 } return b } function oaep_unpad(o, b, g, p) { var e = KJUR.crypto.MessageDigest; var r = KJUR.crypto.Util; var c = null; if (!g) { g = \"sha1\" } if (typeof g === \"string\") { c = e.getCanonicalAlgName(g); p = e.getHashLength(c); g = function (d) { return hextorstr(r.hashHex(rstrtohex(d), c)) } } o = o.toByteArray(); var h; for (h = 0; h < o.length; h += 1) { o[h] &= 255 } while (o.length < b) { o.unshift(0) } o = String.fromCharCode.apply(String, o); if (o.length < 2 * p + 2) { throw \"Cipher too short\" } var f = o.substr(1, p); var s = o.substr(p + 1); var q = oaep_mgf1_str(s, p, g); var k = [], h; for (h = 0; h < f.length; h += 1) { k[h] = f.charCodeAt(h) ^ q.charCodeAt(h) } var l = oaep_mgf1_str(String.fromCharCode.apply(String, k), o.length - p, g); var j = []; for (h = 0; h < s.length; h += 1) { j[h] = s.charCodeAt(h) ^ l.charCodeAt(h) } j = String.fromCharCode.apply(String, j); if (j.substr(0, p) !== g(\"\")) { throw \"Hash mismatch\" } j = j.substr(p); var a = j.indexOf(\"\\x01\"); var m = (a != -1) ? j.substr(0, a).lastIndexOf(\"\\x00\") : -1; if (m + 1 != a) { throw \"Malformed data\" } return j.substr(a + 1) } function RSASetPrivate(c, a, b) { this.isPrivate = true; if (typeof c !== \"string\") { this.n = c; this.e = a; this.d = b } else { if (c != null && a != null && c.length > 0 && a.length > 0) { this.n = parseBigInt(c, 16); this.e = parseInt(a, 16); this.d = parseBigInt(b, 16) } else { throw \"Invalid RSA private key\" } } } function RSASetPrivateEx(g, d, e, c, b, a, h, f) { this.isPrivate = true; this.isPublic = false; if (g == null) { throw \"RSASetPrivateEx N == null\" } if (d == null) { throw \"RSASetPrivateEx E == null\" } if (g.length == 0) { throw \"RSASetPrivateEx N.length == 0\" } if (d.length == 0) { throw \"RSASetPrivateEx E.length == 0\" } if (g != null && d != null && g.length > 0 && d.length > 0) { this.n = parseBigInt(g, 16); this.e = parseInt(d, 16); this.d = parseBigInt(e, 16); this.p = parseBigInt(c, 16); this.q = parseBigInt(b, 16); this.dmp1 = parseBigInt(a, 16); this.dmq1 = parseBigInt(h, 16); this.coeff = parseBigInt(f, 16) } else { throw \"Invalid RSA private key in RSASetPrivateEx\" } } function RSAGenerate(b, i) { var a = new SecureRandom(); var f = b >> 1; this.e = parseInt(i, 16); var c = new BigInteger(i, 16); for (; ;) { for (; ;) { this.p = new BigInteger(b - f, 1, a); if (this.p.subtract(BigInteger.ONE).gcd(c).compareTo(BigInteger.ONE) == 0 && this.p.isProbablePrime(10)) { break } } for (; ;) { this.q = new BigInteger(f, 1, a); if (this.q.subtract(BigInteger.ONE).gcd(c).compareTo(BigInteger.ONE) == 0 && this.q.isProbablePrime(10)) { break } } if (this.p.compareTo(this.q) <= 0) { var h = this.p; this.p = this.q; this.q = h } var g = this.p.subtract(BigInteger.ONE); var d = this.q.subtract(BigInteger.ONE); var e = g.multiply(d); if (e.gcd(c).compareTo(BigInteger.ONE) == 0) { this.n = this.p.multiply(this.q); this.d = c.modInverse(e); this.dmp1 = this.d.mod(g); this.dmq1 = this.d.mod(d); this.coeff = this.q.modInverse(this.p); break } } this.isPrivate = true } function RSADoPrivate(a) { if (this.p == null || this.q == null) { return a.modPow(this.d, this.n) } var c = a.mod(this.p).modPow(this.dmp1, this.p); var b = a.mod(this.q).modPow(this.dmq1, this.q); while (c.compareTo(b) < 0) { c = c.add(this.p) } return c.subtract(b).multiply(this.coeff).mod(this.p).multiply(this.q).add(b) } function RSADecrypt(b) { var d = parseBigInt(b, 16); var a = this.doPrivate(d); if (a == null) { return null } return pkcs1unpad2(a, (this.n.bitLength() + 7) >> 3) } function RSADecryptOAEP(e, d, b) { var f = parseBigInt(e, 16); var a = this.doPrivate(f); if (a == null) { return null } return oaep_unpad(a, (this.n.bitLength() + 7) >> 3, d, b) } RSAKey.prototype.doPrivate = RSADoPrivate; RSAKey.prototype.setPrivate = RSASetPrivate; RSAKey.prototype.setPrivateEx = RSASetPrivateEx; RSAKey.prototype.generate = RSAGenerate; RSAKey.prototype.decrypt = RSADecrypt; RSAKey.prototype.decryptOAEP = RSADecryptOAEP;",
					"if (typeof KJUR == \"undefined\" || !KJUR) { KJUR = {} } if (typeof KJUR.asn1 == \"undefined\" || !KJUR.asn1) { KJUR.asn1 = {} } KJUR.asn1.ASN1Util = new function () { this.integerToByteHex = function (a) { var b = a.toString(16); if ((b.length % 2) == 1) { b = \"0\" + b } return b }; this.bigIntToMinTwosComplementsHex = function (j) { var f = j.toString(16); if (f.substr(0, 1) != \"-\") { if (f.length % 2 == 1) { f = \"0\" + f } else { if (!f.match(/^[0-7]/)) { f = \"00\" + f } } } else { var a = f.substr(1); var e = a.length; if (e % 2 == 1) { e += 1 } else { if (!f.match(/^[0-7]/)) { e += 2 } } var g = \"\"; for (var d = 0; d < e; d++) { g += \"f\" } var c = new BigInteger(g, 16); var b = c.xor(j).add(BigInteger.ONE); f = b.toString(16).replace(/^-/, \"\") } return f }; this.getPEMStringFromHex = function (a, b) { return hextopem(a, b) }; this.newObject = function (k) { var D = KJUR, n = D.asn1, z = n.DERBoolean, e = n.DERInteger, s = n.DERBitString, h = n.DEROctetString, v = n.DERNull, w = n.DERObjectIdentifier, l = n.DEREnumerated, g = n.DERUTF8String, f = n.DERNumericString, y = n.DERPrintableString, u = n.DERTeletexString, p = n.DERIA5String, C = n.DERUTCTime, j = n.DERGeneralizedTime, m = n.DERSequence, c = n.DERSet, r = n.DERTaggedObject, o = n.ASN1Util.newObject; var t = Object.keys(k); if (t.length != 1) { throw \"key of param shall be only one.\" } var F = t[0]; if (\":bool:int:bitstr:octstr:null:oid:enum:utf8str:numstr:prnstr:telstr:ia5str:utctime:gentime:seq:set:tag:\".indexOf(\":\" + F + \":\") == -1) { throw \"undefined key: \" + F } if (F == \"bool\") { return new z(k[F]) } if (F == \"int\") { return new e(k[F]) } if (F == \"bitstr\") { return new s(k[F]) } if (F == \"octstr\") { return new h(k[F]) } if (F == \"null\") { return new v(k[F]) } if (F == \"oid\") { return new w(k[F]) } if (F == \"enum\") { return new l(k[F]) } if (F == \"utf8str\") { return new g(k[F]) } if (F == \"numstr\") { return new f(k[F]) } if (F == \"prnstr\") { return new y(k[F]) } if (F == \"telstr\") { return new u(k[F]) } if (F == \"ia5str\") { return new p(k[F]) } if (F == \"utctime\") { return new C(k[F]) } if (F == \"gentime\") { return new j(k[F]) } if (F == \"seq\") { var d = k[F]; var E = []; for (var x = 0; x < d.length; x++) { var B = o(d[x]); E.push(B) } return new m({ array: E }) } if (F == \"set\") { var d = k[F]; var E = []; for (var x = 0; x < d.length; x++) { var B = o(d[x]); E.push(B) } return new c({ array: E }) } if (F == \"tag\") { var A = k[F]; if (Object.prototype.toString.call(A) === \"[object Array]\" && A.length == 3) { var q = o(A[2]); return new r({ tag: A[0], explicit: A[1], obj: q }) } else { var b = {}; if (A.explicit !== undefined) { b.explicit = A.explicit } if (A.tag !== undefined) { b.tag = A.tag } if (A.obj === undefined) { throw \"obj shall be specified for 'tag'.\" } b.obj = o(A.obj); return new r(b) } } }; this.jsonToASN1HEX = function (b) { var a = this.newObject(b); return a.getEncodedHex() } }; KJUR.asn1.ASN1Util.oidHexToInt = function (a) { var j = \"\"; var k = parseInt(a.substr(0, 2), 16); var d = Math.floor(k / 40); var c = k % 40; var j = d + \".\" + c; var e = \"\"; for (var f = 2; f < a.length; f += 2) { var g = parseInt(a.substr(f, 2), 16); var h = (\"00000000\" + g.toString(2)).slice(-8); e = e + h.substr(1, 7); if (h.substr(0, 1) == \"0\") { var b = new BigInteger(e, 2); j = j + \".\" + b.toString(10); e = \"\" } } return j }; KJUR.asn1.ASN1Util.oidIntToHex = function (f) { var e = function (a) { var k = a.toString(16); if (k.length == 1) { k = \"0\" + k } return k }; var d = function (o) { var n = \"\"; var k = new BigInteger(o, 10); var a = k.toString(2); var l = 7 - a.length % 7; if (l == 7) { l = 0 } var q = \"\"; for (var m = 0; m < l; m++) { q += \"0\" } a = q + a; for (var m = 0; m < a.length - 1; m += 7) { var p = a.substr(m, 7); if (m != a.length - 7) { p = \"1\" + p } n += e(parseInt(p, 2)) } return n }; if (!f.match(/^[0-9.]+$/)) { throw \"malformed oid string: \" + f } var g = \"\"; var b = f.split(\".\"); var j = parseInt(b[0]) * 40 + parseInt(b[1]); g += e(j); b.splice(0, 2); for (var c = 0; c < b.length; c++) { g += d(b[c]) } return g }; KJUR.asn1.ASN1Object = function () { var c = true; var b = null; var d = \"00\"; var e = \"00\"; var a = \"\"; this.getLengthHexFromValue = function () { if (typeof this.hV == \"undefined\" || this.hV == null) { throw \"this.hV is null or undefined.\" } if (this.hV.length % 2 == 1) { throw \"value hex must be even length: n=\" + a.length + \",v=\" + this.hV } var i = this.hV.length / 2; var h = i.toString(16); if (h.length % 2 == 1) { h = \"0\" + h } if (i < 128) { return h } else { var g = h.length / 2; if (g > 15) { throw \"ASN.1 length too long to represent by 8x: n = \" + i.toString(16) } var f = 128 + g; return f.toString(16) + h } }; this.getEncodedHex = function () { if (this.hTLV == null || this.isModified) { this.hV = this.getFreshValueHex(); this.hL = this.getLengthHexFromValue(); this.hTLV = this.hT + this.hL + this.hV; this.isModified = false } return this.hTLV }; this.getValueHex = function () { this.getEncodedHex(); return this.hV }; this.getFreshValueHex = function () { return \"\" } }; KJUR.asn1.DERAbstractString = function (c) { KJUR.asn1.DERAbstractString.superclass.constructor.call(this); var b = null; var a = null; this.getString = function () { return this.s }; this.setString = function (d) { this.hTLV = null; this.isModified = true; this.s = d; this.hV = utf8tohex(this.s).toLowerCase() }; this.setStringHex = function (d) { this.hTLV = null; this.isModified = true; this.s = null; this.hV = d }; this.getFreshValueHex = function () { return this.hV }; if (typeof c != \"undefined\") { if (typeof c == \"string\") { this.setString(c) } else { if (typeof c.str != \"undefined\") { this.setString(c.str) } else { if (typeof c.hex != \"undefined\") { this.setStringHex(c.hex) } } } } }; YAHOO.lang.extend(KJUR.asn1.DERAbstractString, KJUR.asn1.ASN1Object); KJUR.asn1.DERAbstractTime = function (c) { KJUR.asn1.DERAbstractTime.superclass.constructor.call(this); var b = null; var a = null; this.localDateToUTC = function (f) { utc = f.getTime() + (f.getTimezoneOffset() * 60000); var e = new Date(utc); return e }; this.formatDate = function (m, o, e) { var g = this.zeroPadding; var n = this.localDateToUTC(m); var p = String(n.getFullYear()); if (o == \"utc\") { p = p.substr(2, 2) } var l = g(String(n.getMonth() + 1), 2); var q = g(String(n.getDate()), 2); var h = g(String(n.getHours()), 2); var i = g(String(n.getMinutes()), 2); var j = g(String(n.getSeconds()), 2); var r = p + l + q + h + i + j; if (e === true) { var f = n.getMilliseconds(); if (f != 0) { var k = g(String(f), 3); k = k.replace(/[0]+$/, \"\"); r = r + \".\" + k } } return r + \"Z\" }; this.zeroPadding = function (e, d) { if (e.length >= d) { return e } return new Array(d - e.length + 1).join(\"0\") + e }; this.getString = function () { return this.s }; this.setString = function (d) { this.hTLV = null; this.isModified = true; this.s = d; this.hV = stohex(d) }; this.setByDateValue = function (h, j, e, d, f, g) { var i = new Date(Date.UTC(h, j - 1, e, d, f, g, 0)); this.setByDate(i) }; this.getFreshValueHex = function () { return this.hV } }; YAHOO.lang.extend(KJUR.asn1.DERAbstractTime, KJUR.asn1.ASN1Object); KJUR.asn1.DERAbstractStructured = function (b) { KJUR.asn1.DERAbstractString.superclass.constructor.call(this); var a = null; this.setByASN1ObjectArray = function (c) { this.hTLV = null; this.isModified = true; this.asn1Array = c }; this.appendASN1Object = function (c) { this.hTLV = null; this.isModified = true; this.asn1Array.push(c) }; this.asn1Array = new Array(); if (typeof b != \"undefined\") { if (typeof b.array != \"undefined\") { this.asn1Array = b.array } } }; YAHOO.lang.extend(KJUR.asn1.DERAbstractStructured, KJUR.asn1.ASN1Object); KJUR.asn1.DERBoolean = function () { KJUR.asn1.DERBoolean.superclass.constructor.call(this); this.hT = \"01\"; this.hTLV = \"0101ff\" }; YAHOO.lang.extend(KJUR.asn1.DERBoolean, KJUR.asn1.ASN1Object); KJUR.asn1.DERInteger = function (a) { KJUR.asn1.DERInteger.superclass.constructor.call(this); this.hT = \"02\"; this.setByBigInteger = function (b) { this.hTLV = null; this.isModified = true; this.hV = KJUR.asn1.ASN1Util.bigIntToMinTwosComplementsHex(b) }; this.setByInteger = function (c) { var b = new BigInteger(String(c), 10); this.setByBigInteger(b) }; this.setValueHex = function (b) { this.hV = b }; this.getFreshValueHex = function () { return this.hV }; if (typeof a != \"undefined\") { if (typeof a.bigint != \"undefined\") { this.setByBigInteger(a.bigint) } else { if (typeof a[\"int\"] != \"undefined\") { this.setByInteger(a[\"int\"]) } else { if (typeof a == \"number\") { this.setByInteger(a) } else { if (typeof a.hex != \"undefined\") { this.setValueHex(a.hex) } } } } } }; YAHOO.lang.extend(KJUR.asn1.DERInteger, KJUR.asn1.ASN1Object); KJUR.asn1.DERBitString = function (b) { if (b !== undefined && typeof b.obj !== \"undefined\") { var a = KJUR.asn1.ASN1Util.newObject(b.obj); b.hex = \"00\" + a.getEncodedHex() } KJUR.asn1.DERBitString.superclass.constructor.call(this); this.hT = \"03\"; this.setHexValueIncludingUnusedBits = function (c) { this.hTLV = null; this.isModified = true; this.hV = c }; this.setUnusedBitsAndHexValue = function (c, e) { if (c < 0 || 7 < c) { throw \"unused bits shall be from 0 to 7: u = \" + c } var d = \"0\" + c; this.hTLV = null; this.isModified = true; this.hV = d + e }; this.setByBinaryString = function (e) { e = e.replace(/0+$/, \"\"); var f = 8 - e.length % 8; if (f == 8) { f = 0 } for (var g = 0; g <= f; g++) { e += \"0\" } var j = \"\"; for (var g = 0; g < e.length - 1; g += 8) { var d = e.substr(g, 8); var c = parseInt(d, 2).toString(16); if (c.length == 1) { c = \"0\" + c } j += c } this.hTLV = null; this.isModified = true; this.hV = \"0\" + f + j }; this.setByBooleanArray = function (e) { var d = \"\"; for (var c = 0; c < e.length; c++) { if (e[c] == true) { d += \"1\" } else { d += \"0\" } } this.setByBinaryString(d) }; this.newFalseArray = function (e) { var c = new Array(e); for (var d = 0; d < e; d++) { c[d] = false } return c }; this.getFreshValueHex = function () { return this.hV }; if (typeof b != \"undefined\") { if (typeof b == \"string\" && b.toLowerCase().match(/^[0-9a-f]+$/)) { this.setHexValueIncludingUnusedBits(b) } else { if (typeof b.hex != \"undefined\") { this.setHexValueIncludingUnusedBits(b.hex) } else { if (typeof b.bin != \"undefined\") { this.setByBinaryString(b.bin) } else { if (typeof b.array != \"undefined\") { this.setByBooleanArray(b.array) } } } } } }; YAHOO.lang.extend(KJUR.asn1.DERBitString, KJUR.asn1.ASN1Object); KJUR.asn1.DEROctetString = function (b) { if (b !== undefined && typeof b.obj !== \"undefined\") { var a = KJUR.asn1.ASN1Util.newObject(b.obj); b.hex = a.getEncodedHex() } KJUR.asn1.DEROctetString.superclass.constructor.call(this, b); this.hT = \"04\" }; YAHOO.lang.extend(KJUR.asn1.DEROctetString, KJUR.asn1.DERAbstractString); KJUR.asn1.DERNull = function () { KJUR.asn1.DERNull.superclass.constructor.call(this); this.hT = \"05\"; this.hTLV = \"0500\" }; YAHOO.lang.extend(KJUR.asn1.DERNull, KJUR.asn1.ASN1Object); KJUR.asn1.DERObjectIdentifier = function (c) { var b = function (d) { var e = d.toString(16); if (e.length == 1) { e = \"0\" + e } return e }; var a = function (k) { var j = \"\"; var e = new BigInteger(k, 10); var d = e.toString(2); var f = 7 - d.length % 7; if (f == 7) { f = 0 } var m = \"\"; for (var g = 0; g < f; g++) { m += \"0\" } d = m + d; for (var g = 0; g < d.length - 1; g += 7) { var l = d.substr(g, 7); if (g != d.length - 7) { l = \"1\" + l } j += b(parseInt(l, 2)) } return j }; KJUR.asn1.DERObjectIdentifier.superclass.constructor.call(this); this.hT = \"06\"; this.setValueHex = function (d) { this.hTLV = null; this.isModified = true; this.s = null; this.hV = d }; this.setValueOidString = function (f) { if (!f.match(/^[0-9.]+$/)) { throw \"malformed oid string: \" + f } var g = \"\"; var d = f.split(\".\"); var j = parseInt(d[0]) * 40 + parseInt(d[1]); g += b(j); d.splice(0, 2); for (var e = 0; e < d.length; e++) { g += a(d[e]) } this.hTLV = null; this.isModified = true; this.s = null; this.hV = g }; this.setValueName = function (e) { var d = KJUR.asn1.x509.OID.name2oid(e); if (d !== \"\") { this.setValueOidString(d) } else { throw \"DERObjectIdentifier oidName undefined: \" + e } }; this.getFreshValueHex = function () { return this.hV }; if (c !== undefined) { if (typeof c === \"string\") { if (c.match(/^[0-2].[0-9.]+$/)) { this.setValueOidString(c) } else { this.setValueName(c) } } else { if (c.oid !== undefined) { this.setValueOidString(c.oid) } else { if (c.hex !== undefined) { this.setValueHex(c.hex) } else { if (c.name !== undefined) { this.setValueName(c.name) } } } } } }; YAHOO.lang.extend(KJUR.asn1.DERObjectIdentifier, KJUR.asn1.ASN1Object); KJUR.asn1.DEREnumerated = function (a) { KJUR.asn1.DEREnumerated.superclass.constructor.call(this); this.hT = \"0a\"; this.setByBigInteger = function (b) { this.hTLV = null; this.isModified = true; this.hV = KJUR.asn1.ASN1Util.bigIntToMinTwosComplementsHex(b) }; this.setByInteger = function (c) { var b = new BigInteger(String(c), 10); this.setByBigInteger(b) }; this.setValueHex = function (b) { this.hV = b }; this.getFreshValueHex = function () { return this.hV }; if (typeof a != \"undefined\") { if (typeof a[\"int\"] != \"undefined\") { this.setByInteger(a[\"int\"]) } else { if (typeof a == \"number\") { this.setByInteger(a) } else { if (typeof a.hex != \"undefined\") { this.setValueHex(a.hex) } } } } }; YAHOO.lang.extend(KJUR.asn1.DEREnumerated, KJUR.asn1.ASN1Object); KJUR.asn1.DERUTF8String = function (a) { KJUR.asn1.DERUTF8String.superclass.constructor.call(this, a); this.hT = \"0c\" }; YAHOO.lang.extend(KJUR.asn1.DERUTF8String, KJUR.asn1.DERAbstractString); KJUR.asn1.DERNumericString = function (a) { KJUR.asn1.DERNumericString.superclass.constructor.call(this, a); this.hT = \"12\" }; YAHOO.lang.extend(KJUR.asn1.DERNumericString, KJUR.asn1.DERAbstractString); KJUR.asn1.DERPrintableString = function (a) { KJUR.asn1.DERPrintableString.superclass.constructor.call(this, a); this.hT = \"13\" }; YAHOO.lang.extend(KJUR.asn1.DERPrintableString, KJUR.asn1.DERAbstractString); KJUR.asn1.DERTeletexString = function (a) { KJUR.asn1.DERTeletexString.superclass.constructor.call(this, a); this.hT = \"14\" }; YAHOO.lang.extend(KJUR.asn1.DERTeletexString, KJUR.asn1.DERAbstractString); KJUR.asn1.DERIA5String = function (a) { KJUR.asn1.DERIA5String.superclass.constructor.call(this, a); this.hT = \"16\" }; YAHOO.lang.extend(KJUR.asn1.DERIA5String, KJUR.asn1.DERAbstractString); KJUR.asn1.DERUTCTime = function (a) { KJUR.asn1.DERUTCTime.superclass.constructor.call(this, a); this.hT = \"17\"; this.setByDate = function (b) { this.hTLV = null; this.isModified = true; this.date = b; this.s = this.formatDate(this.date, \"utc\"); this.hV = stohex(this.s) }; this.getFreshValueHex = function () { if (typeof this.date == \"undefined\" && typeof this.s == \"undefined\") { this.date = new Date(); this.s = this.formatDate(this.date, \"utc\"); this.hV = stohex(this.s) } return this.hV }; if (a !== undefined) { if (a.str !== undefined) { this.setString(a.str) } else { if (typeof a == \"string\" && a.match(/^[0-9]{12}Z$/)) { this.setString(a) } else { if (a.hex !== undefined) { this.setStringHex(a.hex) } else { if (a.date !== undefined) { this.setByDate(a.date) } } } } } }; YAHOO.lang.extend(KJUR.asn1.DERUTCTime, KJUR.asn1.DERAbstractTime); KJUR.asn1.DERGeneralizedTime = function (a) { KJUR.asn1.DERGeneralizedTime.superclass.constructor.call(this, a); this.hT = \"18\"; this.withMillis = false; this.setByDate = function (b) { this.hTLV = null; this.isModified = true; this.date = b; this.s = this.formatDate(this.date, \"gen\", this.withMillis); this.hV = stohex(this.s) }; this.getFreshValueHex = function () { if (this.date === undefined && this.s === undefined) { this.date = new Date(); this.s = this.formatDate(this.date, \"gen\", this.withMillis); this.hV = stohex(this.s) } return this.hV }; if (a !== undefined) { if (a.str !== undefined) { this.setString(a.str) } else { if (typeof a == \"string\" && a.match(/^[0-9]{14}Z$/)) { this.setString(a) } else { if (a.hex !== undefined) { this.setStringHex(a.hex) } else { if (a.date !== undefined) { this.setByDate(a.date) } } } } if (a.millis === true) { this.withMillis = true } } }; YAHOO.lang.extend(KJUR.asn1.DERGeneralizedTime, KJUR.asn1.DERAbstractTime); KJUR.asn1.DERSequence = function (a) { KJUR.asn1.DERSequence.superclass.constructor.call(this, a); this.hT = \"30\"; this.getFreshValueHex = function () { var c = \"\"; for (var b = 0; b < this.asn1Array.length; b++) { var d = this.asn1Array[b]; c += d.getEncodedHex() } this.hV = c; return this.hV } }; YAHOO.lang.extend(KJUR.asn1.DERSequence, KJUR.asn1.DERAbstractStructured); KJUR.asn1.DERSet = function (a) { KJUR.asn1.DERSet.superclass.constructor.call(this, a); this.hT = \"31\"; this.sortFlag = true; this.getFreshValueHex = function () { var b = new Array(); for (var c = 0; c < this.asn1Array.length; c++) { var d = this.asn1Array[c]; b.push(d.getEncodedHex()) } if (this.sortFlag == true) { b.sort() } this.hV = b.join(\"\"); return this.hV }; if (typeof a != \"undefined\") { if (typeof a.sortflag != \"undefined\" && a.sortflag == false) { this.sortFlag = false } } }; YAHOO.lang.extend(KJUR.asn1.DERSet, KJUR.asn1.DERAbstractStructured); KJUR.asn1.DERTaggedObject = function (a) { KJUR.asn1.DERTaggedObject.superclass.constructor.call(this); this.hT = \"a0\"; this.hV = \"\"; this.isExplicit = true; this.asn1Object = null; this.setASN1Object = function (b, c, d) { this.hT = c; this.isExplicit = b; this.asn1Object = d; if (this.isExplicit) { this.hV = this.asn1Object.getEncodedHex(); this.hTLV = null; this.isModified = true } else { this.hV = null; this.hTLV = d.getEncodedHex(); this.hTLV = this.hTLV.replace(/^../, c); this.isModified = false } }; this.getFreshValueHex = function () { return this.hV }; if (typeof a != \"undefined\") { if (typeof a.tag != \"undefined\") { this.hT = a.tag } if (typeof a.explicit != \"undefined\") { this.isExplicit = a.explicit } if (typeof a.obj != \"undefined\") { this.asn1Object = a.obj; this.setASN1Object(this.isExplicit, this.hT, this.asn1Object) } } }; YAHOO.lang.extend(KJUR.asn1.DERTaggedObject, KJUR.asn1.ASN1Object);",
					"var ASN1HEX = new function () { }; ASN1HEX.getLblen = function (c, a) { if (c.substr(a + 2, 1) != \"8\") { return 1 } var b = parseInt(c.substr(a + 3, 1)); if (b == 0) { return -1 } if (0 < b && b < 10) { return b + 1 } return -2 }; ASN1HEX.getL = function (c, b) { var a = ASN1HEX.getLblen(c, b); if (a < 1) { return \"\" } return c.substr(b + 2, a * 2) }; ASN1HEX.getVblen = function (d, a) { var c, b; c = ASN1HEX.getL(d, a); if (c == \"\") { return -1 } if (c.substr(0, 1) === \"8\") { b = new BigInteger(c.substr(2), 16) } else { b = new BigInteger(c, 16) } return b.intValue() }; ASN1HEX.getVidx = function (c, b) { var a = ASN1HEX.getLblen(c, b); if (a < 0) { return a } return b + (a + 1) * 2 }; ASN1HEX.getV = function (d, a) { var c = ASN1HEX.getVidx(d, a); var b = ASN1HEX.getVblen(d, a); return d.substr(c, b * 2) }; ASN1HEX.getTLV = function (b, a) { return b.substr(a, 2) + ASN1HEX.getL(b, a) + ASN1HEX.getV(b, a) }; ASN1HEX.getNextSiblingIdx = function (d, a) { var c = ASN1HEX.getVidx(d, a); var b = ASN1HEX.getVblen(d, a); return c + b * 2 }; ASN1HEX.getChildIdx = function (e, f) { var j = ASN1HEX; var g = new Array(); var i = j.getVidx(e, f); if (e.substr(f, 2) == \"03\") { g.push(i + 2) } else { g.push(i) } var l = j.getVblen(e, f); var c = i; var d = 0; while (1) { var b = j.getNextSiblingIdx(e, c); if (b == null || (b - i >= (l * 2))) { break } if (d >= 200) { break } g.push(b); c = b; d++ } return g }; ASN1HEX.getNthChildIdx = function (d, b, e) { var c = ASN1HEX.getChildIdx(d, b); return c[e] }; ASN1HEX.getIdxbyList = function (e, d, c, i) { var g = ASN1HEX; var f, b; if (c.length == 0) { if (i !== undefined) { if (e.substr(d, 2) !== i) { throw \"checking tag doesn't match: \" + e.substr(d, 2) + \"!=\" + i } } return d } f = c.shift(); b = g.getChildIdx(e, d); return g.getIdxbyList(e, b[f], c, i) }; ASN1HEX.getTLVbyList = function (d, c, b, f) { var e = ASN1HEX; var a = e.getIdxbyList(d, c, b); if (a === undefined) { throw \"can't find nthList object\" } if (f !== undefined) { if (d.substr(a, 2) != f) { throw \"checking tag doesn't match: \" + d.substr(a, 2) + \"!=\" + f } } return e.getTLV(d, a) }; ASN1HEX.getVbyList = function (e, c, b, g, i) { var f = ASN1HEX; var a, d; a = f.getIdxbyList(e, c, b, g); if (a === undefined) { throw \"can't find nthList object\" } d = f.getV(e, a); if (i === true) { d = d.substr(2) } return d }; ASN1HEX.hextooidstr = function (e) { var h = function (b, a) { if (b.length >= a) { return b } return new Array(a - b.length + 1).join(\"0\") + b }; var l = []; var o = e.substr(0, 2); var f = parseInt(o, 16); l[0] = new String(Math.floor(f / 40)); l[1] = new String(f % 40); var m = e.substr(2); var k = []; for (var g = 0; g < m.length / 2; g++) { k.push(parseInt(m.substr(g * 2, 2), 16)) } var j = []; var d = \"\"; for (var g = 0; g < k.length; g++) { if (k[g] & 128) { d = d + h((k[g] & 127).toString(2), 7) } else { d = d + h((k[g] & 127).toString(2), 7); j.push(new String(parseInt(d, 2))); d = \"\" } } var n = l.join(\".\"); if (j.length > 0) { n = n + \".\" + j.join(\".\") } return n }; ASN1HEX.dump = function (t, c, l, g) { var p = ASN1HEX; var j = p.getV; var y = p.dump; var w = p.getChildIdx; var e = t; if (t instanceof KJUR.asn1.ASN1Object) { e = t.getEncodedHex() } var q = function (A, i) { if (A.length <= i * 2) { return A } else { var v = A.substr(0, i) + \"..(total \" + A.length / 2 + \"bytes)..\" + A.substr(A.length - i, i); return v } }; if (c === undefined) { c = { ommit_long_octet: 32 } } if (l === undefined) { l = 0 } if (g === undefined) { g = \"\" } var x = c.ommit_long_octet; if (e.substr(l, 2) == \"01\") { var h = j(e, l); if (h == \"00\") { return g + \"BOOLEAN FALSE\\n\" } else { return g + \"BOOLEAN TRUE\\n\" } } if (e.substr(l, 2) == \"02\") { var h = j(e, l); return g + \"INTEGER \" + q(h, x) + \"\\n\" } if (e.substr(l, 2) == \"03\") { var h = j(e, l); return g + \"BITSTRING \" + q(h, x) + \"\\n\" } if (e.substr(l, 2) == \"04\") { var h = j(e, l); if (p.isASN1HEX(h)) { var k = g + \"OCTETSTRING, encapsulates\\n\"; k = k + y(h, c, 0, g + \"  \"); return k } else { return g + \"OCTETSTRING \" + q(h, x) + \"\\n\" } } if (e.substr(l, 2) == \"05\") { return g + \"NULL\\n\" } if (e.substr(l, 2) == \"06\") { var m = j(e, l); var a = KJUR.asn1.ASN1Util.oidHexToInt(m); var o = KJUR.asn1.x509.OID.oid2name(a); var b = a.replace(/\\./g, \" \"); if (o != \"\") { return g + \"ObjectIdentifier \" + o + \" (\" + b + \")\\n\" } else { return g + \"ObjectIdentifier (\" + b + \")\\n\" } } if (e.substr(l, 2) == \"0c\") { return g + \"UTF8String '\" + hextoutf8(j(e, l)) + \"'\\n\" } if (e.substr(l, 2) == \"13\") { return g + \"PrintableString '\" + hextoutf8(j(e, l)) + \"'\\n\" } if (e.substr(l, 2) == \"14\") { return g + \"TeletexString '\" + hextoutf8(j(e, l)) + \"'\\n\" } if (e.substr(l, 2) == \"16\") { return g + \"IA5String '\" + hextoutf8(j(e, l)) + \"'\\n\" } if (e.substr(l, 2) == \"17\") { return g + \"UTCTime \" + hextoutf8(j(e, l)) + \"\\n\" } if (e.substr(l, 2) == \"18\") { return g + \"GeneralizedTime \" + hextoutf8(j(e, l)) + \"\\n\" } if (e.substr(l, 2) == \"30\") { if (e.substr(l, 4) == \"3000\") { return g + \"SEQUENCE {}\\n\" } var k = g + \"SEQUENCE\\n\"; var d = w(e, l); var f = c; if ((d.length == 2 || d.length == 3) && e.substr(d[0], 2) == \"06\" && e.substr(d[d.length - 1], 2) == \"04\") { var o = p.oidname(j(e, d[0])); var r = JSON.parse(JSON.stringify(c)); r.x509ExtName = o; f = r } for (var u = 0; u < d.length; u++) { k = k + y(e, f, d[u], g + \"  \") } return k } if (e.substr(l, 2) == \"31\") { var k = g + \"SET\\n\"; var d = w(e, l); for (var u = 0; u < d.length; u++) { k = k + y(e, c, d[u], g + \"  \") } return k } var z = parseInt(e.substr(l, 2), 16); if ((z & 128) != 0) { var n = z & 31; if ((z & 32) != 0) { var k = g + \"[\" + n + \"]\\n\"; var d = w(e, l); for (var u = 0; u < d.length; u++) { k = k + y(e, c, d[u], g + \"  \") } return k } else { var h = j(e, l); if (h.substr(0, 8) == \"68747470\") { h = hextoutf8(h) } if (c.x509ExtName === \"subjectAltName\" && n == 2) { h = hextoutf8(h) } var k = g + \"[\" + n + \"] \" + h + \"\\n\"; return k } } return g + \"UNKNOWN(\" + e.substr(l, 2) + \") \" + j(e, l) + \"\\n\" }; ASN1HEX.isASN1HEX = function (e) { var d = ASN1HEX; if (e.length % 2 == 1) { return false } var c = d.getVblen(e, 0); var b = e.substr(0, 2); var f = d.getL(e, 0); var a = e.length - b.length - f.length; if (a == c * 2) { return true } return false }; ASN1HEX.oidname = function (a) { var c = KJUR.asn1; if (KJUR.lang.String.isHex(a)) { a = c.ASN1Util.oidHexToInt(a) } var b = c.x509.OID.oid2name(a); if (b === \"\") { b = a } return b };",
					"var KJUR; if (typeof KJUR == \"undefined\" || !KJUR) { KJUR = {} } if (typeof KJUR.lang == \"undefined\" || !KJUR.lang) { KJUR.lang = {} } KJUR.lang.String = function () { }; function Base64x() { } function stoBA(d) { var b = new Array(); for (var c = 0; c < d.length; c++) { b[c] = d.charCodeAt(c) } return b } function BAtos(b) { var d = \"\"; for (var c = 0; c < b.length; c++) { d = d + String.fromCharCode(b[c]) } return d } function BAtohex(b) { var e = \"\"; for (var d = 0; d < b.length; d++) { var c = b[d].toString(16); if (c.length == 1) { c = \"0\" + c } e = e + c } return e } function stohex(a) { return BAtohex(stoBA(a)) } function stob64(a) { return hex2b64(stohex(a)) } function stob64u(a) { return b64tob64u(hex2b64(stohex(a))) } function b64utos(a) { return BAtos(b64toBA(b64utob64(a))) } function b64tob64u(a) { a = a.replace(/\\=/g, \"\"); a = a.replace(/\\+/g, \"-\"); a = a.replace(/\\//g, \"_\"); return a } function b64utob64(a) { if (a.length % 4 == 2) { a = a + \"==\" } else { if (a.length % 4 == 3) { a = a + \"=\" } } a = a.replace(/-/g, \"+\"); a = a.replace(/_/g, \"/\"); return a } function hextob64u(a) { if (a.length % 2 == 1) { a = \"0\" + a } return b64tob64u(hex2b64(a)) } function b64utohex(a) { return b64tohex(b64utob64(a)) } var utf8tob64u, b64utoutf8; if (typeof Buffer === \"function\") { utf8tob64u = function (a) { return b64tob64u(new Buffer(a, \"utf8\").toString(\"base64\")) }; b64utoutf8 = function (a) { return new Buffer(b64utob64(a), \"base64\").toString(\"utf8\") } } else { utf8tob64u = function (a) { return hextob64u(uricmptohex(encodeURIComponentAll(a))) }; b64utoutf8 = function (a) { return decodeURIComponent(hextouricmp(b64utohex(a))) } } function utf8tob64(a) { return hex2b64(uricmptohex(encodeURIComponentAll(a))) } function b64toutf8(a) { return decodeURIComponent(hextouricmp(b64tohex(a))) } function utf8tohex(a) { return uricmptohex(encodeURIComponentAll(a)) } function hextoutf8(a) { return decodeURIComponent(hextouricmp(a)) } function hextorstr(c) { var b = \"\"; for (var a = 0; a < c.length - 1; a += 2) { b += String.fromCharCode(parseInt(c.substr(a, 2), 16)) } return b } function rstrtohex(c) { var a = \"\"; for (var b = 0; b < c.length; b++) { a += (\"0\" + c.charCodeAt(b).toString(16)).slice(-2) } return a } function hextob64(a) { return hex2b64(a) } function hextob64nl(b) { var a = hextob64(b); var c = a.replace(/(.{64})/g, \"$1\\r\\n\"); c = c.replace(/\\r\\n$/, \"\"); return c } function b64nltohex(b) { var a = b.replace(/[^0-9A-Za-z\\/+=]*/g, \"\"); var c = b64tohex(a); return c } function hextopem(a, b) { var c = hextob64nl(a); return \"-----BEGIN \" + b + \"-----\\r\\n\" + c + \"\\r\\n-----END \" + b + \"-----\\r\\n\" } function pemtohex(a, b) { if (a.indexOf(\"-----BEGIN \") == -1) { throw \"can't find PEM header: \" + b } if (b !== undefined) { a = a.replace(\"-----BEGIN \" + b + \"-----\", \"\"); a = a.replace(\"-----END \" + b + \"-----\", \"\") } else { a = a.replace(/-----BEGIN [^-]+-----/, \"\"); a = a.replace(/-----END [^-]+-----/, \"\") } return b64nltohex(a) } function hextoArrayBuffer(d) { if (d.length % 2 != 0) { throw \"input is not even length\" } if (d.match(/^[0-9A-Fa-f]+$/) == null) { throw \"input is not hexadecimal\" } var b = new ArrayBuffer(d.length / 2); var a = new DataView(b); for (var c = 0; c < d.length / 2; c++) { a.setUint8(c, parseInt(d.substr(c * 2, 2), 16)) } return b } function ArrayBuffertohex(b) { var d = \"\"; var a = new DataView(b); for (var c = 0; c < b.byteLength; c++) { d += (\"00\" + a.getUint8(c).toString(16)).slice(-2) } return d } function zulutomsec(n) { var l, j, m, e, f, i, b, k; var a, h, g, c; c = n.match(/^(\\d{2}|\\d{4})(\\d\\d)(\\d\\d)(\\d\\d)(\\d\\d)(\\d\\d)(|\\.\\d+)Z$/); if (c) { a = c[1]; l = parseInt(a); if (a.length === 2) { if (50 <= l && l < 100) { l = 1900 + l } else { if (0 <= l && l < 50) { l = 2000 + l } } } j = parseInt(c[2]) - 1; m = parseInt(c[3]); e = parseInt(c[4]); f = parseInt(c[5]); i = parseInt(c[6]); b = 0; h = c[7]; if (h !== \"\") { g = (h.substr(1) + \"00\").substr(0, 3); b = parseInt(g) } return Date.UTC(l, j, m, e, f, i, b) } throw \"unsupported zulu format: \" + n } function zulutosec(a) { var b = zulutomsec(a); return ~~(b / 1000) } function zulutodate(a) { return new Date(zulutomsec(a)) } function datetozulu(g, e, f) { var b; var a = g.getUTCFullYear(); if (e) { if (a < 1950 || 2049 < a) { throw \"not proper year for UTCTime: \" + a } b = (\"\" + a).slice(-2) } else { b = (\"000\" + a).slice(-4) } b += (\"0\" + (g.getUTCMonth() + 1)).slice(-2); b += (\"0\" + g.getUTCDate()).slice(-2); b += (\"0\" + g.getUTCHours()).slice(-2); b += (\"0\" + g.getUTCMinutes()).slice(-2); b += (\"0\" + g.getUTCSeconds()).slice(-2); if (f) { var c = g.getUTCMilliseconds(); if (c !== 0) { c = (\"00\" + c).slice(-3); c = c.replace(/0+$/g, \"\"); b += \".\" + c } } b += \"Z\"; return b } function uricmptohex(a) { return a.replace(/%/g, \"\") } function hextouricmp(a) { return a.replace(/(..)/g, \"%$1\") } function ipv6tohex(g) { var b = \"malformed IPv6 address\"; if (!g.match(/^[0-9A-Fa-f:]+$/)) { throw b } g = g.toLowerCase(); var d = g.split(\":\").length - 1; if (d < 2) { throw b } var e = \":\".repeat(7 - d + 2); g = g.replace(\"::\", e); var c = g.split(\":\"); if (c.length != 8) { throw b } for (var f = 0; f < 8; f++) { c[f] = (\"0000\" + c[f]).slice(-4) } return c.join(\"\") } function hextoipv6(e) { if (!e.match(/^[0-9A-Fa-f]{32}$/)) { throw \"malformed IPv6 address octet\" } e = e.toLowerCase(); var b = e.match(/.{1,4}/g); for (var d = 0; d < 8; d++) { b[d] = b[d].replace(/^0+/, \"\"); if (b[d] == \"\") { b[d] = \"0\" } } e = \":\" + b.join(\":\") + \":\"; var c = e.match(/:(0:){2,}/g); if (c === null) { return e.slice(1, -1) } var f = \"\"; for (var d = 0; d < c.length; d++) { if (c[d].length > f.length) { f = c[d] } } e = e.replace(f, \"::\"); return e.slice(1, -1) } function hextoip(b) { var d = \"malformed hex value\"; if (!b.match(/^([0-9A-Fa-f][0-9A-Fa-f]){1,}$/)) { throw d } if (b.length == 8) { var c; try { c = parseInt(b.substr(0, 2), 16) + \".\" + parseInt(b.substr(2, 2), 16) + \".\" + parseInt(b.substr(4, 2), 16) + \".\" + parseInt(b.substr(6, 2), 16); return c } catch (a) { throw d } } else { if (b.length == 32) { return hextoipv6(b) } else { return b } } } function iptohex(f) { var j = \"malformed IP address\"; f = f.toLowerCase(f); if (f.match(/^[0-9.]+$/)) { var b = f.split(\".\"); if (b.length !== 4) { throw j } var g = \"\"; try { for (var e = 0; e < 4; e++) { var h = parseInt(b[e]); g += (\"0\" + h.toString(16)).slice(-2) } return g } catch (c) { throw j } } else { if (f.match(/^[0-9a-f:]+$/) && f.indexOf(\":\") !== -1) { return ipv6tohex(f) } else { throw j } } } function encodeURIComponentAll(a) { var d = encodeURIComponent(a); var b = \"\"; for (var c = 0; c < d.length; c++) { if (d[c] == \"%\") { b = b + d.substr(c, 3); c = c + 2 } else { b = b + \"%\" + stohex(d[c]) } } return b } function newline_toUnix(a) { a = a.replace(/\\r\\n/mg, \"\\n\"); return a } function newline_toDos(a) { a = a.replace(/\\r\\n/mg, \"\\n\"); a = a.replace(/\\n/mg, \"\\r\\n\"); return a } KJUR.lang.String.isInteger = function (a) { if (a.match(/^[0-9]+$/)) { return true } else { if (a.match(/^-[0-9]+$/)) { return true } else { return false } } }; KJUR.lang.String.isHex = function (a) { if (a.length % 2 == 0 && (a.match(/^[0-9a-f]+$/) || a.match(/^[0-9A-F]+$/))) { return true } else { return false } }; KJUR.lang.String.isBase64 = function (a) { a = a.replace(/\\s+/g, \"\"); if (a.match(/^[0-9A-Za-z+\\/]+={0,3}$/) && a.length % 4 == 0) { return true } else { return false } }; KJUR.lang.String.isBase64URL = function (a) { if (a.match(/[+/=]/)) { return false } a = b64utob64(a); return KJUR.lang.String.isBase64(a) }; KJUR.lang.String.isIntegerArray = function (a) { a = a.replace(/\\s+/g, \"\"); if (a.match(/^\\[[0-9,]+\\]$/)) { return true } else { return false } }; function hextoposhex(a) { if (a.length % 2 == 1) { return \"0\" + a } if (a.substr(0, 1) > \"7\") { return \"00\" + a } return a } function intarystrtohex(b) { b = b.replace(/^\\s*\\[\\s*/, \"\"); b = b.replace(/\\s*\\]\\s*$/, \"\"); b = b.replace(/\\s*/g, \"\"); try { var c = b.split(/,/).map(function (g, e, h) { var f = parseInt(g); if (f < 0 || 255 < f) { throw \"integer not in range 0-255\" } var d = (\"00\" + f.toString(16)).slice(-2); return d }).join(\"\"); return c } catch (a) { throw \"malformed integer array string: \" + a } } var strdiffidx = function (c, a) { var d = c.length; if (c.length > a.length) { d = a.length } for (var b = 0; b < d; b++) { if (c.charCodeAt(b) != a.charCodeAt(b)) { return b } } if (c.length != a.length) { return d } return -1 };",
					"if (typeof KJUR == \"undefined\" || !KJUR) { KJUR = {} } if (typeof KJUR.crypto == \"undefined\" || !KJUR.crypto) { KJUR.crypto = {} } KJUR.crypto.Util = new function () { this.DIGESTINFOHEAD = { sha1: \"3021300906052b0e03021a05000414\", sha224: \"302d300d06096086480165030402040500041c\", sha256: \"3031300d060960864801650304020105000420\", sha384: \"3041300d060960864801650304020205000430\", sha512: \"3051300d060960864801650304020305000440\", md2: \"3020300c06082a864886f70d020205000410\", md5: \"3020300c06082a864886f70d020505000410\", ripemd160: \"3021300906052b2403020105000414\", }; this.DEFAULTPROVIDER = { md5: \"cryptojs\", sha1: \"cryptojs\", sha224: \"cryptojs\", sha256: \"cryptojs\", sha384: \"cryptojs\", sha512: \"cryptojs\", ripemd160: \"cryptojs\", hmacmd5: \"cryptojs\", hmacsha1: \"cryptojs\", hmacsha224: \"cryptojs\", hmacsha256: \"cryptojs\", hmacsha384: \"cryptojs\", hmacsha512: \"cryptojs\", hmacripemd160: \"cryptojs\", MD5withRSA: \"cryptojs/jsrsa\", SHA1withRSA: \"cryptojs/jsrsa\", SHA224withRSA: \"cryptojs/jsrsa\", SHA256withRSA: \"cryptojs/jsrsa\", SHA384withRSA: \"cryptojs/jsrsa\", SHA512withRSA: \"cryptojs/jsrsa\", RIPEMD160withRSA: \"cryptojs/jsrsa\", MD5withECDSA: \"cryptojs/jsrsa\", SHA1withECDSA: \"cryptojs/jsrsa\", SHA224withECDSA: \"cryptojs/jsrsa\", SHA256withECDSA: \"cryptojs/jsrsa\", SHA384withECDSA: \"cryptojs/jsrsa\", SHA512withECDSA: \"cryptojs/jsrsa\", RIPEMD160withECDSA: \"cryptojs/jsrsa\", SHA1withDSA: \"cryptojs/jsrsa\", SHA224withDSA: \"cryptojs/jsrsa\", SHA256withDSA: \"cryptojs/jsrsa\", MD5withRSAandMGF1: \"cryptojs/jsrsa\", SHA1withRSAandMGF1: \"cryptojs/jsrsa\", SHA224withRSAandMGF1: \"cryptojs/jsrsa\", SHA256withRSAandMGF1: \"cryptojs/jsrsa\", SHA384withRSAandMGF1: \"cryptojs/jsrsa\", SHA512withRSAandMGF1: \"cryptojs/jsrsa\", RIPEMD160withRSAandMGF1: \"cryptojs/jsrsa\", }; this.CRYPTOJSMESSAGEDIGESTNAME = { md5: CryptoJS.algo.MD5, sha1: CryptoJS.algo.SHA1, sha224: CryptoJS.algo.SHA224, sha256: CryptoJS.algo.SHA256, sha384: CryptoJS.algo.SHA384, sha512: CryptoJS.algo.SHA512, ripemd160: CryptoJS.algo.RIPEMD160 }; this.getDigestInfoHex = function (a, b) { if (typeof this.DIGESTINFOHEAD[b] == \"undefined\") { throw \"alg not supported in Util.DIGESTINFOHEAD: \" + b } return this.DIGESTINFOHEAD[b] + a }; this.getPaddedDigestInfoHex = function (h, a, j) { var c = this.getDigestInfoHex(h, a); var d = j / 4; if (c.length + 22 > d) { throw \"key is too short for SigAlg: keylen=\" + j + \",\" + a } var b = \"0001\"; var k = \"00\" + c; var g = \"\"; var l = d - b.length - k.length; for (var f = 0; f < l; f += 2) { g += \"ff\" } var e = b + g + k; return e }; this.hashString = function (a, c) { var b = new KJUR.crypto.MessageDigest({ alg: c }); return b.digestString(a) }; this.hashHex = function (b, c) { var a = new KJUR.crypto.MessageDigest({ alg: c }); return a.digestHex(b) }; this.sha1 = function (a) { var b = new KJUR.crypto.MessageDigest({ alg: \"sha1\", prov: \"cryptojs\" }); return b.digestString(a) }; this.sha256 = function (a) { var b = new KJUR.crypto.MessageDigest({ alg: \"sha256\", prov: \"cryptojs\" }); return b.digestString(a) }; this.sha256Hex = function (a) { var b = new KJUR.crypto.MessageDigest({ alg: \"sha256\", prov: \"cryptojs\" }); return b.digestHex(a) }; this.sha512 = function (a) { var b = new KJUR.crypto.MessageDigest({ alg: \"sha512\", prov: \"cryptojs\" }); return b.digestString(a) }; this.sha512Hex = function (a) { var b = new KJUR.crypto.MessageDigest({ alg: \"sha512\", prov: \"cryptojs\" }); return b.digestHex(a) } }; KJUR.crypto.Util.md5 = function (a) { var b = new KJUR.crypto.MessageDigest({ alg: \"md5\", prov: \"cryptojs\" }); return b.digestString(a) }; KJUR.crypto.Util.ripemd160 = function (a) { var b = new KJUR.crypto.MessageDigest({ alg: \"ripemd160\", prov: \"cryptojs\" }); return b.digestString(a) }; KJUR.crypto.Util.SECURERANDOMGEN = new SecureRandom(); KJUR.crypto.Util.getRandomHexOfNbytes = function (b) { var a = new Array(b); KJUR.crypto.Util.SECURERANDOMGEN.nextBytes(a); return BAtohex(a) }; KJUR.crypto.Util.getRandomBigIntegerOfNbytes = function (a) { return new BigInteger(KJUR.crypto.Util.getRandomHexOfNbytes(a), 16) }; KJUR.crypto.Util.getRandomHexOfNbits = function (d) { var c = d % 8; var a = (d - c) / 8; var b = new Array(a + 1); KJUR.crypto.Util.SECURERANDOMGEN.nextBytes(b); b[0] = (((255 << c) & 255) ^ 255) & b[0]; return BAtohex(b) }; KJUR.crypto.Util.getRandomBigIntegerOfNbits = function (a) { return new BigInteger(KJUR.crypto.Util.getRandomHexOfNbits(a), 16) }; KJUR.crypto.Util.getRandomBigIntegerZeroToMax = function (b) { var a = b.bitLength(); while (1) { var c = KJUR.crypto.Util.getRandomBigIntegerOfNbits(a); if (b.compareTo(c) != -1) { return c } } }; KJUR.crypto.Util.getRandomBigIntegerMinToMax = function (e, b) { var c = e.compareTo(b); if (c == 1) { throw \"biMin is greater than biMax\" } if (c == 0) { return e } var a = b.subtract(e); var d = KJUR.crypto.Util.getRandomBigIntegerZeroToMax(a); return d.add(e) }; KJUR.crypto.MessageDigest = function (c) { var b = null; var a = null; var d = null; this.setAlgAndProvider = function (g, f) { g = KJUR.crypto.MessageDigest.getCanonicalAlgName(g); if (g !== null && f === undefined) { f = KJUR.crypto.Util.DEFAULTPROVIDER[g] } if (\":md5:sha1:sha224:sha256:sha384:sha512:ripemd160:\".indexOf(g) != -1 && f == \"cryptojs\") { try { this.md = KJUR.crypto.Util.CRYPTOJSMESSAGEDIGESTNAME[g].create() } catch (e) { throw \"setAlgAndProvider hash alg set fail alg=\" + g + \"/\" + e } this.updateString = function (h) { this.md.update(h) }; this.updateHex = function (h) { var i = CryptoJS.enc.Hex.parse(h); this.md.update(i) }; this.digest = function () { var h = this.md.finalize(); return h.toString(CryptoJS.enc.Hex) }; this.digestString = function (h) { this.updateString(h); return this.digest() }; this.digestHex = function (h) { this.updateHex(h); return this.digest() } } if (\":sha256:\".indexOf(g) != -1 && f == \"sjcl\") { try { this.md = new sjcl.hash.sha256() } catch (e) { throw \"setAlgAndProvider hash alg set fail alg=\" + g + \"/\" + e } this.updateString = function (h) { this.md.update(h) }; this.updateHex = function (i) { var h = sjcl.codec.hex.toBits(i); this.md.update(h) }; this.digest = function () { var h = this.md.finalize(); return sjcl.codec.hex.fromBits(h) }; this.digestString = function (h) { this.updateString(h); return this.digest() }; this.digestHex = function (h) { this.updateHex(h); return this.digest() } } }; this.updateString = function (e) { throw \"updateString(str) not supported for this alg/prov: \" + this.algName + \"/\" + this.provName }; this.updateHex = function (e) { throw \"updateHex(hex) not supported for this alg/prov: \" + this.algName + \"/\" + this.provName }; this.digest = function () { throw \"digest() not supported for this alg/prov: \" + this.algName + \"/\" + this.provName }; this.digestString = function (e) { throw \"digestString(str) not supported for this alg/prov: \" + this.algName + \"/\" + this.provName }; this.digestHex = function (e) { throw \"digestHex(hex) not supported for this alg/prov: \" + this.algName + \"/\" + this.provName }; if (c !== undefined) { if (c.alg !== undefined) { this.algName = c.alg; if (c.prov === undefined) { this.provName = KJUR.crypto.Util.DEFAULTPROVIDER[this.algName] } this.setAlgAndProvider(this.algName, this.provName) } } }; KJUR.crypto.MessageDigest.getCanonicalAlgName = function (a) { if (typeof a === \"string\") { a = a.toLowerCase(); a = a.replace(/-/, \"\") } return a }; KJUR.crypto.MessageDigest.getHashLength = function (c) { var b = KJUR.crypto.MessageDigest; var a = b.getCanonicalAlgName(c); if (b.HASHLENGTH[a] === undefined) { throw \"not supported algorithm: \" + c } return b.HASHLENGTH[a] }; KJUR.crypto.MessageDigest.HASHLENGTH = { md5: 16, sha1: 20, sha224: 28, sha256: 32, sha384: 48, sha512: 64, ripemd160: 20 }; KJUR.crypto.Mac = function (d) { var f = null; var c = null; var a = null; var e = null; var b = null; this.setAlgAndProvider = function (k, i) { k = k.toLowerCase(); if (k == null) { k = \"hmacsha1\" } k = k.toLowerCase(); if (k.substr(0, 4) != \"hmac\") { throw \"setAlgAndProvider unsupported HMAC alg: \" + k } if (i === undefined) { i = KJUR.crypto.Util.DEFAULTPROVIDER[k] } this.algProv = k + \"/\" + i; var g = k.substr(4); if (\":md5:sha1:sha224:sha256:sha384:sha512:ripemd160:\".indexOf(g) != -1 && i == \"cryptojs\") { try { var j = KJUR.crypto.Util.CRYPTOJSMESSAGEDIGESTNAME[g]; this.mac = CryptoJS.algo.HMAC.create(j, this.pass) } catch (h) { throw \"setAlgAndProvider hash alg set fail hashAlg=\" + g + \"/\" + h } this.updateString = function (l) { this.mac.update(l) }; this.updateHex = function (l) { var m = CryptoJS.enc.Hex.parse(l); this.mac.update(m) }; this.doFinal = function () { var l = this.mac.finalize(); return l.toString(CryptoJS.enc.Hex) }; this.doFinalString = function (l) { this.updateString(l); return this.doFinal() }; this.doFinalHex = function (l) { this.updateHex(l); return this.doFinal() } } }; this.updateString = function (g) { throw \"updateString(str) not supported for this alg/prov: \" + this.algProv }; this.updateHex = function (g) { throw \"updateHex(hex) not supported for this alg/prov: \" + this.algProv }; this.doFinal = function () { throw \"digest() not supported for this alg/prov: \" + this.algProv }; this.doFinalString = function (g) { throw \"digestString(str) not supported for this alg/prov: \" + this.algProv }; this.doFinalHex = function (g) { throw \"digestHex(hex) not supported for this alg/prov: \" + this.algProv }; this.setPassword = function (h) { if (typeof h == \"string\") { var g = h; if (h.length % 2 == 1 || !h.match(/^[0-9A-Fa-f]+$/)) { g = rstrtohex(h) } this.pass = CryptoJS.enc.Hex.parse(g); return } if (typeof h != \"object\") { throw \"KJUR.crypto.Mac unsupported password type: \" + h } var g = null; if (h.hex !== undefined) { if (h.hex.length % 2 != 0 || !h.hex.match(/^[0-9A-Fa-f]+$/)) { throw \"Mac: wrong hex password: \" + h.hex } g = h.hex } if (h.utf8 !== undefined) { g = utf8tohex(h.utf8) } if (h.rstr !== undefined) { g = rstrtohex(h.rstr) } if (h.b64 !== undefined) { g = b64tohex(h.b64) } if (h.b64u !== undefined) { g = b64utohex(h.b64u) } if (g == null) { throw \"KJUR.crypto.Mac unsupported password type: \" + h } this.pass = CryptoJS.enc.Hex.parse(g) }; if (d !== undefined) { if (d.pass !== undefined) { this.setPassword(d.pass) } if (d.alg !== undefined) { this.algName = d.alg; if (d.prov === undefined) { this.provName = KJUR.crypto.Util.DEFAULTPROVIDER[this.algName] } this.setAlgAndProvider(this.algName, this.provName) } } }; KJUR.crypto.Signature = function (o) { var q = null; var n = null; var r = null; var c = null; var l = null; var d = null; var k = null; var h = null; var p = null; var e = null; var b = -1; var g = null; var j = null; var a = null; var i = null; var f = null; this._setAlgNames = function () { var s = this.algName.match(/^(.+)with(.+)$/); if (s) { this.mdAlgName = s[1].toLowerCase(); this.pubkeyAlgName = s[2].toLowerCase() } }; this._zeroPaddingOfSignature = function (x, w) { var v = \"\"; var t = w / 4 - x.length; for (var u = 0; u < t; u++) { v = v + \"0\" } return v + x }; this.setAlgAndProvider = function (u, t) { this._setAlgNames(); if (t != \"cryptojs/jsrsa\") { throw \"provider not supported: \" + t } if (\":md5:sha1:sha224:sha256:sha384:sha512:ripemd160:\".indexOf(this.mdAlgName) != -1) { try { this.md = new KJUR.crypto.MessageDigest({ alg: this.mdAlgName }) } catch (s) { throw \"setAlgAndProvider hash alg set fail alg=\" + this.mdAlgName + \"/\" + s } this.init = function (w, x) { var y = null; try { if (x === undefined) { y = KEYUTIL.getKey(w) } else { y = KEYUTIL.getKey(w, x) } } catch (v) { throw \"init failed:\" + v } if (y.isPrivate === true) { this.prvKey = y; this.state = \"SIGN\" } else { if (y.isPublic === true) { this.pubKey = y; this.state = \"VERIFY\" } else { throw \"init failed.:\" + y } } }; this.updateString = function (v) { this.md.updateString(v) }; this.updateHex = function (v) { this.md.updateHex(v) }; this.sign = function () { this.sHashHex = this.md.digest(); if (typeof this.ecprvhex != \"undefined\" && typeof this.eccurvename != \"undefined\") { var v = new KJUR.crypto.ECDSA({ curve: this.eccurvename }); this.hSign = v.signHex(this.sHashHex, this.ecprvhex) } else { if (this.prvKey instanceof RSAKey && this.pubkeyAlgName === \"rsaandmgf1\") { this.hSign = this.prvKey.signWithMessageHashPSS(this.sHashHex, this.mdAlgName, this.pssSaltLen) } else { if (this.prvKey instanceof RSAKey && this.pubkeyAlgName === \"rsa\") { this.hSign = this.prvKey.signWithMessageHash(this.sHashHex, this.mdAlgName) } else { if (this.prvKey instanceof KJUR.crypto.ECDSA) { this.hSign = this.prvKey.signWithMessageHash(this.sHashHex) } else { if (this.prvKey instanceof KJUR.crypto.DSA) { this.hSign = this.prvKey.signWithMessageHash(this.sHashHex) } else { throw \"Signature: unsupported private key alg: \" + this.pubkeyAlgName } } } } } return this.hSign }; this.signString = function (v) { this.updateString(v); return this.sign() }; this.signHex = function (v) { this.updateHex(v); return this.sign() }; this.verify = function (v) { this.sHashHex = this.md.digest(); if (typeof this.ecpubhex != \"undefined\" && typeof this.eccurvename != \"undefined\") { var w = new KJUR.crypto.ECDSA({ curve: this.eccurvename }); return w.verifyHex(this.sHashHex, v, this.ecpubhex) } else { if (this.pubKey instanceof RSAKey && this.pubkeyAlgName === \"rsaandmgf1\") { return this.pubKey.verifyWithMessageHashPSS(this.sHashHex, v, this.mdAlgName, this.pssSaltLen) } else { if (this.pubKey instanceof RSAKey && this.pubkeyAlgName === \"rsa\") { return this.pubKey.verifyWithMessageHash(this.sHashHex, v) } else { if (KJUR.crypto.ECDSA !== undefined && this.pubKey instanceof KJUR.crypto.ECDSA) { return this.pubKey.verifyWithMessageHash(this.sHashHex, v) } else { if (KJUR.crypto.DSA !== undefined && this.pubKey instanceof KJUR.crypto.DSA) { return this.pubKey.verifyWithMessageHash(this.sHashHex, v) } else { throw \"Signature: unsupported public key alg: \" + this.pubkeyAlgName } } } } } } } }; this.init = function (s, t) { throw \"init(key, pass) not supported for this alg:prov=\" + this.algProvName }; this.updateString = function (s) { throw \"updateString(str) not supported for this alg:prov=\" + this.algProvName }; this.updateHex = function (s) { throw \"updateHex(hex) not supported for this alg:prov=\" + this.algProvName }; this.sign = function () { throw \"sign() not supported for this alg:prov=\" + this.algProvName }; this.signString = function (s) { throw \"digestString(str) not supported for this alg:prov=\" + this.algProvName }; this.signHex = function (s) { throw \"digestHex(hex) not supported for this alg:prov=\" + this.algProvName }; this.verify = function (s) { throw \"verify(hSigVal) not supported for this alg:prov=\" + this.algProvName }; this.initParams = o; if (o !== undefined) { if (o.alg !== undefined) { this.algName = o.alg; if (o.prov === undefined) { this.provName = KJUR.crypto.Util.DEFAULTPROVIDER[this.algName] } else { this.provName = o.prov } this.algProvName = this.algName + \":\" + this.provName; this.setAlgAndProvider(this.algName, this.provName); this._setAlgNames() } if (o.psssaltlen !== undefined) { this.pssSaltLen = o.psssaltlen } if (o.prvkeypem !== undefined) { if (o.prvkeypas !== undefined) { throw \"both prvkeypem and prvkeypas parameters not supported\" } else { try { var q = KEYUTIL.getKey(o.prvkeypem); this.init(q) } catch (m) { throw \"fatal error to load pem private key: \" + m } } } } }; KJUR.crypto.Cipher = function (a) { }; KJUR.crypto.Cipher.encrypt = function (e, f, d) { if (f instanceof RSAKey && f.isPublic) { var c = KJUR.crypto.Cipher.getAlgByKeyAndName(f, d); if (c === \"RSA\") { return f.encrypt(e) } if (c === \"RSAOAEP\") { return f.encryptOAEP(e, \"sha1\") } var b = c.match(/^RSAOAEP(\\d+)$/); if (b !== null) { return f.encryptOAEP(e, \"sha\" + b[1]) } throw \"Cipher.encrypt: unsupported algorithm for RSAKey: \" + d } else { throw \"Cipher.encrypt: unsupported key or algorithm\" } }; KJUR.crypto.Cipher.decrypt = function (e, f, d) { if (f instanceof RSAKey && f.isPrivate) { var c = KJUR.crypto.Cipher.getAlgByKeyAndName(f, d); if (c === \"RSA\") { return f.decrypt(e) } if (c === \"RSAOAEP\") { return f.decryptOAEP(e, \"sha1\") } var b = c.match(/^RSAOAEP(\\d+)$/); if (b !== null) { return f.decryptOAEP(e, \"sha\" + b[1]) } throw \"Cipher.decrypt: unsupported algorithm for RSAKey: \" + d } else { throw \"Cipher.decrypt: unsupported key or algorithm\" } }; KJUR.crypto.Cipher.getAlgByKeyAndName = function (b, a) { if (b instanceof RSAKey) { if (\":RSA:RSAOAEP:RSAOAEP224:RSAOAEP256:RSAOAEP384:RSAOAEP512:\".indexOf(a) != -1) { return a } if (a === null || a === undefined) { return \"RSA\" } throw \"getAlgByKeyAndName: not supported algorithm name for RSAKey: \" + a } throw \"getAlgByKeyAndName: not supported algorithm name: \" + a }; KJUR.crypto.OID = new function () { this.oidhex2name = { \"2a864886f70d010101\": \"rsaEncryption\", \"2a8648ce3d0201\": \"ecPublicKey\", \"2a8648ce380401\": \"dsa\", \"2a8648ce3d030107\": \"secp256r1\", \"2b8104001f\": \"secp192k1\", \"2b81040021\": \"secp224r1\", \"2b8104000a\": \"secp256k1\", \"2b81040023\": \"secp521r1\", \"2b81040022\": \"secp384r1\", \"2a8648ce380403\": \"SHA1withDSA\", \"608648016503040301\": \"SHA224withDSA\", \"608648016503040302\": \"SHA256withDSA\", } };",
					"RSAKey.getPosArrayOfChildrenFromHex = function (a) { return ASN1HEX.getChildIdx(a, 0) }; RSAKey.getHexValueArrayOfChildrenFromHex = function (f) { var n = ASN1HEX; var i = n.getV; var k = RSAKey.getPosArrayOfChildrenFromHex(f); var e = i(f, k[0]); var j = i(f, k[1]); var b = i(f, k[2]); var c = i(f, k[3]); var h = i(f, k[4]); var g = i(f, k[5]); var m = i(f, k[6]); var l = i(f, k[7]); var d = i(f, k[8]); var k = new Array(); k.push(e, j, b, c, h, g, m, l, d); return k }; RSAKey.prototype.readPrivateKeyFromPEMString = function (d) { var c = pemtohex(d); var b = RSAKey.getHexValueArrayOfChildrenFromHex(c); this.setPrivateEx(b[1], b[2], b[3], b[4], b[5], b[6], b[7], b[8]) }; RSAKey.prototype.readPKCS5PrvKeyHex = function (c) { var b = RSAKey.getHexValueArrayOfChildrenFromHex(c); this.setPrivateEx(b[1], b[2], b[3], b[4], b[5], b[6], b[7], b[8]) }; RSAKey.prototype.readPKCS8PrvKeyHex = function (e) { var c, j, l, b, a, f, d, k; var m = ASN1HEX; var g = m.getVbyList; if (m.isASN1HEX(e) === false) { throw \"not ASN.1 hex string\" } try { c = g(e, 0, [2, 0, 1], \"02\"); j = g(e, 0, [2, 0, 2], \"02\"); l = g(e, 0, [2, 0, 3], \"02\"); b = g(e, 0, [2, 0, 4], \"02\"); a = g(e, 0, [2, 0, 5], \"02\"); f = g(e, 0, [2, 0, 6], \"02\"); d = g(e, 0, [2, 0, 7], \"02\"); k = g(e, 0, [2, 0, 8], \"02\") } catch (i) { throw \"malformed PKCS#8 plain RSA private key\" } this.setPrivateEx(c, j, l, b, a, f, d, k) }; RSAKey.prototype.readPKCS5PubKeyHex = function (c) { var e = ASN1HEX; var b = e.getV; if (e.isASN1HEX(c) === false) { throw \"keyHex is not ASN.1 hex string\" } var a = e.getChildIdx(c, 0); if (a.length !== 2 || c.substr(a[0], 2) !== \"02\" || c.substr(a[1], 2) !== \"02\") { throw \"wrong hex for PKCS#5 public key\" } var f = b(c, a[0]); var d = b(c, a[1]); this.setPublic(f, d) }; RSAKey.prototype.readPKCS8PubKeyHex = function (b) { var c = ASN1HEX; if (c.isASN1HEX(b) === false) { throw \"not ASN.1 hex string\" } if (c.getTLVbyList(b, 0, [0, 0]) !== \"06092a864886f70d010101\") { throw \"not PKCS8 RSA public key\" } var a = c.getTLVbyList(b, 0, [1, 0]); this.readPKCS5PubKeyHex(a) }; RSAKey.prototype.readCertPubKeyHex = function (b, d) { var a, c; a = new X509(); a.readCertHex(b); c = a.getPublicKeyHex(); this.readPKCS8PubKeyHex(c) };",
					"var _RE_HEXDECONLY = new RegExp(\"\"); _RE_HEXDECONLY.compile(\"[^0-9a-f]\", \"gi\"); function _rsasign_getHexPaddedDigestInfoForString(d, e, a) { var b = function (f) { return KJUR.crypto.Util.hashString(f, a) }; var c = b(d); return KJUR.crypto.Util.getPaddedDigestInfoHex(c, a, e) } function _zeroPaddingOfSignature(e, d) { var c = \"\"; var a = d / 4 - e.length; for (var b = 0; b < a; b++) { c = c + \"0\" } return c + e } RSAKey.prototype.sign = function (d, a) { var b = function (e) { return KJUR.crypto.Util.hashString(e, a) }; var c = b(d); return this.signWithMessageHash(c, a) }; RSAKey.prototype.signWithMessageHash = function (e, c) { var f = KJUR.crypto.Util.getPaddedDigestInfoHex(e, c, this.n.bitLength()); var b = parseBigInt(f, 16); var d = this.doPrivate(b); var a = d.toString(16); return _zeroPaddingOfSignature(a, this.n.bitLength()) }; function pss_mgf1_str(c, a, e) { var b = \"\", d = 0; while (b.length < a) { b += hextorstr(e(rstrtohex(c + String.fromCharCode.apply(String, [(d & 4278190080) >> 24, (d & 16711680) >> 16, (d & 65280) >> 8, d & 255])))); d += 1 } return b } RSAKey.prototype.signPSS = function (e, a, d) { var c = function (f) { return KJUR.crypto.Util.hashHex(f, a) }; var b = c(rstrtohex(e)); if (d === undefined) { d = -1 } return this.signWithMessageHashPSS(b, a, d) }; RSAKey.prototype.signWithMessageHashPSS = function (l, a, k) { var b = hextorstr(l); var g = b.length; var m = this.n.bitLength() - 1; var c = Math.ceil(m / 8); var d; var o = function (i) { return KJUR.crypto.Util.hashHex(i, a) }; if (k === -1 || k === undefined) { k = g } else { if (k === -2) { k = c - g - 2 } else { if (k < -2) { throw \"invalid salt length\" } } } if (c < (g + k + 2)) { throw \"data too long\" } var f = \"\"; if (k > 0) { f = new Array(k); new SecureRandom().nextBytes(f); f = String.fromCharCode.apply(String, f) } var n = hextorstr(o(rstrtohex(\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\" + b + f))); var j = []; for (d = 0; d < c - k - g - 2; d += 1) { j[d] = 0 } var e = String.fromCharCode.apply(String, j) + \"\\x01\" + f; var h = pss_mgf1_str(n, e.length, o); var q = []; for (d = 0; d < e.length; d += 1) { q[d] = e.charCodeAt(d) ^ h.charCodeAt(d) } var p = (65280 >> (8 * c - m)) & 255; q[0] &= ~p; for (d = 0; d < g; d++) { q.push(n.charCodeAt(d)) } q.push(188); return _zeroPaddingOfSignature(this.doPrivate(new BigInteger(q)).toString(16), this.n.bitLength()) }; function _rsasign_getDecryptSignatureBI(a, d, c) { var b = new RSAKey(); b.setPublic(d, c); var e = b.doPublic(a); return e } function _rsasign_getHexDigestInfoFromSig(a, c, b) { var e = _rsasign_getDecryptSignatureBI(a, c, b); var d = e.toString(16).replace(/^1f+00/, \"\"); return d } function _rsasign_getAlgNameAndHashFromHexDisgestInfo(f) { for (var e in KJUR.crypto.Util.DIGESTINFOHEAD) { var d = KJUR.crypto.Util.DIGESTINFOHEAD[e]; var b = d.length; if (f.substring(0, b) == d) { var c = [e, f.substring(b)]; return c } } return [] } RSAKey.prototype.verify = function (f, j) { j = j.replace(_RE_HEXDECONLY, \"\"); j = j.replace(/[ \\n]+/g, \"\"); var b = parseBigInt(j, 16); if (b.bitLength() > this.n.bitLength()) { return 0 } var i = this.doPublic(b); var e = i.toString(16).replace(/^1f+00/, \"\"); var g = _rsasign_getAlgNameAndHashFromHexDisgestInfo(e); if (g.length == 0) { return false } var d = g[0]; var h = g[1]; var a = function (k) { return KJUR.crypto.Util.hashString(k, d) }; var c = a(f); return (h == c) }; RSAKey.prototype.verifyWithMessageHash = function (e, a) { a = a.replace(_RE_HEXDECONLY, \"\"); a = a.replace(/[ \\n]+/g, \"\"); var b = parseBigInt(a, 16); if (b.bitLength() > this.n.bitLength()) { return 0 } var h = this.doPublic(b); var g = h.toString(16).replace(/^1f+00/, \"\"); var c = _rsasign_getAlgNameAndHashFromHexDisgestInfo(g); if (c.length == 0) { return false } var d = c[0]; var f = c[1]; return (f == e) }; RSAKey.prototype.verifyPSS = function (c, b, a, f) { var e = function (g) { return KJUR.crypto.Util.hashHex(g, a) }; var d = e(rstrtohex(c)); if (f === undefined) { f = -1 } return this.verifyWithMessageHashPSS(d, b, a, f) }; RSAKey.prototype.verifyWithMessageHashPSS = function (f, s, l, c) { var k = new BigInteger(s, 16); if (k.bitLength() > this.n.bitLength()) { return false } var r = function (i) { return KJUR.crypto.Util.hashHex(i, l) }; var j = hextorstr(f); var h = j.length; var g = this.n.bitLength() - 1; var m = Math.ceil(g / 8); var q; if (c === -1 || c === undefined) { c = h } else { if (c === -2) { c = m - h - 2 } else { if (c < -2) { throw \"invalid salt length\" } } } if (m < (h + c + 2)) { throw \"data too long\" } var a = this.doPublic(k).toByteArray(); for (q = 0; q < a.length; q += 1) { a[q] &= 255 } while (a.length < m) { a.unshift(0) } if (a[m - 1] !== 188) { throw \"encoded message does not end in 0xbc\" } a = String.fromCharCode.apply(String, a); var d = a.substr(0, m - h - 1); var e = a.substr(d.length, h); var p = (65280 >> (8 * m - g)) & 255; if ((d.charCodeAt(0) & p) !== 0) { throw \"bits beyond keysize not zero\" } var n = pss_mgf1_str(e, d.length, r); var o = []; for (q = 0; q < d.length; q += 1) { o[q] = d.charCodeAt(q) ^ n.charCodeAt(q) } o[0] &= ~p; var b = m - h - c - 2; for (q = 0; q < b; q += 1) { if (o[q] !== 0) { throw \"leftmost octets not zero\" } } if (o[b] !== 1) { throw \"0x01 marker not found\" } return e === hextorstr(r(rstrtohex(\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\" + j + String.fromCharCode.apply(String, o.slice(-c))))) }; RSAKey.SALT_LEN_HLEN = -1; RSAKey.SALT_LEN_MAX = -2; RSAKey.SALT_LEN_RECOVER = -2;",
					"",
					"",
					"//Implementing the above for signing",
					"function calcRSA256Sig(message, key) {",
					"  var rsa;",
					"  if (pm.variables.has(\"key-passphrase\") && key.includes(\"ENCRYPTED\")) {",
					"    rsa = KEYUTIL.getKey(key, pm.variables.get(\"key-passphrase\"));",
					"  } else {",
					"    rsa = new RSAKey();",
					"    rsa.readPrivateKeyFromPEMString(key);",
					"  }",
					"  var hashAlg = \"sha256\";",
					"  var hSig = rsa.sign(message, hashAlg);",
					"",
					"  var hSigBytes = CryptoJS.enc.Hex.parse(hSig);",
					"  //Return value as a base64 string",
					"  return CryptoJS.enc.Base64.stringify(hSigBytes);",
					"}",
					"",
					"function signRequest() {",
					"  var headersToSign = [",
					"    \"(request-target)\",",
					"    \"host\",",
					"    \"date\"",
					"  ];",
					"",
					"  var keyId = pm.variables.get('tenancy-id') + \"/\" + pm.variables.get('user-id') + \"/\" + pm.variables.get('key-fingerprint');",
					"  var nowDate = new Date().toGMTString();",
					"  var hostname = pm.variables.replaceIn(/^https?:\\/\\/([^\\/]+)/.exec(request.url.trim())[1]);",
					"  var reqTarget = pm.variables.replaceIn(request.method.toLowerCase() + \" \" + request.url.trim().replace(/^https?:\\/\\/[^\\/]+/, \"\"));",
					"  var headerSigningValues = {",
					"    \"(request-target)\": reqTarget,",
					"    \"host\": hostname,",
					"    \"date\": nowDate",
					"  };",
					"  //Set environment variables for each of these, so they can be referenced in the call",
					"  //These are being set as environment variables to aid debugging - in theory they could be scoped to the call",
					"  pm.environment.set('request-date', nowDate);",
					"  pm.environment.set('hostname', hostname);",
					"  pm.environment.set('request-target', reqTarget);",
					"",
					"  var methodsThatRequireExtraHeaders = [\"POST\", \"PUT\", \"PATCH\"];",
					"  if (methodsThatRequireExtraHeaders.indexOf(request.method.toUpperCase()) !== -1) {",
					"    var body = request.data && typeof request.data == 'string' ? pm.variables.replaceIn(request.data) : \"\";",
					"    //Calculate the hash of the body, then set a variable for it.",
					"    var sha256digest = CryptoJS.enc.Base64.stringify(CryptoJS.SHA256(body));",
					"    headersToSign = headersToSign.concat([",
					"      \"content-type\",",
					"      \"content-length\",",
					"      \"x-content-sha256\"",
					"    ]);",
					"    headerSigningValues[\"content-type\"] = pm.variables.replaceIn(request.headers[\"content-type\"]);",
					"    headerSigningValues[\"content-length\"] = body.length;",
					"    headerSigningValues[\"x-content-sha256\"] = sha256digest;",
					"    //Set environment variables for these ones too",
					"    pm.environment.set('content-length', body.length);",
					"    pm.environment.set('content-sha256', sha256digest);",
					"  }",
					"  //Establish the signing string",
					"  var signingBase = '';",
					"  headersToSign.forEach(function (h) {",
					"    if (signingBase !== '') {",
					"      signingBase += '\\n';",
					"    }",
					"    signingBase += h.toLowerCase() + \": \" + headerSigningValues[h];",
					"  });",
					"  //Sign it with our private key",
					"  var hash = calcRSA256Sig(signingBase, pm.variables.get('private-key'));",
					"  var signatureOptions = {",
					"    version: \"1\",",
					"    keyId: keyId,",
					"    algorithm: \"rsa-sha256\",",
					"    headers: headersToSign,",
					"    signature: hash",
					"  };",
					"",
					"  //Parametised template for the signature string",
					"  var template = 'Signature version=\"${version}\",keyId=\"${keyId}\",algorithm=\"${algorithm}\",headers=\"${headers}\",signature=\"${signature}\"';",
					"  var signature = template;",
					"  //Fill in the parametised string using the signatureOptions we just built",
					"  Object.keys(signatureOptions).forEach(function (key) {",
					"    var pattern = \"${\" + key + \"}\",",
					"      value = (typeof signatureOptions[key] != 'string') ? signatureOptions[key].join(' ') : signatureOptions[key];",
					"    signature = signature.replace(pattern, value);",
					"  });",
					"  //Set the environment variable for the signature, ready for sending!",
					"  pm.environment.set('auth-signature', signature);",
					"}",
					"",
					"//Validate the environment variables before we sign.",
					"if (!pm.variables.has('private-key')) {",
					"  throw new Error(\"The 'private-key' variable must be set in the environment in order to sign requests!\");",
					"} else if (!pm.variables.get('private-key').startsWith(\"-----BEGIN RSA PRIVATE KEY-----\")) {",
					"  throw new Error(\"The 'private-key' environment variable should be the key in PEM form, i.e. '-----BEGIN RSA PRIVATE KEY-----<key>-----END RSA PRIVATE KEY-----'\");",
					"}",
					"if (pm.variables.get('private-key').includes(\"ENCRYPTED\") && !pm.variables.has(\"key-passphrase\")) {",
					"  throw new Error(\"Your key looks like it is encrypted, but there is no 'key-passphase' variable set.\");",
					"}",
					"if (!pm.variables.has('key-fingerprint')) {",
					"  throw new Error(\"The 'key-fingerprint' variable must be set in the environment in order to sign requests!\");",
					"}",
					"if (!pm.variables.has('tenancy-id')) {",
					"  throw new Error(\"The 'tenancy-id' variable must be set in the environment in order for OCI to be able to validate the signed request!\");",
					"}",
					"if (!pm.variables.has('user-id')) {",
					"  throw new Error(\"The 'user-id' variable must be set in the environment in order for OCI to be able to validate the signed request!\");",
					"}",
					"",
					"",
					"signRequest();"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}