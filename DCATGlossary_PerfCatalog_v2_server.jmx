<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.4.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain"></stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.protocol"></stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">false</boolProp>
        <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
      </CookieManager>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="User-Agent&#x9; Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv" elementType="Header">
            <stringProp name="Header.name">User-Agent</stringProp>
            <stringProp name="Header.value">  Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:48.0) Gecko/20100101 Firefox/48.0</stringProp>
          </elementProp>
          <elementProp name="Accept" elementType="Header">
            <stringProp name="Header.name">Accept</stringProp>
            <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
          </elementProp>
          <elementProp name="Accept-Language" elementType="Header">
            <stringProp name="Header.name">Accept-Language</stringProp>
            <stringProp name="Header.value">fr,en-US;q=0.7,en;q=0.3</stringProp>
          </elementProp>
          <elementProp name="Accept-Encoding" elementType="Header">
            <stringProp name="Header.name">Accept-Encoding</stringProp>
            <stringProp name="Header.value">gzip, deflate</stringProp>
          </elementProp>
          <elementProp name="Content-Type" elementType="Header">
            <stringProp name="Header.name">Content-Type</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Glossary" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Glossary" enabled="false">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DCAT Create Glossary" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
displayName:&quot;OFSA_5k&quot;,&#xd;
description:&quot;&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${Hostname}</stringProp>
            <stringProp name="HTTPSampler.port">${PortNo}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${URL}/glossaries/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout">5000</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="List Glossaries Signature" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;tenancyId&quot;: &quot;${TENANCYID}&quot;, &quot;authUserId&quot;: &quot;${AUTHUSERID}&quot;,&quot;keyFingerprint&quot;: &quot;${FINGERPRINT}&quot;,&quot;privateKeyFilename&quot;: &quot;${PRIVATEKEY}&quot;, &quot;geturl&quot;: &quot;https://${hostname}/20190325/catalogs/${instanceid}/glossaries/&quot;,&quot;restType&quot; : &quot;GET&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${OCIMicroservice}</stringProp>
            <stringProp name="HTTPSampler.port">9080</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/sign/getsignature</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">date7</stringProp>
              <stringProp name="RegexExtractor.regex">date:(.*?);</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">keyid7</stringProp>
              <stringProp name="RegexExtractor.regex">Authorization:(.+);</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SHAPA</stringProp>
              <stringProp name="RegexExtractor.regex">x-content-sha256:(.+?);</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="GlossaryKey" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">GlossaryKey</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..[0].key</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DCAT List Glossaries" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Variables pré-définies" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/20190325/catalogs/${instanceid}/glossaries/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">${keyid7}</stringProp>
                </elementProp>
                <elementProp name="date" elementType="Header">
                  <stringProp name="Header.name">date</stringProp>
                  <stringProp name="Header.value">${date7}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">host</stringProp>
                  <stringProp name="Header.value">${hostname}</stringProp>
                </elementProp>
                <elementProp name="x-content-sha256" elementType="Header">
                  <stringProp name="Header.name">x-content-sha256</stringProp>
                  <stringProp name="Header.value">${SHAPA}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">entityid</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;entityKey&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">${__threadNum}</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Recommendation Entity --&gt; " enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">20</stringProp>
        <stringProp name="ThreadGroup.ramp_time">40</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">3600</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="paasdevdcatqa_glossary" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="OCIMicroservice" elementType="Argument">
              <stringProp name="Argument.name">OCIMicroservice</stringProp>
              <stringProp name="Argument.value">localhost</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="keyd" elementType="Argument">
              <stringProp name="Argument.name">keyd</stringProp>
              <stringProp name="Argument.value">/Users/zameermalim/Documents/Oracle/console-staging.us-ashburn-1.oraclecloud.com/zameer.rashid.malim-01-29-12-08.pem</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TENANCYID" elementType="Argument">
              <stringProp name="Argument.name">TENANCYID</stringProp>
              <stringProp name="Argument.value">ocid1.tenancy.oc1..aaaaaaaahk25msb4bift5w2tlqo6tcepprf54thivzjr2k4vohezlmiooywa</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="AUTHUSERID" elementType="Argument">
              <stringProp name="Argument.name">AUTHUSERID</stringProp>
              <stringProp name="Argument.value">ocid1.user.oc1..aaaaaaaa7mn3ws2ubofutwhfxu5db76tukft2ppsjpx6xqf77ohsvejbtvba</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="FINGERPRINT" elementType="Argument">
              <stringProp name="Argument.name">FINGERPRINT</stringProp>
              <stringProp name="Argument.value">1a:ab:f6:bd:35:dc:60:48:25:00:f9:10:93:1e:0e:a9</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="hostname" elementType="Argument">
              <stringProp name="Argument.name">hostname</stringProp>
              <stringProp name="Argument.value">datacatalog-qa.us-ashburn-1.oci.oraclecloud.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="PRIVATEKEY" elementType="Argument">
              <stringProp name="Argument.name">PRIVATEKEY</stringProp>
              <stringProp name="Argument.value">-----BEGIN PRIVATE KEY-----\n MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCp836eRiGV7Lqn 8VOKaR9hO7yKMHEnAFNaFBzPcFu/TcfUoEMfZEMsgVfoPZAo+ZgXKPpzZ6gPZtRt flJif8d4NQ3KnoxEZ1O7tDES6jRdPtc1TPAoOmga3ns9vcr69DCtiTMmZI7vglL+ nquNI94zoHeIkAwGXeC+WsEwSr2hBf4VMqHoia4RrrdPwNkXFtPvihJ9rShkDVnn z1xqZY82PFDn3zJuNyJOA+3zof0e6HXJ0Y8BSis9rxq50xL9Qdkr2PjCZ2nHq6Pa hZeUej0eDBA3vDkM+P1RpZvwLel6W3koWQwYTMFT1/JJAgpDa3MufwU2ppLTCDxk 7IhXH+xXAgMBAAECggEAQI0seDiCFDyM7zIx/X4NPbTfWYupxtsQTcQa502xg3mr H59Zr2g5PYPJXHxZr76R3qYhbskd4++2Wvpil2gaXxWjreTHuUmX29FG3HzZs9sl Cek1xMnedeowXFSk7unmPVvB8mC6i81v8adZ2KuZf/mAvX2dG6P3s8Wr4EhbO3f5 LJEV9di7N9C/qQuEOfR5Iv7b2KbQSyQwC5+NaI6gXsvOxEQw/hdAPzMfcX9DKkz9 ZSDriSRdm+uSDVdhje4b4X4umKvDbNiURK/Z4TyrM8YZnQ5WrkGfWhrgESAL+30L 8Yaau7Ifteo/onIHQJHgK+des1Mn6njDX/CUwXM0KQKBgQDX5JTYXtY74H9Ck7nd qb2zhtRHm0sVJjd5J8ypkNWfdqcK94ipqr1LV9PawyrmIkM6vFlMU9qveOFod031 6hOVTr+fyS5BRMYLT0PwpAVMKHwqaK3l3pQHQbZ5LB/pAbIPw7DvaVdGiYXt5Ctk RXXm/+4qyuetBwkIX3P1N+x22QKBgQDJhgTdoPoyGbJRXTCDHhH2x2BeRcSntx9k jKe/8hhLt0BEsEM6Y8db0vSUSoNU3Hwt30Ziq8qAW5QhdCmgTwXe4G+DU1HUQGYn Ef0jT4S9CjhRg4y4gWvCCDKzjWChGvozObbkmGg2HfUNa+RLJTUkii6xwpzj8HKN eLDTzy9erwKBgH71gUKsorebkbsJPKhKBbDpfTSO8lyBmOW6rfSZo8ae9CTS5J9C NQd1orRnSXcEdxy3XpwwQ84k/Al+/226NcH8CVxh5r2jQAOunXmKO0NKG5qk7H7d oZeS4Ufo1usjgB8dKZPhEt38SbJYF9xjrK4nm1u27v8lv/4YhAyU0o4hAoGBAI4U 3U1c98lm8KAI8fEfvE6fV0RgMDyHEa0UthjQmWyYsMk89MkwHBiTbTk4J8wm/65f 4wIiWM2Sw6eqfMa3sE3pMvYGQoVBOkSFnFHO+KlHkVl3RDm5lb3hhc2t+djcala/ dEFLav3stR9XWEfa3dL7Udymd3MFzd4Mn69WPfGlAoGAE3R73QJcCiaGF38Xmivg OS+QCroZoQxiTIT3Wr9k1y5ARiJLpo0SGxB1NjafMucOsvTfW2YhuxSYxATTqZLE nHNLvtiTguKYEp68FRLgVEm7gcoMaFmgy+VvjOEGPJ46QrKMwnzIUT2oOXTtnQPq dS6yauJBm8thM4juwTbtr7Q=\n -----END PRIVATE KEY-----</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="instanceid" elementType="Argument">
              <stringProp name="Argument.name">instanceid</stringProp>
              <stringProp name="Argument.value">ocid1.datacatalog.oc1.iad.aaaaaaaaspkqq2z5uwn6zngetdf4flgw7rllqdrpeq5bcwxvinnfan33wxba</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">paasdevdcatqa</stringProp>
        </Arguments>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="paasdevdcatqa_recommendation" enabled="false">
          <collectionProp name="Arguments.arguments">
            <elementProp name="OCIMicroservice" elementType="Argument">
              <stringProp name="Argument.name">OCIMicroservice</stringProp>
              <stringProp name="Argument.value">localhost</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="keyd" elementType="Argument">
              <stringProp name="Argument.name">keyd</stringProp>
              <stringProp name="Argument.value">/Users/zameermalim/Documents/Oracle/console-staging.us-ashburn-1.oraclecloud.com/zameer.rashid.malim-01-29-12-08.pem</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TENANCYID" elementType="Argument">
              <stringProp name="Argument.name">TENANCYID</stringProp>
              <stringProp name="Argument.value">ocid1.tenancy.oc1..aaaaaaaahk25msb4bift5w2tlqo6tcepprf54thivzjr2k4vohezlmiooywa</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="AUTHUSERID" elementType="Argument">
              <stringProp name="Argument.name">AUTHUSERID</stringProp>
              <stringProp name="Argument.value">ocid1.user.oc1..aaaaaaaa7mn3ws2ubofutwhfxu5db76tukft2ppsjpx6xqf77ohsvejbtvba</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="FINGERPRINT" elementType="Argument">
              <stringProp name="Argument.name">FINGERPRINT</stringProp>
              <stringProp name="Argument.value">1a:ab:f6:bd:35:dc:60:48:25:00:f9:10:93:1e:0e:a9</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="hostname" elementType="Argument">
              <stringProp name="Argument.name">hostname</stringProp>
              <stringProp name="Argument.value">datacatalog-qa.us-ashburn-1.oci.oraclecloud.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="PRIVATEKEY" elementType="Argument">
              <stringProp name="Argument.name">PRIVATEKEY</stringProp>
              <stringProp name="Argument.value">-----BEGIN PRIVATE KEY-----\n MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCp836eRiGV7Lqn 8VOKaR9hO7yKMHEnAFNaFBzPcFu/TcfUoEMfZEMsgVfoPZAo+ZgXKPpzZ6gPZtRt flJif8d4NQ3KnoxEZ1O7tDES6jRdPtc1TPAoOmga3ns9vcr69DCtiTMmZI7vglL+ nquNI94zoHeIkAwGXeC+WsEwSr2hBf4VMqHoia4RrrdPwNkXFtPvihJ9rShkDVnn z1xqZY82PFDn3zJuNyJOA+3zof0e6HXJ0Y8BSis9rxq50xL9Qdkr2PjCZ2nHq6Pa hZeUej0eDBA3vDkM+P1RpZvwLel6W3koWQwYTMFT1/JJAgpDa3MufwU2ppLTCDxk 7IhXH+xXAgMBAAECggEAQI0seDiCFDyM7zIx/X4NPbTfWYupxtsQTcQa502xg3mr H59Zr2g5PYPJXHxZr76R3qYhbskd4++2Wvpil2gaXxWjreTHuUmX29FG3HzZs9sl Cek1xMnedeowXFSk7unmPVvB8mC6i81v8adZ2KuZf/mAvX2dG6P3s8Wr4EhbO3f5 LJEV9di7N9C/qQuEOfR5Iv7b2KbQSyQwC5+NaI6gXsvOxEQw/hdAPzMfcX9DKkz9 ZSDriSRdm+uSDVdhje4b4X4umKvDbNiURK/Z4TyrM8YZnQ5WrkGfWhrgESAL+30L 8Yaau7Ifteo/onIHQJHgK+des1Mn6njDX/CUwXM0KQKBgQDX5JTYXtY74H9Ck7nd qb2zhtRHm0sVJjd5J8ypkNWfdqcK94ipqr1LV9PawyrmIkM6vFlMU9qveOFod031 6hOVTr+fyS5BRMYLT0PwpAVMKHwqaK3l3pQHQbZ5LB/pAbIPw7DvaVdGiYXt5Ctk RXXm/+4qyuetBwkIX3P1N+x22QKBgQDJhgTdoPoyGbJRXTCDHhH2x2BeRcSntx9k jKe/8hhLt0BEsEM6Y8db0vSUSoNU3Hwt30Ziq8qAW5QhdCmgTwXe4G+DU1HUQGYn Ef0jT4S9CjhRg4y4gWvCCDKzjWChGvozObbkmGg2HfUNa+RLJTUkii6xwpzj8HKN eLDTzy9erwKBgH71gUKsorebkbsJPKhKBbDpfTSO8lyBmOW6rfSZo8ae9CTS5J9C NQd1orRnSXcEdxy3XpwwQ84k/Al+/226NcH8CVxh5r2jQAOunXmKO0NKG5qk7H7d oZeS4Ufo1usjgB8dKZPhEt38SbJYF9xjrK4nm1u27v8lv/4YhAyU0o4hAoGBAI4U 3U1c98lm8KAI8fEfvE6fV0RgMDyHEa0UthjQmWyYsMk89MkwHBiTbTk4J8wm/65f 4wIiWM2Sw6eqfMa3sE3pMvYGQoVBOkSFnFHO+KlHkVl3RDm5lb3hhc2t+djcala/ dEFLav3stR9XWEfa3dL7Udymd3MFzd4Mn69WPfGlAoGAE3R73QJcCiaGF38Xmivg OS+QCroZoQxiTIT3Wr9k1y5ARiJLpo0SGxB1NjafMucOsvTfW2YhuxSYxATTqZLE nHNLvtiTguKYEp68FRLgVEm7gcoMaFmgy+VvjOEGPJ46QrKMwnzIUT2oOXTtnQPq dS6yauJBm8thM4juwTbtr7Q=\n -----END PRIVATE KEY-----</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="instanceid" elementType="Argument">
              <stringProp name="Argument.name">instanceid</stringProp>
              <stringProp name="Argument.value">ocid1.datacatalog.oc1.iad.aaaaaaaamioppqjmrk6cv4c5qji7d2zw3bvzg6xdf575gj4nkzqyjw52i4ea</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">paasdevdcatqa</stringProp>
        </Arguments>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="paasdevdcatinfra" enabled="false">
          <collectionProp name="Arguments.arguments">
            <elementProp name="OCIMicroservice" elementType="Argument">
              <stringProp name="Argument.name">OCIMicroservice</stringProp>
              <stringProp name="Argument.value">localhost</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="keyd" elementType="Argument">
              <stringProp name="Argument.name">keyd</stringProp>
              <stringProp name="Argument.value">/Users/zameermalim/Documents/Oracle/consoleStagingUsashburn1oraclecloud/zameer.rashid.malim-02-17-08-30paasdecdcatinfra.pem</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TENANCYID" elementType="Argument">
              <stringProp name="Argument.name">TENANCYID</stringProp>
              <stringProp name="Argument.value">ocid1.tenancy.oc1..aaaaaaaarmzlx7mdssig6ml73hvndduyimqicw6xi275xn2opyr4rioqjs2q</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="AUTHUSERID" elementType="Argument">
              <stringProp name="Argument.name">AUTHUSERID</stringProp>
              <stringProp name="Argument.value">ocid1.user.oc1..aaaaaaaasirrtdkxxp7votndbprqhru52mvgy5qihqtkgjlgpc2ubsdj2jkq</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="FINGERPRINT" elementType="Argument">
              <stringProp name="Argument.name">FINGERPRINT</stringProp>
              <stringProp name="Argument.value">58:e5:b3:f2:1e:ae:ca:23:7c:75:8d:52:3b:e9:0b:08</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="hostname" elementType="Argument">
              <stringProp name="Argument.name">hostname</stringProp>
              <stringProp name="Argument.value">datacatalog-devn.us-phoenix-1.oci.oraclecloud.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="PRIVATEKEY" elementType="Argument">
              <stringProp name="Argument.name">PRIVATEKEY</stringProp>
              <stringProp name="Argument.value">-----BEGIN PRIVATE KEY-----\nMIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQC39SYdrHrTu+WJ nFoVHzqxfWR47vWSmUT8FFU28Vc3oCuZGWwZ+K77Sozm6n6Z4/LG4eOVEnqV2nYr Hr3+JIm/UzAhJfKsudrSOeKhLXWo9KzY7J5AXMLscoKs4Pt2uiPZWdODaAbp+Xqb wNR20VidT8oeCxH5PYEpuFNX70x7syaTJWRBItWNL+pj1mGnfQRRSoQVbdu+jt6z euLR9/Vgwv3CunOZqxuQWeUUUsSkNo4/3PYG+LvR3CPcCpRWqwcIC3uW0+PxEWkF a/vLXjE6dSE9DBaG7S/2y79MF7dW0Db38ztSpFWWEiMuB3VokMOehpV9z1t+bW1j 7szd9a87AgMBAAECggEAWT8LDexm7qBC/R8oqQSsof12qCEubMAFMtLegLhXmvoP DMjDpFn88pc5grITV6+6Ufi3Q9RiOp9xIvxYKpspZPQD7qENefT1D3bb11xJr/18 egVZxVn7i2EGur6v4Orvh3xH3IG0kQDjFftYWIi6GB/kq+ys/KF1L3tom8nR7lSq B/z2iezJjYf/u5vDev9PyfxReKANYbeXYVStHrPpr4NL7tC2GRrHT/nFRfR4YBbw Iv56XUt70NM+2tDTRGi77x7ShNS/2nt8cP+Om85w7BMANGaEwVJaGjIqOTtmdlT7 kFjYxW81s8qXesosZGGdJSTKmvCTJtSIeNMU1QNv4QKBgQDnntV4ocblf9ynPtPe B2CAXk3X9QNexT6v5zjzjIyhjhsWBJgDReZkM588ArlwTDgR9amdCrR8mmUK3I0W YfR7OLI+xeffT3tQBTiZ2zlrHE3+4iHG2qUrnMJbOzRVzFp6QNBBMhJQ6UPJ0rCg qKls/okT10toQqGaPKlTWJpqiwKBgQDLUgIri35GGtLD1g1RlCgOGIXJf86Pq+fR Q2eGGz6rlOiQW6aEgYbL1uEGMg6S7JVezCXsN+wGXrlnrXSJubYJPyegary3tFwg fB9it1TP0udGXds4p6BrgQ9/p9FvvvoOxDFnj+I1/a6LCj8X8ZLlr/kg32PtomyW mkaUnR1UEQKBgDmN6WOxZ3gNvqm8Xe81DBC53kQEeRLqlnolTayPRz65zhc5iwB9 NRO/FBlYX/X8qo4j6kLArzqrLuJ1DYX7T0HzQ69/g++kk3K96WOp6umnveXRES2V lSdyK4V5/7Y2MmFgi583rv92B0c2WHeDkZ4o3a0VeYJt1DQ8UKMKSEyjAoGBALCo lcgeEN56yexsnO/n6hGtTvlwOhrtQ6O4jEeifoZ5AMUFTR7OqD+OecB3V+Bi/bn7 aWvgfwxd23xw4tQT704DeLvSYhy/8lgrYN3V6zQTzO1/+U01oJYn8j55oukUJ5MS 9tZD10oQHEsk4QM92+QETVM5pkrAmNcWPwM7rFLxAoGBAInNWXs54xAgkwOVsBOx x9YvEYPBoXPxVkfoGUeal3a0Cs2iggze9vvcUMkM0vB2MWfnORJzUjF9XoQMCMwz rbchcn+uW4WrdkpDvXuoN3G+/mQqlPUomz4ZlVUthclL3PlEvf2QBF8VTgpiua5K 1GrxXWEe8M/HEz8TPP8+SsTF\n -----END PRIVATE KEY-----</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="instanceid" elementType="Argument">
              <stringProp name="Argument.name">instanceid</stringProp>
              <stringProp name="Argument.value">ocid1.datacatalog.oc1.phx.aaaaaaaagqp6u4kkpvjlnn2mcg2xzswdcsnvi3drqdgqfpyjrrtnpm4wqm5a</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">paasdevdcatinfra</stringProp>
        </Arguments>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="dcatpreprod" enabled="false">
          <collectionProp name="Arguments.arguments">
            <elementProp name="OCIMicroservice" elementType="Argument">
              <stringProp name="Argument.name">OCIMicroservice</stringProp>
              <stringProp name="Argument.value">localhost</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="keyd" elementType="Argument">
              <stringProp name="Argument.name">keyd</stringProp>
              <stringProp name="Argument.value">/Users/zameermalim/Documents/Oracle/console-staging.us-ashburn-1.oraclecloud.com/zameer.rashid.malim-01-29-12-08.pem</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TENANCYID" elementType="Argument">
              <stringProp name="Argument.name">TENANCYID</stringProp>
              <stringProp name="Argument.value">ocid1.tenancy.oc1..aaaaaaaao6ootzd3fq4ebh2pr57yijfgxj6wnkncytdqlrwrdekiva5nqr7a</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="AUTHUSERID" elementType="Argument">
              <stringProp name="Argument.name">AUTHUSERID</stringProp>
              <stringProp name="Argument.value">ocid1.user.oc1..aaaaaaaahwllyvnbvm7sivnrlrzptqk3tb54wz3uxfjheliwkk5nemkdx3vq</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="FINGERPRINT" elementType="Argument">
              <stringProp name="Argument.name">FINGERPRINT</stringProp>
              <stringProp name="Argument.value">48:b4:70:c6:81:8c:4d:f9:4d:1e:a5:72:fd:10:54:0c</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="hostname" elementType="Argument">
              <stringProp name="Argument.name">hostname</stringProp>
              <stringProp name="Argument.value">datacatalog-stage.us-ashburn-1.oci.oraclecloud.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="PRIVATEKEY" elementType="Argument">
              <stringProp name="Argument.name">PRIVATEKEY</stringProp>
              <stringProp name="Argument.value">-----BEGIN PRIVATE KEY-----\nMIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQDAOa6LdKjrlOtR Uf5UeDf3KJVVSqo+d1XvBqFIsbwRvIy8fE1bP1tlbWdgPyreslwJlsXNnnRzyQxs 21a0suztXQarCf7b1Xiit8D0sX+02T2S0Q2+uT+LOZ3ChgyiUIiB6UX1msFluF6t JFhpEcmrxDHhiI/8OennoMftuRNDbxL53IFPzfaroXb0lmELqAqW0pB5ZWOIT8E6 PqnypaGASbnYwhyLqfOIt4kRGSCOTgFDY0QkbimTBsInJTVz6IzlmxONFiHGVrXP V0HmLZ9XZ2s6djQAOJdHduAVR+79c02pLevUuQHW1BbiVAhfaBw4+0WBsP3edHnM nhYnyd6DAgMBAAECggEAXvW/392kOykIrNYkHad8AknWp9loS86ZMaklUOuYnGx4 W/7OGjcs1+jZikb6TyRuakBE/ER8g9x8mmQqq76+Y64yhpk8AW6uFzhOhrMPAxDU paxHrYIHPaibYkblg+Pj48WRDXlDdBRGFSOg11r1tTiJacCUXMZhYk9fpPTqasNf fVTcih+rb6q/uLlUMZ5ETENpLD75h6HKZ1CAubzzpdokVG+2A+b79XR9mFIqtQd0 bFiJ5pOomb80FqJ4tCelfCex8Z+4pKw6CsvB+JN2MDKc/JNzOuGla+3l7JRjtypm 4X4rfUnkCzH8gevkJcSvYN3Jl52dCfgEcwQ+XuBvsQKBgQDo6xVC09BcYDTZrtPG Bii+qUKflvc/UFqwjhXaYX/5oHSaVkZm7b/tuXY+pim4NWjHMBuOEQWv2CBdhcSC KXNiuJbAy3CbMQbj8ShcUXWiJpmV3ivhEBT00BnzSI/ZzodYvlqQ22fReljUAB85 5Ec7RQa2i5BwB0/n8zq82V2M0QKBgQDTRkGpHwMS87xbA6PAk8OfnR3YJUHDlm8g 5bNxl3/HdRIrVpkOtN9slol4pxZVqDEOsqqHmaoKbMg+gs/adEvB7Lzbag6cSA8x Q6l46dUd+whYacXK7myfrKawSDESmOGjLmZ3G6vFdYDt26r1pelnjZdWMDtQlylD Z8eX7DB7EwKBgHA5fLgDSLyJmk1cYCtkolMjSLeOTLkT5W52N29OVRQYzLXkZe2I Flbbam7LLwTTrxVyR4SPDRdp4kZNgp5YjID/gZuJKkuMNs6zTogUs8IaKRw9vRSm 5AIFFsvSpYUDbtFCfm6XWJFlCtGy8Vi6ddvH6XEhE8n2q/iNiDqf3ORRAoGAVejW oEd8/4Lez3+OYat0O34u+YpE0JxmOdFNg14gVmGzbq369PD1fPlFkysWOOR4dkqO by875ptPXaPhkyoA+C0kqm/Y2xGuI9Eoo4Mp5tQCE7mG9Tq4LsGM0le4pKBH+AvR HJPC6DscnxvYy6SYYURBCon4RJAC9mbH0W34VMMCgYBnjz4DbIs4aBdGE5aEVYtx l4TJ3AJJLeXp2gGqNe2QA/VHxRFFvM+9rVj0JrEmgZWbAr6ygh8s1Pb5mL3dJJqw YS4ekN0fllolB210Q5e9spxDBn+yj83keKqc0rdDHLfoMZdbuMi+0Mf3j4Da7nLn 7AOGr6UkQ7cgOaTLq///qg==\n -----END PRIVATE KEY-----</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="instanceid" elementType="Argument">
              <stringProp name="Argument.name">instanceid</stringProp>
              <stringProp name="Argument.value">ocid1.datacatalog.oc1.iad.aaaaaaaaynl3vtqxl643aoiufg5nemlegot7badraf7bbycfqkfievz4dqua</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">dcatpreprod</stringProp>
        </Arguments>
        <hashTree/>
        <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="OffsetValue" enabled="true">
          <stringProp name="maximumValue">9990</stringProp>
          <stringProp name="minimumValue">10</stringProp>
          <stringProp name="outputFormat"></stringProp>
          <boolProp name="perThread">true</boolProp>
          <stringProp name="randomSeed"></stringProp>
          <stringProp name="variableName">OffsetValue</stringProp>
        </RandomVariableConfig>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="dcatdemo" enabled="false">
          <collectionProp name="Arguments.arguments">
            <elementProp name="OCIMicroservice" elementType="Argument">
              <stringProp name="Argument.name">OCIMicroservice</stringProp>
              <stringProp name="Argument.value">localhost</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="keyd" elementType="Argument">
              <stringProp name="Argument.name">keyd</stringProp>
              <stringProp name="Argument.value">/Users/zameermalim/Documents/Oracle/console-staging.us-ashburn-1.oraclecloud.com/zameer.rashid.malim-01-29-12-08.pem</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TENANCYID" elementType="Argument">
              <stringProp name="Argument.name">TENANCYID</stringProp>
              <stringProp name="Argument.value">ocid1.tenancy.oc1..aaaaaaaakydcqlqxuodjzygfaec6s5yyeo7jkscv5sxtzigs3hthgav3cyka</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="AUTHUSERID" elementType="Argument">
              <stringProp name="Argument.name">AUTHUSERID</stringProp>
              <stringProp name="Argument.value">ocid1.user.oc1..aaaaaaaaxt3uu6ml4hscfhugt2rdylprpvmfzfejqdhpxoarmswhi2euumba</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="FINGERPRINT" elementType="Argument">
              <stringProp name="Argument.name">FINGERPRINT</stringProp>
              <stringProp name="Argument.value">ce:39:89:6f:cf:25:8f:a4:5e:ca:44:c5:34:19:3c:c2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="hostname" elementType="Argument">
              <stringProp name="Argument.name">hostname</stringProp>
              <stringProp name="Argument.value">datacatalog-stage.eu-amsterdam-1.oci.oraclecloud.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="PRIVATEKEY" elementType="Argument">
              <stringProp name="Argument.name">PRIVATEKEY</stringProp>
              <stringProp name="Argument.value">-----BEGIN PRIVATE KEY-----\n MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQDAlUOJMt51tTMn B9BgzaYpFLcn7WLoBSos98fYRZirnCCUCALcDbsPM7Z5AqTloDOxbrITA5e0o27m 7IpG5EgSS2x/y/myznagIwaBqMdpPStHOQgDXTKBjyGRy6d5fgfBEncxpfgX5udz b3Xhl2y7OpzYtF2vdQ1vVV+9WhY4X201HPiQ1r4YNG0gLYkittNavVir9+HTjsga HH2nI52MZ++k7Z9cdzJawilmB14NmK6bvz94t8vHNWKT665WJratLEVYGLCNfhRQ 1dcjH2i0veaqsSEnX+23Vr3P92hsbFvFAHbfuORf+ejww1mBlakP/2yo5VEHphlA Ix9xAw4vAgMBAAECggEAV+FFKkxuO2RubTchnar6UfDEC5JF+f6xWkfPiB9qJZVf QG3PcD9LxwogEGRmfup17FfJJugSyDl0GCiEiQkO4lpMrpyT20Zf139kLrKoHJvv LdcWkwJqU7jO5sr6J3SdcTtN7PgBmFaj84c/UaxZz65VeIYF4lUVxmI9CBkd3qbS ICa8C9/G0i+iGfEd1O4VTnJId3ntlZ951Nx+D4v+9hgeRytbXc6XAIa5/VYxTyf+ 5J3rvTEigmwAdxC3GTxyeyfLLwjsTUYo3wRNMrkxSxD8x/uCsckSRSF+DF/gf9ex GQlO3/8ZCHjpbZ8JvHWn6yYBZ2NyIxPnJ0Da+QRDYQKBgQDrTij4Yf28L4GixQOD S45+dAx1PfFb/xQPnNXgVz6+bjjaauL4CG3sI7NlfT5PrKNC3Z7cHaq/7QmOTFBp Fkgldn6LCOR/MOUtRkHOGt7NFrgmmWU2TaowjHDVm+HOKdp6ItBKmathtXRLQH5X s7dS+SbX0uxO41+lBrQJEVNtNwKBgQDRhTkYunK97K78vqyRLqkBgOoLmJmuDKi+ plg9kzGILiF8d+IgEV6/wnzg8d/sYiVbeR/sPXoJaGcBrHPBY6edDBBWfargYYYj LMZMddpvCKU1y67QzKHLFavBoe3OuBT/bwvcjOE2G5W+gO2LfXFG1AJMgfkh3HSF 1Mz5JociyQKBgCmibsVkMU026q0uRuzYVaIyTnIAP9CTVa1dhspnJYb0YcLj3r0c YLbDql5uxrO6TDjslctExI2pF2PCRQgTFTjruoBHVoba0/Iq2EHrpziKqJLL2Yi+ PTrR3rUtG8sqxKmPt2M7xYNIZAdcpf5Gok1gIGtXutBKkwXUJc7k7eoJAoGAFjc/ D50tb2/6OfhpydcdungV2PbsTKUw+04eCyFhXiQuDsmTY30UA9c2cI+VA7aAaYuV U/JMz1SPn4DOoVHUwvU1gkY+6R3OIEquGAtjBuTux556Qc+A1EzO8nAeDA4+w7rd khwqARe5sAJxrZm2eiEewUgCx5FdlZczyLNKHukCgYAG8QzanU+uEIuN7HH+k0Z5 VJDWVDCVKHfKJQB6Kd3MLWozMw8lOLlIVQhGnZp1D5l1qOyXQ0KNT5bu5uhtKetG 2a8uPnsUrPyhAIXko3X9j0fPXX/b+uUVv8zvWdZo+R6vB77iDkHEp/Ck+vUSH948 U3iS/bsJ2ZKuriiQOzlzRw==\n -----END PRIVATE KEY-----</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="instanceid" elementType="Argument">
              <stringProp name="Argument.name">instanceid</stringProp>
              <stringProp name="Argument.value">ocid1.datacatalog.oc1.eu-amsterdam-1.aaaaaaaavflwxj2xnu5xawsccxtltstg7cgbop57zkf4sqlw3nk5mmjwy2ja</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">dcatdemo</stringProp>
        </Arguments>
        <hashTree/>
        <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="entity and name extraction for offset" enabled="false">
          <stringProp name="maximumValue">9</stringProp>
          <stringProp name="minimumValue">0</stringProp>
          <stringProp name="outputFormat"></stringProp>
          <boolProp name="perThread">true</boolProp>
          <stringProp name="randomSeed"></stringProp>
          <stringProp name="variableName">entityNameCorrelator</stringProp>
        </RandomVariableConfig>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Glossary Signature" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;tenancyId&quot;: &quot;${TENANCYID}&quot;, &quot;authUserId&quot;: &quot;${AUTHUSERID}&quot;,&quot;keyFingerprint&quot;: &quot;${FINGERPRINT}&quot;,&quot;privateKeyFilename&quot;: &quot;${PRIVATEKEY}&quot;, &quot;geturl&quot;: &quot;https://${hostname}/20190325/catalogs/${instanceid}/glossaries/&quot;,&quot;restType&quot; : &quot;GET&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${OCIMicroservice}</stringProp>
          <stringProp name="HTTPSampler.port">9080</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/sign/getsignature</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">date7</stringProp>
            <stringProp name="RegexExtractor.regex">date:(.*?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">keyid7</stringProp>
            <stringProp name="RegexExtractor.regex">Authorization:(.+);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SHAPA</stringProp>
            <stringProp name="RegexExtractor.regex">x-content-sha256:(.+?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DCAT GET Glossary" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Variables pré-définies" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/20190325/catalogs/${instanceid}/glossaries/</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${keyid7}</stringProp>
              </elementProp>
              <elementProp name="date" elementType="Header">
                <stringProp name="Header.name">date</stringProp>
                <stringProp name="Header.value">${date7}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">host</stringProp>
                <stringProp name="Header.value">${hostname}</stringProp>
              </elementProp>
              <elementProp name="x-content-sha256" elementType="Header">
                <stringProp name="Header.name">x-content-sha256</stringProp>
                <stringProp name="Header.value">${SHAPA}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="glossaryid" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">glossaryKey</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..key</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">null</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Terms Signature" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;tenancyId&quot;: &quot;${TENANCYID}&quot;, &quot;authUserId&quot;: &quot;${AUTHUSERID}&quot;,&quot;keyFingerprint&quot;: &quot;${FINGERPRINT}&quot;,&quot;privateKeyFilename&quot;: &quot;${PRIVATEKEY}&quot;, &quot;geturl&quot;: &quot;https://${hostname}/20190325/catalogs/${instanceid}/glossaries/${glossaryKey}/terms&quot;,&quot;restType&quot; : &quot;GET&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${OCIMicroservice}</stringProp>
          <stringProp name="HTTPSampler.port">9080</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/sign/getsignature</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">date7</stringProp>
            <stringProp name="RegexExtractor.regex">date:(.*?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">keyid7</stringProp>
            <stringProp name="RegexExtractor.regex">Authorization:(.+);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SHAPA</stringProp>
            <stringProp name="RegexExtractor.regex">x-content-sha256:(.+?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DCAT GET Terms" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Variables pré-définies" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/20190325/catalogs/${instanceid}/glossaries/${glossaryKey}/terms</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${keyid7}</stringProp>
              </elementProp>
              <elementProp name="date" elementType="Header">
                <stringProp name="Header.name">date</stringProp>
                <stringProp name="Header.value">${date7}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">host</stringProp>
                <stringProp name="Header.value">${hostname}</stringProp>
              </elementProp>
              <elementProp name="x-content-sha256" elementType="Header">
                <stringProp name="Header.name">x-content-sha256</stringProp>
                <stringProp name="Header.value">${SHAPA}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">entityid</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;entityKey&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">${__threadNum}</stringProp>
          </RegexExtractor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="key" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">key</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..items.[*]key</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">null</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="displayName" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">displayName</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.key==&apos;${key}&apos;)].displayName</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">null</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="key, name, dataAssetKey" enabled="false">
            <stringProp name="JSONPostProcessor.referenceNames">key;name;dataAssetKey</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..items.[${entityNameCorrelator}]key;$..items.[${entityNameCorrelator}]name;$..items.[${entityNameCorrelator}]dataAssetKey</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">0;0;0</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="termid" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">termid</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..key</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">null</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Term Signature" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;tenancyId&quot;: &quot;${TENANCYID}&quot;, &quot;authUserId&quot;: &quot;${AUTHUSERID}&quot;,&quot;keyFingerprint&quot;: &quot;${FINGERPRINT}&quot;,&quot;privateKeyFilename&quot;: &quot;${PRIVATEKEY}&quot;, &quot;geturl&quot;: &quot;https://${hostname}/20190325/catalogs/${instanceid}/glossaries/${glossaryKey}/terms/${termid}&quot;,&quot;restType&quot; : &quot;GET&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${OCIMicroservice}</stringProp>
          <stringProp name="HTTPSampler.port">9080</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/sign/getsignature</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">date7</stringProp>
            <stringProp name="RegexExtractor.regex">date:(.*?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">keyid7</stringProp>
            <stringProp name="RegexExtractor.regex">Authorization:(.+);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SHAPA</stringProp>
            <stringProp name="RegexExtractor.regex">x-content-sha256:(.+?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="DCAT GET Term" enabled="false">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DCAT GET Term" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Variables pré-définies" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/20190325/catalogs/${instanceid}/glossaries/${glossaryid}/terms/${termid}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">${keyid7}</stringProp>
                </elementProp>
                <elementProp name="date" elementType="Header">
                  <stringProp name="Header.name">date</stringProp>
                  <stringProp name="Header.value">${date7}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">host</stringProp>
                  <stringProp name="Header.value">${hostname}</stringProp>
                </elementProp>
                <elementProp name="x-content-sha256" elementType="Header">
                  <stringProp name="Header.name">x-content-sha256</stringProp>
                  <stringProp name="Header.value">${SHAPA}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Search Entity Signature 10" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;tenancyId&quot;: &quot;${TENANCYID}&quot;, &quot;authUserId&quot;: &quot;${AUTHUSERID}&quot;,&quot;keyFingerprint&quot;: &quot;${FINGERPRINT}&quot;,&quot;privateKeyFilename&quot;: &quot;${PRIVATEKEY}&quot;, &quot;geturl&quot;: &quot;https://${hostname}/20190325/catalogs/${instanceid}/search?limit=10&quot;, &quot;messageBody&quot;:&quot;{\&quot;facetedQuery\&quot;:\&quot;*\&quot;,\&quot;dimensions\&quot;:[\&quot;customproperties\&quot;,\&quot;DataAssetType\&quot;,\&quot;EntityType\&quot;,\&quot;UpdatedBy\&quot;],\&quot;filters\&quot;:{\&quot;searchStringFilters\&quot;:[{\&quot;field\&quot;:\&quot;CatalogType\&quot;,\&quot;values\&quot;:[\&quot;DataEntity\&quot;]}],\&quot;searchDateFilters\&quot;:[]},\&quot;sort\&quot;:[{\&quot;sortBy\&quot;:\&quot;Relevancy\&quot;,\&quot;sortOrder\&quot;:\&quot;asc\&quot;}]}&quot;, &quot;restType&quot; : &quot;POST&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${OCIMicroservice}</stringProp>
          <stringProp name="HTTPSampler.port">9080</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/sign/getsignature</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">date7</stringProp>
            <stringProp name="RegexExtractor.regex">date:(.*?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">keyid7</stringProp>
            <stringProp name="RegexExtractor.regex">Authorization:(.+);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SHAPA</stringProp>
            <stringProp name="RegexExtractor.regex">x-content-sha256:(.+?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DCAT Entity  Search limit 10" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;facetedQuery&quot;:&quot;*&quot;,&quot;dimensions&quot;:[&quot;customproperties&quot;,&quot;DataAssetType&quot;,&quot;EntityType&quot;,&quot;UpdatedBy&quot;],&quot;filters&quot;:{&quot;searchStringFilters&quot;:[{&quot;field&quot;:&quot;CatalogType&quot;,&quot;values&quot;:[&quot;DataEntity&quot;]}],&quot;searchDateFilters&quot;:[]},&quot;sort&quot;:[{&quot;sortBy&quot;:&quot;Relevancy&quot;,&quot;sortOrder&quot;:&quot;asc&quot;}]}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/20190325/catalogs/${instanceid}/search?limit=10</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${keyid7}</stringProp>
              </elementProp>
              <elementProp name="date" elementType="Header">
                <stringProp name="Header.name">date</stringProp>
                <stringProp name="Header.value">${date7}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">host</stringProp>
                <stringProp name="Header.value">${hostname}</stringProp>
              </elementProp>
              <elementProp name="x-content-sha256" elementType="Header">
                <stringProp name="Header.name">x-content-sha256</stringProp>
                <stringProp name="Header.value">${SHAPA}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">entityid</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;entityKey&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">${__threadNum}</stringProp>
          </RegexExtractor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="entityKey" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">entityKey</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..items.[${entityNameCorrelator}]entityKey</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">0</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="name, dataAssetKey" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">name;dataAssetKey</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.key==&apos;${entityKey}&apos;)].name;$..[?(@.key==&apos;${entityKey}&apos;)].dataAssetKey</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">null;null</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="entityKey match writer to file" enabled="false">
            <stringProp name="TestPlan.comments">This is filter out all the sourcekey that aren&apos;t null and write it out to a file</stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import org.apache.commons.io.FileUtils
import java.text.SimpleDateFormat;
// Get total number of matches. (Returns string)
def resultCount = vars.get(&quot;entityKey&quot;)
log.warn &apos;Output to jmeter console&apos; +  resultCount
// Generate timestamp to create uniue file name.
String fileSuffix = new SimpleDateFormat(&quot;ddMMyyyy&quot;).format(new Date())
// Create file Object
f = new File(&quot;/Users/zameermalim/Documents/Oracle/consoleStagingUsashburn1oraclecloud/entityKey_&quot;+fileSuffix+&quot;.csv&quot;)
records = vars.get(&quot;entityKey&quot;)
FileUtils.writeStringToFile(f,records + System.getProperty(&quot;line.separator&quot;),true)
//for (int i=1; i&lt;=resultCount.toInteger(); i++)
//{
  // Get each matching result one by one.
  //records = vars.get(&quot;ExtractedName_&quot;+i)
// Write result to csv file.
  //FileUtils.writeStringToFile(f,records + System.getProperty(&quot;line.separator&quot;),true)
//}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="entityKey response writer to file" enabled="false">
            <stringProp name="TestPlan.comments">This is filter out all the sourcekey that aren&apos;t null and write it out to a file</stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import org.apache.commons.io.FileUtils
import java.text.SimpleDateFormat;

// Generate timestamp to create uniue file name.
String fileSuffix = new SimpleDateFormat(&quot;ddMMyyyy&quot;).format(new Date())
// Create file Object
f = new File(&quot;/Users/zameermalim/Documents/Oracle/consoleStagingUsashburn1oraclecloud/entityKey&quot;+fileSuffix+&quot;.csv&quot;)
vars.put(&quot;response&quot;, prev.getResponseDataAsString());
records = vars.get(&quot;response&quot;)
FileUtils.writeStringToFile(f,records + System.getProperty(&quot;line.separator&quot;),true)
//for (int i=1; i&lt;=resultCount.toInteger(); i++)
//{
  // Get each matching result one by one.
  //records = vars.get(&quot;ExtractedName_&quot;+i)
// Write result to csv file.
  //FileUtils.writeStringToFile(f,records + System.getProperty(&quot;line.separator&quot;),true)
//}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="name match writer to file" enabled="false">
            <stringProp name="TestPlan.comments">This is filter out all the sourcekey that aren&apos;t null and write it out to a file</stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import org.apache.commons.io.FileUtils
import java.text.SimpleDateFormat;
// Get total number of matches. (Returns string)
def resultCount = vars.get(&quot;name&quot;)
log.warn &apos;Output to jmeter console&apos; +  resultCount
// Generate timestamp to create uniue file name.
String fileSuffix = new SimpleDateFormat(&quot;ddMMyyyy&quot;).format(new Date())
// Create file Object
f = new File(&quot;/Users/zameermalim/Documents/Oracle/consoleStagingUsashburn1oraclecloud/name_&quot;+fileSuffix+&quot;.csv&quot;)
records = vars.get(&quot;name&quot;)
FileUtils.writeStringToFile(f,records + System.getProperty(&quot;line.separator&quot;),true)
//for (int i=1; i&lt;=resultCount.toInteger(); i++)
//{
  // Get each matching result one by one.
  //records = vars.get(&quot;ExtractedName_&quot;+i)
// Write result to csv file.
  //FileUtils.writeStringToFile(f,records + System.getProperty(&quot;line.separator&quot;),true)
//}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Search Entity Signature 10 with offset" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;tenancyId&quot;: &quot;${TENANCYID}&quot;, &quot;authUserId&quot;: &quot;${AUTHUSERID}&quot;,&quot;keyFingerprint&quot;: &quot;${FINGERPRINT}&quot;,&quot;privateKeyFilename&quot;: &quot;${PRIVATEKEY}&quot;, &quot;geturl&quot;: &quot;https://${hostname}/20190325/catalogs/${instanceid}/search?limit=10&amp;page=offset=${OffsetValue}&quot;, &quot;messageBody&quot;:&quot;{\&quot;facetedQuery\&quot;:\&quot;*\&quot;,\&quot;dimensions\&quot;:[\&quot;customproperties\&quot;,\&quot;DataAssetType\&quot;,\&quot;EntityType\&quot;,\&quot;UpdatedBy\&quot;],\&quot;filters\&quot;:{\&quot;searchStringFilters\&quot;:[{\&quot;field\&quot;:\&quot;CatalogType\&quot;,\&quot;values\&quot;:[\&quot;DataEntity\&quot;]}],\&quot;searchDateFilters\&quot;:[]},\&quot;sort\&quot;:[{\&quot;sortBy\&quot;:\&quot;Relevancy\&quot;,\&quot;sortOrder\&quot;:\&quot;asc\&quot;}]}&quot;, &quot;restType&quot; : &quot;POST&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${OCIMicroservice}</stringProp>
          <stringProp name="HTTPSampler.port">9080</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/sign/getsignature</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">date7</stringProp>
            <stringProp name="RegexExtractor.regex">date:(.*?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">keyid7</stringProp>
            <stringProp name="RegexExtractor.regex">Authorization:(.+);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SHAPA</stringProp>
            <stringProp name="RegexExtractor.regex">x-content-sha256:(.+?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DCAT Search Entity  limit 10 with offset" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;facetedQuery&quot;:&quot;*&quot;,&quot;dimensions&quot;:[&quot;customproperties&quot;,&quot;DataAssetType&quot;,&quot;EntityType&quot;,&quot;UpdatedBy&quot;],&quot;filters&quot;:{&quot;searchStringFilters&quot;:[{&quot;field&quot;:&quot;CatalogType&quot;,&quot;values&quot;:[&quot;DataEntity&quot;]}],&quot;searchDateFilters&quot;:[]},&quot;sort&quot;:[{&quot;sortBy&quot;:&quot;Relevancy&quot;,&quot;sortOrder&quot;:&quot;asc&quot;}]}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/20190325/catalogs/${instanceid}/search?limit=10&amp;page=offset=${OffsetValue}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="OffsetValue" enabled="false">
            <stringProp name="maximumValue">9990</stringProp>
            <stringProp name="minimumValue">10</stringProp>
            <stringProp name="outputFormat"></stringProp>
            <boolProp name="perThread">true</boolProp>
            <stringProp name="randomSeed"></stringProp>
            <stringProp name="variableName">OffsetValue</stringProp>
          </RandomVariableConfig>
          <hashTree/>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="entity and name extraction for offset" enabled="false">
            <stringProp name="maximumValue">9</stringProp>
            <stringProp name="minimumValue">0</stringProp>
            <stringProp name="outputFormat"></stringProp>
            <boolProp name="perThread">true</boolProp>
            <stringProp name="randomSeed"></stringProp>
            <stringProp name="variableName">entityNameCorrelator</stringProp>
          </RandomVariableConfig>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${keyid7}</stringProp>
              </elementProp>
              <elementProp name="date" elementType="Header">
                <stringProp name="Header.name">date</stringProp>
                <stringProp name="Header.value">${date7}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">host</stringProp>
                <stringProp name="Header.value">${hostname}</stringProp>
              </elementProp>
              <elementProp name="x-content-sha256" elementType="Header">
                <stringProp name="Header.name">x-content-sha256</stringProp>
                <stringProp name="Header.value">${SHAPA}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">entityid</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;entityKey&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">${__threadNum}</stringProp>
          </RegexExtractor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="entityKey" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">entityKey</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..items.[*]entityKey</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">0</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="name, dataAssetKey" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">name;dataAssetKey</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.key==&apos;${entityKey}&apos;)].name;$..[?(@.key==&apos;${entityKey}&apos;)].dataAssetKey</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">null;null</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="entityKey match writer to file" enabled="false">
            <stringProp name="TestPlan.comments">This is filter out all the sourcekey that aren&apos;t null and write it out to a file</stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import org.apache.commons.io.FileUtils
import java.text.SimpleDateFormat;
// Get total number of matches. (Returns string)
def resultCount = vars.get(&quot;entityKey&quot;)
log.warn &apos;Output to jmeter console&apos; +  resultCount
// Generate timestamp to create uniue file name.
String fileSuffix = new SimpleDateFormat(&quot;ddMMyyyy&quot;).format(new Date())
// Create file Object
f = new File(&quot;/Users/zameermalim/Documents/Oracle/consoleStagingUsashburn1oraclecloud/entityKey_&quot;+fileSuffix+&quot;.csv&quot;)
records = vars.get(&quot;entityKey&quot;)
FileUtils.writeStringToFile(f,records + System.getProperty(&quot;line.separator&quot;),true)
//for (int i=1; i&lt;=resultCount.toInteger(); i++)
//{
  // Get each matching result one by one.
  //records = vars.get(&quot;ExtractedName_&quot;+i)
// Write result to csv file.
  //FileUtils.writeStringToFile(f,records + System.getProperty(&quot;line.separator&quot;),true)
//}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="entityKey response writer to file" enabled="false">
            <stringProp name="TestPlan.comments">This is filter out all the sourcekey that aren&apos;t null and write it out to a file</stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import org.apache.commons.io.FileUtils
import java.text.SimpleDateFormat;

// Generate timestamp to create uniue file name.
String fileSuffix = new SimpleDateFormat(&quot;ddMMyyyy&quot;).format(new Date())
// Create file Object
f = new File(&quot;/Users/zameermalim/Documents/Oracle/consoleStagingUsashburn1oraclecloud/entityKey&quot;+fileSuffix+&quot;.csv&quot;)
vars.put(&quot;response&quot;, prev.getResponseDataAsString());
records = vars.get(&quot;response&quot;)
FileUtils.writeStringToFile(f,records + System.getProperty(&quot;line.separator&quot;),true)
//for (int i=1; i&lt;=resultCount.toInteger(); i++)
//{
  // Get each matching result one by one.
  //records = vars.get(&quot;ExtractedName_&quot;+i)
// Write result to csv file.
  //FileUtils.writeStringToFile(f,records + System.getProperty(&quot;line.separator&quot;),true)
//}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="name match writer to file" enabled="false">
            <stringProp name="TestPlan.comments">This is filter out all the sourcekey that aren&apos;t null and write it out to a file</stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import org.apache.commons.io.FileUtils
import java.text.SimpleDateFormat;
// Get total number of matches. (Returns string)
def resultCount = vars.get(&quot;name&quot;)
log.warn &apos;Output to jmeter console&apos; +  resultCount
// Generate timestamp to create uniue file name.
String fileSuffix = new SimpleDateFormat(&quot;ddMMyyyy&quot;).format(new Date())
// Create file Object
f = new File(&quot;/Users/zameermalim/Documents/Oracle/consoleStagingUsashburn1oraclecloud/name_&quot;+fileSuffix+&quot;.csv&quot;)
records = vars.get(&quot;name&quot;)
FileUtils.writeStringToFile(f,records + System.getProperty(&quot;line.separator&quot;),true)
//for (int i=1; i&lt;=resultCount.toInteger(); i++)
//{
  // Get each matching result one by one.
  //records = vars.get(&quot;ExtractedName_&quot;+i)
// Write result to csv file.
  //FileUtils.writeStringToFile(f,records + System.getProperty(&quot;line.separator&quot;),true)
//}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Search Entity Name filter limit 10 with offset Signature" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;tenancyId&quot;: &quot;${TENANCYID}&quot;, &quot;authUserId&quot;: &quot;${AUTHUSERID}&quot;,&quot;keyFingerprint&quot;: &quot;${FINGERPRINT}&quot;,&quot;privateKeyFilename&quot;: &quot;${PRIVATEKEY}&quot;, &quot;geturl&quot;: &quot;https://${hostname}/20190325/catalogs/${instanceid}/search?limit=10&amp;page=offset=${OffsetValue}&quot;, &quot;messageBody&quot;:&quot;{\&quot;facetedQuery\&quot;:\&quot;MYTABLE\&quot;,\&quot;dimensions\&quot;:[\&quot;customproperties\&quot;,\&quot;DataAssetType\&quot;,\&quot;EntityType\&quot;,\&quot;UpdatedBy\&quot;],\&quot;filters\&quot;:{\&quot;searchStringFilters\&quot;:[{\&quot;field\&quot;:\&quot;CatalogType\&quot;,\&quot;values\&quot;:[\&quot;DataEntity\&quot;]}],\&quot;searchDateFilters\&quot;:[]},\&quot;sort\&quot;:[{\&quot;sortBy\&quot;:\&quot;Relevancy\&quot;,\&quot;sortOrder\&quot;:\&quot;asc\&quot;}]}&quot;, &quot;restType&quot; : &quot;POST&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${OCIMicroservice}</stringProp>
          <stringProp name="HTTPSampler.port">9080</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/sign/getsignature</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">date7</stringProp>
            <stringProp name="RegexExtractor.regex">date:(.*?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">keyid7</stringProp>
            <stringProp name="RegexExtractor.regex">Authorization:(.+);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SHAPA</stringProp>
            <stringProp name="RegexExtractor.regex">x-content-sha256:(.+?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DCAT Search Entity Name filter limit 10 with offset" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;facetedQuery&quot;:&quot;MYTABLE&quot;,&quot;dimensions&quot;:[&quot;customproperties&quot;,&quot;DataAssetType&quot;,&quot;EntityType&quot;,&quot;UpdatedBy&quot;],&quot;filters&quot;:{&quot;searchStringFilters&quot;:[{&quot;field&quot;:&quot;CatalogType&quot;,&quot;values&quot;:[&quot;DataEntity&quot;]}],&quot;searchDateFilters&quot;:[]},&quot;sort&quot;:[{&quot;sortBy&quot;:&quot;Relevancy&quot;,&quot;sortOrder&quot;:&quot;asc&quot;}]}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/20190325/catalogs/${instanceid}/search?limit=10&amp;page=offset=${OffsetValue}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${keyid7}</stringProp>
              </elementProp>
              <elementProp name="date" elementType="Header">
                <stringProp name="Header.name">date</stringProp>
                <stringProp name="Header.value">${date7}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">host</stringProp>
                <stringProp name="Header.value">${hostname}</stringProp>
              </elementProp>
              <elementProp name="x-content-sha256" elementType="Header">
                <stringProp name="Header.name">x-content-sha256</stringProp>
                <stringProp name="Header.value">${SHAPA}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">entityid</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;entityKey&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">${__threadNum}</stringProp>
          </RegexExtractor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="entityKey" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">entityKey</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..items.[*]entityKey</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">0</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="name, dataAssetKey" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">name;dataAssetKey</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.key==&apos;${entityKey}&apos;)].name;$..[?(@.key==&apos;${entityKey}&apos;)].dataAssetKey</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">null;null</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="entityKey match writer to file" enabled="false">
            <stringProp name="TestPlan.comments">This is filter out all the sourcekey that aren&apos;t null and write it out to a file</stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import org.apache.commons.io.FileUtils
import java.text.SimpleDateFormat;
// Get total number of matches. (Returns string)
def resultCount = vars.get(&quot;entityKey&quot;)
log.warn &apos;Output to jmeter console&apos; +  resultCount
// Generate timestamp to create uniue file name.
String fileSuffix = new SimpleDateFormat(&quot;ddMMyyyy&quot;).format(new Date())
// Create file Object
f = new File(&quot;/Users/zameermalim/Documents/Oracle/consoleStagingUsashburn1oraclecloud/entityKey_&quot;+fileSuffix+&quot;.csv&quot;)
records = vars.get(&quot;entityKey&quot;)
FileUtils.writeStringToFile(f,records + System.getProperty(&quot;line.separator&quot;),true)
//for (int i=1; i&lt;=resultCount.toInteger(); i++)
//{
  // Get each matching result one by one.
  //records = vars.get(&quot;ExtractedName_&quot;+i)
// Write result to csv file.
  //FileUtils.writeStringToFile(f,records + System.getProperty(&quot;line.separator&quot;),true)
//}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="entityKey response writer to file" enabled="false">
            <stringProp name="TestPlan.comments">This is filter out all the sourcekey that aren&apos;t null and write it out to a file</stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import org.apache.commons.io.FileUtils
import java.text.SimpleDateFormat;

// Generate timestamp to create uniue file name.
String fileSuffix = new SimpleDateFormat(&quot;ddMMyyyy&quot;).format(new Date())
// Create file Object
f = new File(&quot;/Users/zameermalim/Documents/Oracle/consoleStagingUsashburn1oraclecloud/entityKey&quot;+fileSuffix+&quot;.csv&quot;)
vars.put(&quot;response&quot;, prev.getResponseDataAsString());
records = vars.get(&quot;response&quot;)
FileUtils.writeStringToFile(f,records + System.getProperty(&quot;line.separator&quot;),true)
//for (int i=1; i&lt;=resultCount.toInteger(); i++)
//{
  // Get each matching result one by one.
  //records = vars.get(&quot;ExtractedName_&quot;+i)
// Write result to csv file.
  //FileUtils.writeStringToFile(f,records + System.getProperty(&quot;line.separator&quot;),true)
//}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="name match writer to file" enabled="false">
            <stringProp name="TestPlan.comments">This is filter out all the sourcekey that aren&apos;t null and write it out to a file</stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import org.apache.commons.io.FileUtils
import java.text.SimpleDateFormat;
// Get total number of matches. (Returns string)
def resultCount = vars.get(&quot;name&quot;)
log.warn &apos;Output to jmeter console&apos; +  resultCount
// Generate timestamp to create uniue file name.
String fileSuffix = new SimpleDateFormat(&quot;ddMMyyyy&quot;).format(new Date())
// Create file Object
f = new File(&quot;/Users/zameermalim/Documents/Oracle/consoleStagingUsashburn1oraclecloud/name_&quot;+fileSuffix+&quot;.csv&quot;)
records = vars.get(&quot;name&quot;)
FileUtils.writeStringToFile(f,records + System.getProperty(&quot;line.separator&quot;),true)
//for (int i=1; i&lt;=resultCount.toInteger(); i++)
//{
  // Get each matching result one by one.
  //records = vars.get(&quot;ExtractedName_&quot;+i)
// Write result to csv file.
  //FileUtils.writeStringToFile(f,records + System.getProperty(&quot;line.separator&quot;),true)
//}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Search Entity limit 10 with offset and Data Asset Type Filter Signature" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;tenancyId&quot;: &quot;${TENANCYID}&quot;, &quot;authUserId&quot;: &quot;${AUTHUSERID}&quot;,&quot;keyFingerprint&quot;: &quot;${FINGERPRINT}&quot;,&quot;privateKeyFilename&quot;: &quot;${PRIVATEKEY}&quot;, &quot;geturl&quot;: &quot;https://${hostname}/20190325/catalogs/${instanceid}/search?limit=10&amp;page=offset=${OffsetValue}&quot;, &quot;messageBody&quot;:&quot;{\&quot;facetedQuery\&quot;:\&quot;*\&quot;,\&quot;dimensions\&quot;:[\&quot;customproperties\&quot;,\&quot;DataAssetType\&quot;,\&quot;EntityType\&quot;,\&quot;UpdatedBy\&quot;],\&quot;filters\&quot;:{\&quot;searchStringFilters\&quot;:[{\&quot;field\&quot;:\&quot;CatalogType\&quot;,\&quot;values\&quot;:[\&quot;DataEntity\&quot;]},{\&quot;field\&quot;:\&quot;DataAssetType\&quot;,\&quot;values\&quot;:[\&quot;Oracle Database\&quot;]}],\&quot;searchDateFilters\&quot;:[]},\&quot;sort\&quot;:[{\&quot;sortBy\&quot;:\&quot;Relevancy\&quot;,\&quot;sortOrder\&quot;:\&quot;asc\&quot;}]}&quot;, &quot;restType&quot; : &quot;POST&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${OCIMicroservice}</stringProp>
          <stringProp name="HTTPSampler.port">9080</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/sign/getsignature</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">date7</stringProp>
            <stringProp name="RegexExtractor.regex">date:(.*?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">keyid7</stringProp>
            <stringProp name="RegexExtractor.regex">Authorization:(.+);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SHAPA</stringProp>
            <stringProp name="RegexExtractor.regex">x-content-sha256:(.+?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DCAT Search Entity limit 10 with offset and Data Asset Type Filter" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;facetedQuery&quot;:&quot;*&quot;,&quot;dimensions&quot;:[&quot;customproperties&quot;,&quot;DataAssetType&quot;,&quot;EntityType&quot;,&quot;UpdatedBy&quot;],&quot;filters&quot;:{&quot;searchStringFilters&quot;:[{&quot;field&quot;:&quot;CatalogType&quot;,&quot;values&quot;:[&quot;DataEntity&quot;]},{&quot;field&quot;:&quot;DataAssetType&quot;,&quot;values&quot;:[&quot;Oracle Database&quot;]}],&quot;searchDateFilters&quot;:[]},&quot;sort&quot;:[{&quot;sortBy&quot;:&quot;Relevancy&quot;,&quot;sortOrder&quot;:&quot;asc&quot;}]}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/20190325/catalogs/${instanceid}/search?limit=10&amp;page=offset=${OffsetValue}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${keyid7}</stringProp>
              </elementProp>
              <elementProp name="date" elementType="Header">
                <stringProp name="Header.name">date</stringProp>
                <stringProp name="Header.value">${date7}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">host</stringProp>
                <stringProp name="Header.value">${hostname}</stringProp>
              </elementProp>
              <elementProp name="x-content-sha256" elementType="Header">
                <stringProp name="Header.name">x-content-sha256</stringProp>
                <stringProp name="Header.value">${SHAPA}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="entityKey" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">entityKey</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..items.[*]entityKey</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">0</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">entityid</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;entityKey&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">${__threadNum}</stringProp>
          </RegexExtractor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="name, dataAssetKey" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">name;dataAssetKey</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.key==&apos;${entityKey}&apos;)].name;$..[?(@.key==&apos;${entityKey}&apos;)].dataAssetKey</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">null;null</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="entityKey match writer to file" enabled="false">
            <stringProp name="TestPlan.comments">This is filter out all the sourcekey that aren&apos;t null and write it out to a file</stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import org.apache.commons.io.FileUtils
import java.text.SimpleDateFormat;
// Get total number of matches. (Returns string)
def resultCount = vars.get(&quot;entityKey&quot;)
log.warn &apos;Output to jmeter console&apos; +  resultCount
// Generate timestamp to create uniue file name.
String fileSuffix = new SimpleDateFormat(&quot;ddMMyyyy&quot;).format(new Date())
// Create file Object
f = new File(&quot;/Users/zameermalim/Documents/Oracle/consoleStagingUsashburn1oraclecloud/entityKey_&quot;+fileSuffix+&quot;.csv&quot;)
records = vars.get(&quot;entityKey&quot;)
FileUtils.writeStringToFile(f,records + System.getProperty(&quot;line.separator&quot;),true)
//for (int i=1; i&lt;=resultCount.toInteger(); i++)
//{
  // Get each matching result one by one.
  //records = vars.get(&quot;ExtractedName_&quot;+i)
// Write result to csv file.
  //FileUtils.writeStringToFile(f,records + System.getProperty(&quot;line.separator&quot;),true)
//}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="entityKey response writer to file" enabled="false">
            <stringProp name="TestPlan.comments">This is filter out all the sourcekey that aren&apos;t null and write it out to a file</stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import org.apache.commons.io.FileUtils
import java.text.SimpleDateFormat;

// Generate timestamp to create uniue file name.
String fileSuffix = new SimpleDateFormat(&quot;ddMMyyyy&quot;).format(new Date())
// Create file Object
f = new File(&quot;/Users/zameermalim/Documents/Oracle/consoleStagingUsashburn1oraclecloud/entityKey&quot;+fileSuffix+&quot;.csv&quot;)
vars.put(&quot;response&quot;, prev.getResponseDataAsString());
records = vars.get(&quot;response&quot;)
FileUtils.writeStringToFile(f,records + System.getProperty(&quot;line.separator&quot;),true)
//for (int i=1; i&lt;=resultCount.toInteger(); i++)
//{
  // Get each matching result one by one.
  //records = vars.get(&quot;ExtractedName_&quot;+i)
// Write result to csv file.
  //FileUtils.writeStringToFile(f,records + System.getProperty(&quot;line.separator&quot;),true)
//}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="name match writer to file" enabled="false">
            <stringProp name="TestPlan.comments">This is filter out all the sourcekey that aren&apos;t null and write it out to a file</stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import org.apache.commons.io.FileUtils
import java.text.SimpleDateFormat;
// Get total number of matches. (Returns string)
def resultCount = vars.get(&quot;name&quot;)
log.warn &apos;Output to jmeter console&apos; +  resultCount
// Generate timestamp to create uniue file name.
String fileSuffix = new SimpleDateFormat(&quot;ddMMyyyy&quot;).format(new Date())
// Create file Object
f = new File(&quot;/Users/zameermalim/Documents/Oracle/consoleStagingUsashburn1oraclecloud/name_&quot;+fileSuffix+&quot;.csv&quot;)
records = vars.get(&quot;name&quot;)
FileUtils.writeStringToFile(f,records + System.getProperty(&quot;line.separator&quot;),true)
//for (int i=1; i&lt;=resultCount.toInteger(); i++)
//{
  // Get each matching result one by one.
  //records = vars.get(&quot;ExtractedName_&quot;+i)
// Write result to csv file.
  //FileUtils.writeStringToFile(f,records + System.getProperty(&quot;line.separator&quot;),true)
//}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Search Entity limit 10 with offset and Data Asset Name Filter Signature" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;tenancyId&quot;: &quot;${TENANCYID}&quot;, &quot;authUserId&quot;: &quot;${AUTHUSERID}&quot;,&quot;keyFingerprint&quot;: &quot;${FINGERPRINT}&quot;,&quot;privateKeyFilename&quot;: &quot;${PRIVATEKEY}&quot;, &quot;geturl&quot;: &quot;https://${hostname}/20190325/catalogs/${instanceid}/search?limit=10&amp;page=offset=${OffsetValue}&quot;, &quot;messageBody&quot;:&quot;{\&quot;facetedQuery\&quot;:\&quot;*\&quot;,\&quot;dimensions\&quot;:[\&quot;customproperties\&quot;,\&quot;DataAssetType\&quot;,\&quot;EntityType\&quot;,\&quot;UpdatedBy\&quot;],\&quot;filters\&quot;:{\&quot;searchStringFilters\&quot;:[{\&quot;field\&quot;:\&quot;CatalogType\&quot;,\&quot;values\&quot;:[\&quot;DataEntity\&quot;]},{\&quot;field\&quot;:\&quot;DataAssetName\&quot;,\&quot;values\&quot;:[\&quot;OFSS DB\&quot;]}],\&quot;searchDateFilters\&quot;:[]},\&quot;sort\&quot;:[{\&quot;sortBy\&quot;:\&quot;Relevancy\&quot;,\&quot;sortOrder\&quot;:\&quot;asc\&quot;}]}&quot;, &quot;restType&quot; : &quot;POST&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${OCIMicroservice}</stringProp>
          <stringProp name="HTTPSampler.port">9080</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/sign/getsignature</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">date7</stringProp>
            <stringProp name="RegexExtractor.regex">date:(.*?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">keyid7</stringProp>
            <stringProp name="RegexExtractor.regex">Authorization:(.+);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SHAPA</stringProp>
            <stringProp name="RegexExtractor.regex">x-content-sha256:(.+?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DCAT Search Entity limit 10 with offset and Data Asset Name Filter" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;facetedQuery&quot;:&quot;*&quot;,&quot;dimensions&quot;:[&quot;customproperties&quot;,&quot;DataAssetType&quot;,&quot;EntityType&quot;,&quot;UpdatedBy&quot;],&quot;filters&quot;:{&quot;searchStringFilters&quot;:[{&quot;field&quot;:&quot;CatalogType&quot;,&quot;values&quot;:[&quot;DataEntity&quot;]},{&quot;field&quot;:&quot;DataAssetName&quot;,&quot;values&quot;:[&quot;OFSS DB&quot;]}],&quot;searchDateFilters&quot;:[]},&quot;sort&quot;:[{&quot;sortBy&quot;:&quot;Relevancy&quot;,&quot;sortOrder&quot;:&quot;asc&quot;}]}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/20190325/catalogs/${instanceid}/search?limit=10&amp;page=offset=${OffsetValue}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${keyid7}</stringProp>
              </elementProp>
              <elementProp name="date" elementType="Header">
                <stringProp name="Header.name">date</stringProp>
                <stringProp name="Header.value">${date7}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">host</stringProp>
                <stringProp name="Header.value">${hostname}</stringProp>
              </elementProp>
              <elementProp name="x-content-sha256" elementType="Header">
                <stringProp name="Header.name">x-content-sha256</stringProp>
                <stringProp name="Header.value">${SHAPA}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="entityKey" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">entityKey</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..items.[*]entityKey</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">0</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">entityid</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;entityKey&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">${__threadNum}</stringProp>
          </RegexExtractor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="name, dataAssetKey" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">name;dataAssetKey</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.key==&apos;${entityKey}&apos;)].name;$..[?(@.key==&apos;${entityKey}&apos;)].dataAssetKey</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">null;null</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="entityKey match writer to file" enabled="false">
            <stringProp name="TestPlan.comments">This is filter out all the sourcekey that aren&apos;t null and write it out to a file</stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import org.apache.commons.io.FileUtils
import java.text.SimpleDateFormat;
// Get total number of matches. (Returns string)
def resultCount = vars.get(&quot;entityKey&quot;)
log.warn &apos;Output to jmeter console&apos; +  resultCount
// Generate timestamp to create uniue file name.
String fileSuffix = new SimpleDateFormat(&quot;ddMMyyyy&quot;).format(new Date())
// Create file Object
f = new File(&quot;/Users/zameermalim/Documents/Oracle/consoleStagingUsashburn1oraclecloud/entityKey_&quot;+fileSuffix+&quot;.csv&quot;)
records = vars.get(&quot;entityKey&quot;)
FileUtils.writeStringToFile(f,records + System.getProperty(&quot;line.separator&quot;),true)
//for (int i=1; i&lt;=resultCount.toInteger(); i++)
//{
  // Get each matching result one by one.
  //records = vars.get(&quot;ExtractedName_&quot;+i)
// Write result to csv file.
  //FileUtils.writeStringToFile(f,records + System.getProperty(&quot;line.separator&quot;),true)
//}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="entityKey response writer to file" enabled="false">
            <stringProp name="TestPlan.comments">This is filter out all the sourcekey that aren&apos;t null and write it out to a file</stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import org.apache.commons.io.FileUtils
import java.text.SimpleDateFormat;

// Generate timestamp to create uniue file name.
String fileSuffix = new SimpleDateFormat(&quot;ddMMyyyy&quot;).format(new Date())
// Create file Object
f = new File(&quot;/Users/zameermalim/Documents/Oracle/consoleStagingUsashburn1oraclecloud/entityKey&quot;+fileSuffix+&quot;.csv&quot;)
vars.put(&quot;response&quot;, prev.getResponseDataAsString());
records = vars.get(&quot;response&quot;)
FileUtils.writeStringToFile(f,records + System.getProperty(&quot;line.separator&quot;),true)
//for (int i=1; i&lt;=resultCount.toInteger(); i++)
//{
  // Get each matching result one by one.
  //records = vars.get(&quot;ExtractedName_&quot;+i)
// Write result to csv file.
  //FileUtils.writeStringToFile(f,records + System.getProperty(&quot;line.separator&quot;),true)
//}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="name match writer to file" enabled="false">
            <stringProp name="TestPlan.comments">This is filter out all the sourcekey that aren&apos;t null and write it out to a file</stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import org.apache.commons.io.FileUtils
import java.text.SimpleDateFormat;
// Get total number of matches. (Returns string)
def resultCount = vars.get(&quot;name&quot;)
log.warn &apos;Output to jmeter console&apos; +  resultCount
// Generate timestamp to create uniue file name.
String fileSuffix = new SimpleDateFormat(&quot;ddMMyyyy&quot;).format(new Date())
// Create file Object
f = new File(&quot;/Users/zameermalim/Documents/Oracle/consoleStagingUsashburn1oraclecloud/name_&quot;+fileSuffix+&quot;.csv&quot;)
records = vars.get(&quot;name&quot;)
FileUtils.writeStringToFile(f,records + System.getProperty(&quot;line.separator&quot;),true)
//for (int i=1; i&lt;=resultCount.toInteger(); i++)
//{
  // Get each matching result one by one.
  //records = vars.get(&quot;ExtractedName_&quot;+i)
// Write result to csv file.
  //FileUtils.writeStringToFile(f,records + System.getProperty(&quot;line.separator&quot;),true)
//}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="List Recommendations Data Entity Signature " enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;tenancyId&quot;: &quot;${TENANCYID}&quot;, &quot;authUserId&quot;: &quot;${AUTHUSERID}&quot;,&quot;keyFingerprint&quot;: &quot;${FINGERPRINT}&quot;,&quot;privateKeyFilename&quot;: &quot;${PRIVATEKEY}&quot;, &quot;geturl&quot;: &quot;https://${hostname}/20190325/catalogs/${instanceid}/actions/getRecommendations?recommendationType=LINK_GLOSSARY_TERM&amp;sourceObjectKey=${entityKey}&amp;sourceObjectType=DATA_ENTITY&amp;recommendationStatus=INFERRED&quot;, &quot;messageBody&quot;:&quot;&quot;, &quot;restType&quot; : &quot;POST&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${OCIMicroservice}</stringProp>
          <stringProp name="HTTPSampler.port">9080</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/sign/getsignature</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">date7</stringProp>
            <stringProp name="RegexExtractor.regex">date:(.*?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">keyid7</stringProp>
            <stringProp name="RegexExtractor.regex">Authorization:(.+);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SHAPA</stringProp>
            <stringProp name="RegexExtractor.regex">x-content-sha256:(.+?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="DCAT List Recommedations Data Entity" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DCAT List Recommedations Data Entity" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Variables pré-définies" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/20190325/catalogs/${instanceid}/actions/getRecommendations?recommendationType=LINK_GLOSSARY_TERM&amp;sourceObjectKey=${entityKey}&amp;sourceObjectType=DATA_ENTITY&amp;recommendationStatus=INFERRED</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">${keyid7}</stringProp>
                </elementProp>
                <elementProp name="date" elementType="Header">
                  <stringProp name="Header.name">date</stringProp>
                  <stringProp name="Header.value">${date7}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">host</stringProp>
                  <stringProp name="Header.value">${hostname}</stringProp>
                </elementProp>
                <elementProp name="x-content-sha256" elementType="Header">
                  <stringProp name="Header.name">x-content-sha256</stringProp>
                  <stringProp name="Header.value">${SHAPA}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="jp@gc - JSON/YAML Path Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.*</stringProp>
              <stringProp name="EXPECTED_VALUE">[]</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">true</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
              <stringProp name="INPUT_FORMAT">JSON</stringProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="sourceObjectKey" enabled="false">
              <stringProp name="TestPlan.comments">sourceObjectKey</stringProp>
              <stringProp name="JSONPostProcessor.referenceNames">sourceObjectKey</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..sourceObjectKey</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NO_MATCH</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="sourceObjectName" enabled="false">
              <stringProp name="TestPlan.comments">sourceObjectName</stringProp>
              <stringProp name="JSONPostProcessor.referenceNames">sourceObjectName</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..sourceObjectName</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NO_MATCH</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="sourceObjectKey match writer to file" enabled="false">
              <stringProp name="TestPlan.comments">This is filter out all the sourcekey that aren&apos;t null and write it out to a file</stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import org.apache.commons.io.FileUtils
import java.text.SimpleDateFormat;
// Get total number of matches. (Returns string)
def resultCount = vars.get(&quot;sourceObjectKey&quot;)
log.warn &apos;Output to jmeter console&apos; +  resultCount
// Generate timestamp to create uniue file name.
String fileSuffix = new SimpleDateFormat(&quot;ddMMyyyy&quot;).format(new Date())
// Create file Object
f = new File(&quot;/Users/zameermalim/Documents/Oracle/consoleStagingUsashburn1oraclecloud/sourceObjectKey_&quot;+fileSuffix+&quot;.csv&quot;)
records = vars.get(&quot;sourceObjectKey&quot;)
FileUtils.writeStringToFile(f,records + System.getProperty(&quot;line.separator&quot;),true)
//for (int i=1; i&lt;=resultCount.toInteger(); i++)
//{
  // Get each matching result one by one.
  //records = vars.get(&quot;ExtractedName_&quot;+i)
// Write result to csv file.
  //FileUtils.writeStringToFile(f,records + System.getProperty(&quot;line.separator&quot;),true)
//}</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="sourceObjectName match writer to file" enabled="false">
              <stringProp name="TestPlan.comments">This is filter out all the sourcekey that aren&apos;t null and write it out to a file</stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import org.apache.commons.io.FileUtils
import java.text.SimpleDateFormat;
// Get total number of matches. (Returns string)
def resultCount = vars.get(&quot;sourceObjectName&quot;)
log.warn &apos;Output to jmeter console&apos; +  resultCount
// Generate timestamp to create uniue file name.
String fileSuffix = new SimpleDateFormat(&quot;ddMMyyyy&quot;).format(new Date())
// Create file Object
f = new File(&quot;/Users/zameermalim/Documents/Oracle/consoleStagingUsashburn1oraclecloud/sourceObjectName_&quot;+fileSuffix+&quot;.csv&quot;)
records = vars.get(&quot;sourceObjectName&quot;)
FileUtils.writeStringToFile(f,records + System.getProperty(&quot;line.separator&quot;),true)
//for (int i=1; i&lt;=resultCount.toInteger(); i++)
//{
  // Get each matching result one by one.
  //records = vars.get(&quot;ExtractedName_&quot;+i)
// Write result to csv file.
  //FileUtils.writeStringToFile(f,records + System.getProperty(&quot;line.separator&quot;),true)
//}</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
          </hashTree>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Data Data Attribute Signature" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;tenancyId&quot;: &quot;${TENANCYID}&quot;, &quot;authUserId&quot;: &quot;${AUTHUSERID}&quot;,&quot;keyFingerprint&quot;: &quot;${FINGERPRINT}&quot;,&quot;privateKeyFilename&quot;: &quot;${PRIVATEKEY}&quot;, &quot;geturl&quot;: &quot;https://${hostname}/20190325/catalogs/${instanceid}/dataAssets/${dataAssetKey}/entities/${entityKey}/attributes&quot;,&quot;restType&quot; : &quot;GET&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${OCIMicroservice}</stringProp>
          <stringProp name="HTTPSampler.port">9080</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/sign/getsignature</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">date7</stringProp>
            <stringProp name="RegexExtractor.regex">date:(.*?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">keyid7</stringProp>
            <stringProp name="RegexExtractor.regex">Authorization:(.+);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SHAPA</stringProp>
            <stringProp name="RegexExtractor.regex">x-content-sha256:(.+?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DCAT Data Attribute" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Variables pré-définies" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/20190325/catalogs/${instanceid}/dataAssets/${dataAssetKey}/entities/${entityKey}/attributes</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${keyid7}</stringProp>
              </elementProp>
              <elementProp name="date" elementType="Header">
                <stringProp name="Header.name">date</stringProp>
                <stringProp name="Header.value">${date7}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">host</stringProp>
                <stringProp name="Header.value">${hostname}</stringProp>
              </elementProp>
              <elementProp name="x-content-sha256" elementType="Header">
                <stringProp name="Header.name">x-content-sha256</stringProp>
                <stringProp name="Header.value">${SHAPA}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">entityid</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;entityKey&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">${__threadNum}</stringProp>
          </RegexExtractor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="AttributeKey" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">AttributeKey</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..items[*].key</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">NULL</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="List Recommendations Data Attribute Signature " enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;tenancyId&quot;: &quot;${TENANCYID}&quot;, &quot;authUserId&quot;: &quot;${AUTHUSERID}&quot;,&quot;keyFingerprint&quot;: &quot;${FINGERPRINT}&quot;,&quot;privateKeyFilename&quot;: &quot;${PRIVATEKEY}&quot;, &quot;geturl&quot;: &quot;https://${hostname}/20190325/catalogs/${instanceid}/actions/getRecommendations?recommendationType=LINK_GLOSSARY_TERM&amp;sourceObjectKey=${AttributeKey}&amp;sourceObjectType=ATTRIBUTE&amp;recommendationStatus=INFERRED&quot;, &quot;messageBody&quot;:&quot;&quot;, &quot;restType&quot; : &quot;POST&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${OCIMicroservice}</stringProp>
          <stringProp name="HTTPSampler.port">9080</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/sign/getsignature</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">date7</stringProp>
            <stringProp name="RegexExtractor.regex">date:(.*?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">keyid7</stringProp>
            <stringProp name="RegexExtractor.regex">Authorization:(.+);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SHAPA</stringProp>
            <stringProp name="RegexExtractor.regex">x-content-sha256:(.+?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DCAT List Recommedations Data Attribute" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Variables pré-définies" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/20190325/catalogs/${instanceid}/actions/getRecommendations?recommendationType=LINK_GLOSSARY_TERM&amp;sourceObjectKey=${AttributeKey}&amp;sourceObjectType=ATTRIBUTE&amp;recommendationStatus=INFERRED</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${keyid7}</stringProp>
              </elementProp>
              <elementProp name="date" elementType="Header">
                <stringProp name="Header.name">date</stringProp>
                <stringProp name="Header.value">${date7}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">host</stringProp>
                <stringProp name="Header.value">${hostname}</stringProp>
              </elementProp>
              <elementProp name="x-content-sha256" elementType="Header">
                <stringProp name="Header.name">x-content-sha256</stringProp>
                <stringProp name="Header.value">${SHAPA}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="jp@gc - JSON/YAML Path Assertion" enabled="true">
            <stringProp name="JSON_PATH">$.*</stringProp>
            <stringProp name="EXPECTED_VALUE">[]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">true</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
            <stringProp name="INPUT_FORMAT">JSON</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
          <hashTree/>
          <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
            <stringProp name="DurationAssertion.duration">5000</stringProp>
          </DurationAssertion>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Attribute recommendations" enabled="false">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Recommendation Terms --&gt; " enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">20</stringProp>
        <stringProp name="ThreadGroup.ramp_time">40</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">3600</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="paasdevdcatqa_recommendation" enabled="false">
          <collectionProp name="Arguments.arguments">
            <elementProp name="OCIMicroservice" elementType="Argument">
              <stringProp name="Argument.name">OCIMicroservice</stringProp>
              <stringProp name="Argument.value">localhost</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="keyd" elementType="Argument">
              <stringProp name="Argument.name">keyd</stringProp>
              <stringProp name="Argument.value">/Users/zameermalim/Documents/Oracle/console-staging.us-ashburn-1.oraclecloud.com/zameer.rashid.malim-01-29-12-08.pem</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TENANCYID" elementType="Argument">
              <stringProp name="Argument.name">TENANCYID</stringProp>
              <stringProp name="Argument.value">ocid1.tenancy.oc1..aaaaaaaahk25msb4bift5w2tlqo6tcepprf54thivzjr2k4vohezlmiooywa</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="AUTHUSERID" elementType="Argument">
              <stringProp name="Argument.name">AUTHUSERID</stringProp>
              <stringProp name="Argument.value">ocid1.user.oc1..aaaaaaaa7mn3ws2ubofutwhfxu5db76tukft2ppsjpx6xqf77ohsvejbtvba</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="FINGERPRINT" elementType="Argument">
              <stringProp name="Argument.name">FINGERPRINT</stringProp>
              <stringProp name="Argument.value">1a:ab:f6:bd:35:dc:60:48:25:00:f9:10:93:1e:0e:a9</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="hostname" elementType="Argument">
              <stringProp name="Argument.name">hostname</stringProp>
              <stringProp name="Argument.value">datacatalog-qa.us-ashburn-1.oci.oraclecloud.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="PRIVATEKEY" elementType="Argument">
              <stringProp name="Argument.name">PRIVATEKEY</stringProp>
              <stringProp name="Argument.value">-----BEGIN PRIVATE KEY-----\n MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCp836eRiGV7Lqn 8VOKaR9hO7yKMHEnAFNaFBzPcFu/TcfUoEMfZEMsgVfoPZAo+ZgXKPpzZ6gPZtRt flJif8d4NQ3KnoxEZ1O7tDES6jRdPtc1TPAoOmga3ns9vcr69DCtiTMmZI7vglL+ nquNI94zoHeIkAwGXeC+WsEwSr2hBf4VMqHoia4RrrdPwNkXFtPvihJ9rShkDVnn z1xqZY82PFDn3zJuNyJOA+3zof0e6HXJ0Y8BSis9rxq50xL9Qdkr2PjCZ2nHq6Pa hZeUej0eDBA3vDkM+P1RpZvwLel6W3koWQwYTMFT1/JJAgpDa3MufwU2ppLTCDxk 7IhXH+xXAgMBAAECggEAQI0seDiCFDyM7zIx/X4NPbTfWYupxtsQTcQa502xg3mr H59Zr2g5PYPJXHxZr76R3qYhbskd4++2Wvpil2gaXxWjreTHuUmX29FG3HzZs9sl Cek1xMnedeowXFSk7unmPVvB8mC6i81v8adZ2KuZf/mAvX2dG6P3s8Wr4EhbO3f5 LJEV9di7N9C/qQuEOfR5Iv7b2KbQSyQwC5+NaI6gXsvOxEQw/hdAPzMfcX9DKkz9 ZSDriSRdm+uSDVdhje4b4X4umKvDbNiURK/Z4TyrM8YZnQ5WrkGfWhrgESAL+30L 8Yaau7Ifteo/onIHQJHgK+des1Mn6njDX/CUwXM0KQKBgQDX5JTYXtY74H9Ck7nd qb2zhtRHm0sVJjd5J8ypkNWfdqcK94ipqr1LV9PawyrmIkM6vFlMU9qveOFod031 6hOVTr+fyS5BRMYLT0PwpAVMKHwqaK3l3pQHQbZ5LB/pAbIPw7DvaVdGiYXt5Ctk RXXm/+4qyuetBwkIX3P1N+x22QKBgQDJhgTdoPoyGbJRXTCDHhH2x2BeRcSntx9k jKe/8hhLt0BEsEM6Y8db0vSUSoNU3Hwt30Ziq8qAW5QhdCmgTwXe4G+DU1HUQGYn Ef0jT4S9CjhRg4y4gWvCCDKzjWChGvozObbkmGg2HfUNa+RLJTUkii6xwpzj8HKN eLDTzy9erwKBgH71gUKsorebkbsJPKhKBbDpfTSO8lyBmOW6rfSZo8ae9CTS5J9C NQd1orRnSXcEdxy3XpwwQ84k/Al+/226NcH8CVxh5r2jQAOunXmKO0NKG5qk7H7d oZeS4Ufo1usjgB8dKZPhEt38SbJYF9xjrK4nm1u27v8lv/4YhAyU0o4hAoGBAI4U 3U1c98lm8KAI8fEfvE6fV0RgMDyHEa0UthjQmWyYsMk89MkwHBiTbTk4J8wm/65f 4wIiWM2Sw6eqfMa3sE3pMvYGQoVBOkSFnFHO+KlHkVl3RDm5lb3hhc2t+djcala/ dEFLav3stR9XWEfa3dL7Udymd3MFzd4Mn69WPfGlAoGAE3R73QJcCiaGF38Xmivg OS+QCroZoQxiTIT3Wr9k1y5ARiJLpo0SGxB1NjafMucOsvTfW2YhuxSYxATTqZLE nHNLvtiTguKYEp68FRLgVEm7gcoMaFmgy+VvjOEGPJ46QrKMwnzIUT2oOXTtnQPq dS6yauJBm8thM4juwTbtr7Q=\n -----END PRIVATE KEY-----</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="instanceid" elementType="Argument">
              <stringProp name="Argument.name">instanceid</stringProp>
              <stringProp name="Argument.value">ocid1.datacatalog.oc1.iad.aaaaaaaamioppqjmrk6cv4c5qji7d2zw3bvzg6xdf575gj4nkzqyjw52i4ea</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">paasdevdcatqa</stringProp>
        </Arguments>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="paasdevdcatqa_glossary" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="OCIMicroservice" elementType="Argument">
              <stringProp name="Argument.name">OCIMicroservice</stringProp>
              <stringProp name="Argument.value">localhost</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="keyd" elementType="Argument">
              <stringProp name="Argument.name">keyd</stringProp>
              <stringProp name="Argument.value">/Users/zameermalim/Documents/Oracle/console-staging.us-ashburn-1.oraclecloud.com/zameer.rashid.malim-01-29-12-08.pem</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TENANCYID" elementType="Argument">
              <stringProp name="Argument.name">TENANCYID</stringProp>
              <stringProp name="Argument.value">ocid1.tenancy.oc1..aaaaaaaahk25msb4bift5w2tlqo6tcepprf54thivzjr2k4vohezlmiooywa</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="AUTHUSERID" elementType="Argument">
              <stringProp name="Argument.name">AUTHUSERID</stringProp>
              <stringProp name="Argument.value">ocid1.user.oc1..aaaaaaaa7mn3ws2ubofutwhfxu5db76tukft2ppsjpx6xqf77ohsvejbtvba</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="FINGERPRINT" elementType="Argument">
              <stringProp name="Argument.name">FINGERPRINT</stringProp>
              <stringProp name="Argument.value">1a:ab:f6:bd:35:dc:60:48:25:00:f9:10:93:1e:0e:a9</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="hostname" elementType="Argument">
              <stringProp name="Argument.name">hostname</stringProp>
              <stringProp name="Argument.value">datacatalog-qa.us-ashburn-1.oci.oraclecloud.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="PRIVATEKEY" elementType="Argument">
              <stringProp name="Argument.name">PRIVATEKEY</stringProp>
              <stringProp name="Argument.value">-----BEGIN PRIVATE KEY-----\n MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCp836eRiGV7Lqn 8VOKaR9hO7yKMHEnAFNaFBzPcFu/TcfUoEMfZEMsgVfoPZAo+ZgXKPpzZ6gPZtRt flJif8d4NQ3KnoxEZ1O7tDES6jRdPtc1TPAoOmga3ns9vcr69DCtiTMmZI7vglL+ nquNI94zoHeIkAwGXeC+WsEwSr2hBf4VMqHoia4RrrdPwNkXFtPvihJ9rShkDVnn z1xqZY82PFDn3zJuNyJOA+3zof0e6HXJ0Y8BSis9rxq50xL9Qdkr2PjCZ2nHq6Pa hZeUej0eDBA3vDkM+P1RpZvwLel6W3koWQwYTMFT1/JJAgpDa3MufwU2ppLTCDxk 7IhXH+xXAgMBAAECggEAQI0seDiCFDyM7zIx/X4NPbTfWYupxtsQTcQa502xg3mr H59Zr2g5PYPJXHxZr76R3qYhbskd4++2Wvpil2gaXxWjreTHuUmX29FG3HzZs9sl Cek1xMnedeowXFSk7unmPVvB8mC6i81v8adZ2KuZf/mAvX2dG6P3s8Wr4EhbO3f5 LJEV9di7N9C/qQuEOfR5Iv7b2KbQSyQwC5+NaI6gXsvOxEQw/hdAPzMfcX9DKkz9 ZSDriSRdm+uSDVdhje4b4X4umKvDbNiURK/Z4TyrM8YZnQ5WrkGfWhrgESAL+30L 8Yaau7Ifteo/onIHQJHgK+des1Mn6njDX/CUwXM0KQKBgQDX5JTYXtY74H9Ck7nd qb2zhtRHm0sVJjd5J8ypkNWfdqcK94ipqr1LV9PawyrmIkM6vFlMU9qveOFod031 6hOVTr+fyS5BRMYLT0PwpAVMKHwqaK3l3pQHQbZ5LB/pAbIPw7DvaVdGiYXt5Ctk RXXm/+4qyuetBwkIX3P1N+x22QKBgQDJhgTdoPoyGbJRXTCDHhH2x2BeRcSntx9k jKe/8hhLt0BEsEM6Y8db0vSUSoNU3Hwt30Ziq8qAW5QhdCmgTwXe4G+DU1HUQGYn Ef0jT4S9CjhRg4y4gWvCCDKzjWChGvozObbkmGg2HfUNa+RLJTUkii6xwpzj8HKN eLDTzy9erwKBgH71gUKsorebkbsJPKhKBbDpfTSO8lyBmOW6rfSZo8ae9CTS5J9C NQd1orRnSXcEdxy3XpwwQ84k/Al+/226NcH8CVxh5r2jQAOunXmKO0NKG5qk7H7d oZeS4Ufo1usjgB8dKZPhEt38SbJYF9xjrK4nm1u27v8lv/4YhAyU0o4hAoGBAI4U 3U1c98lm8KAI8fEfvE6fV0RgMDyHEa0UthjQmWyYsMk89MkwHBiTbTk4J8wm/65f 4wIiWM2Sw6eqfMa3sE3pMvYGQoVBOkSFnFHO+KlHkVl3RDm5lb3hhc2t+djcala/ dEFLav3stR9XWEfa3dL7Udymd3MFzd4Mn69WPfGlAoGAE3R73QJcCiaGF38Xmivg OS+QCroZoQxiTIT3Wr9k1y5ARiJLpo0SGxB1NjafMucOsvTfW2YhuxSYxATTqZLE nHNLvtiTguKYEp68FRLgVEm7gcoMaFmgy+VvjOEGPJ46QrKMwnzIUT2oOXTtnQPq dS6yauJBm8thM4juwTbtr7Q=\n -----END PRIVATE KEY-----</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="instanceid" elementType="Argument">
              <stringProp name="Argument.name">instanceid</stringProp>
              <stringProp name="Argument.value">ocid1.datacatalog.oc1.iad.aaaaaaaaspkqq2z5uwn6zngetdf4flgw7rllqdrpeq5bcwxvinnfan33wxba</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">paasdevdcatqa</stringProp>
        </Arguments>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="paasdevdcatinfra" enabled="false">
          <collectionProp name="Arguments.arguments">
            <elementProp name="OCIMicroservice" elementType="Argument">
              <stringProp name="Argument.name">OCIMicroservice</stringProp>
              <stringProp name="Argument.value">localhost</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="keyd" elementType="Argument">
              <stringProp name="Argument.name">keyd</stringProp>
              <stringProp name="Argument.value">/Users/zameermalim/Documents/Oracle/consoleStagingUsashburn1oraclecloud/zameer.rashid.malim-02-17-08-30paasdecdcatinfra.pem</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TENANCYID" elementType="Argument">
              <stringProp name="Argument.name">TENANCYID</stringProp>
              <stringProp name="Argument.value">ocid1.tenancy.oc1..aaaaaaaarmzlx7mdssig6ml73hvndduyimqicw6xi275xn2opyr4rioqjs2q</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="AUTHUSERID" elementType="Argument">
              <stringProp name="Argument.name">AUTHUSERID</stringProp>
              <stringProp name="Argument.value">ocid1.user.oc1..aaaaaaaasirrtdkxxp7votndbprqhru52mvgy5qihqtkgjlgpc2ubsdj2jkq</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="FINGERPRINT" elementType="Argument">
              <stringProp name="Argument.name">FINGERPRINT</stringProp>
              <stringProp name="Argument.value">58:e5:b3:f2:1e:ae:ca:23:7c:75:8d:52:3b:e9:0b:08</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="hostname" elementType="Argument">
              <stringProp name="Argument.name">hostname</stringProp>
              <stringProp name="Argument.value">datacatalog-devn.us-phoenix-1.oci.oraclecloud.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="PRIVATEKEY" elementType="Argument">
              <stringProp name="Argument.name">PRIVATEKEY</stringProp>
              <stringProp name="Argument.value">-----BEGIN PRIVATE KEY-----\nMIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQC39SYdrHrTu+WJ nFoVHzqxfWR47vWSmUT8FFU28Vc3oCuZGWwZ+K77Sozm6n6Z4/LG4eOVEnqV2nYr Hr3+JIm/UzAhJfKsudrSOeKhLXWo9KzY7J5AXMLscoKs4Pt2uiPZWdODaAbp+Xqb wNR20VidT8oeCxH5PYEpuFNX70x7syaTJWRBItWNL+pj1mGnfQRRSoQVbdu+jt6z euLR9/Vgwv3CunOZqxuQWeUUUsSkNo4/3PYG+LvR3CPcCpRWqwcIC3uW0+PxEWkF a/vLXjE6dSE9DBaG7S/2y79MF7dW0Db38ztSpFWWEiMuB3VokMOehpV9z1t+bW1j 7szd9a87AgMBAAECggEAWT8LDexm7qBC/R8oqQSsof12qCEubMAFMtLegLhXmvoP DMjDpFn88pc5grITV6+6Ufi3Q9RiOp9xIvxYKpspZPQD7qENefT1D3bb11xJr/18 egVZxVn7i2EGur6v4Orvh3xH3IG0kQDjFftYWIi6GB/kq+ys/KF1L3tom8nR7lSq B/z2iezJjYf/u5vDev9PyfxReKANYbeXYVStHrPpr4NL7tC2GRrHT/nFRfR4YBbw Iv56XUt70NM+2tDTRGi77x7ShNS/2nt8cP+Om85w7BMANGaEwVJaGjIqOTtmdlT7 kFjYxW81s8qXesosZGGdJSTKmvCTJtSIeNMU1QNv4QKBgQDnntV4ocblf9ynPtPe B2CAXk3X9QNexT6v5zjzjIyhjhsWBJgDReZkM588ArlwTDgR9amdCrR8mmUK3I0W YfR7OLI+xeffT3tQBTiZ2zlrHE3+4iHG2qUrnMJbOzRVzFp6QNBBMhJQ6UPJ0rCg qKls/okT10toQqGaPKlTWJpqiwKBgQDLUgIri35GGtLD1g1RlCgOGIXJf86Pq+fR Q2eGGz6rlOiQW6aEgYbL1uEGMg6S7JVezCXsN+wGXrlnrXSJubYJPyegary3tFwg fB9it1TP0udGXds4p6BrgQ9/p9FvvvoOxDFnj+I1/a6LCj8X8ZLlr/kg32PtomyW mkaUnR1UEQKBgDmN6WOxZ3gNvqm8Xe81DBC53kQEeRLqlnolTayPRz65zhc5iwB9 NRO/FBlYX/X8qo4j6kLArzqrLuJ1DYX7T0HzQ69/g++kk3K96WOp6umnveXRES2V lSdyK4V5/7Y2MmFgi583rv92B0c2WHeDkZ4o3a0VeYJt1DQ8UKMKSEyjAoGBALCo lcgeEN56yexsnO/n6hGtTvlwOhrtQ6O4jEeifoZ5AMUFTR7OqD+OecB3V+Bi/bn7 aWvgfwxd23xw4tQT704DeLvSYhy/8lgrYN3V6zQTzO1/+U01oJYn8j55oukUJ5MS 9tZD10oQHEsk4QM92+QETVM5pkrAmNcWPwM7rFLxAoGBAInNWXs54xAgkwOVsBOx x9YvEYPBoXPxVkfoGUeal3a0Cs2iggze9vvcUMkM0vB2MWfnORJzUjF9XoQMCMwz rbchcn+uW4WrdkpDvXuoN3G+/mQqlPUomz4ZlVUthclL3PlEvf2QBF8VTgpiua5K 1GrxXWEe8M/HEz8TPP8+SsTF\n -----END PRIVATE KEY-----</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="instanceid" elementType="Argument">
              <stringProp name="Argument.name">instanceid</stringProp>
              <stringProp name="Argument.value">ocid1.datacatalog.oc1.phx.aaaaaaaagqp6u4kkpvjlnn2mcg2xzswdcsnvi3drqdgqfpyjrrtnpm4wqm5a</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">paasdevdcatinfra</stringProp>
        </Arguments>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="dcatpreprod" enabled="false">
          <collectionProp name="Arguments.arguments">
            <elementProp name="OCIMicroservice" elementType="Argument">
              <stringProp name="Argument.name">OCIMicroservice</stringProp>
              <stringProp name="Argument.value">localhost</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="keyd" elementType="Argument">
              <stringProp name="Argument.name">keyd</stringProp>
              <stringProp name="Argument.value">/Users/zameermalim/Documents/Oracle/console-staging.us-ashburn-1.oraclecloud.com/zameer.rashid.malim-01-29-12-08.pem</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TENANCYID" elementType="Argument">
              <stringProp name="Argument.name">TENANCYID</stringProp>
              <stringProp name="Argument.value">ocid1.tenancy.oc1..aaaaaaaao6ootzd3fq4ebh2pr57yijfgxj6wnkncytdqlrwrdekiva5nqr7a</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="AUTHUSERID" elementType="Argument">
              <stringProp name="Argument.name">AUTHUSERID</stringProp>
              <stringProp name="Argument.value">ocid1.user.oc1..aaaaaaaahwllyvnbvm7sivnrlrzptqk3tb54wz3uxfjheliwkk5nemkdx3vq</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="FINGERPRINT" elementType="Argument">
              <stringProp name="Argument.name">FINGERPRINT</stringProp>
              <stringProp name="Argument.value">48:b4:70:c6:81:8c:4d:f9:4d:1e:a5:72:fd:10:54:0c</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="hostname" elementType="Argument">
              <stringProp name="Argument.name">hostname</stringProp>
              <stringProp name="Argument.value">datacatalog-stage.us-ashburn-1.oci.oraclecloud.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="PRIVATEKEY" elementType="Argument">
              <stringProp name="Argument.name">PRIVATEKEY</stringProp>
              <stringProp name="Argument.value">-----BEGIN PRIVATE KEY-----\nMIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQDAOa6LdKjrlOtR Uf5UeDf3KJVVSqo+d1XvBqFIsbwRvIy8fE1bP1tlbWdgPyreslwJlsXNnnRzyQxs 21a0suztXQarCf7b1Xiit8D0sX+02T2S0Q2+uT+LOZ3ChgyiUIiB6UX1msFluF6t JFhpEcmrxDHhiI/8OennoMftuRNDbxL53IFPzfaroXb0lmELqAqW0pB5ZWOIT8E6 PqnypaGASbnYwhyLqfOIt4kRGSCOTgFDY0QkbimTBsInJTVz6IzlmxONFiHGVrXP V0HmLZ9XZ2s6djQAOJdHduAVR+79c02pLevUuQHW1BbiVAhfaBw4+0WBsP3edHnM nhYnyd6DAgMBAAECggEAXvW/392kOykIrNYkHad8AknWp9loS86ZMaklUOuYnGx4 W/7OGjcs1+jZikb6TyRuakBE/ER8g9x8mmQqq76+Y64yhpk8AW6uFzhOhrMPAxDU paxHrYIHPaibYkblg+Pj48WRDXlDdBRGFSOg11r1tTiJacCUXMZhYk9fpPTqasNf fVTcih+rb6q/uLlUMZ5ETENpLD75h6HKZ1CAubzzpdokVG+2A+b79XR9mFIqtQd0 bFiJ5pOomb80FqJ4tCelfCex8Z+4pKw6CsvB+JN2MDKc/JNzOuGla+3l7JRjtypm 4X4rfUnkCzH8gevkJcSvYN3Jl52dCfgEcwQ+XuBvsQKBgQDo6xVC09BcYDTZrtPG Bii+qUKflvc/UFqwjhXaYX/5oHSaVkZm7b/tuXY+pim4NWjHMBuOEQWv2CBdhcSC KXNiuJbAy3CbMQbj8ShcUXWiJpmV3ivhEBT00BnzSI/ZzodYvlqQ22fReljUAB85 5Ec7RQa2i5BwB0/n8zq82V2M0QKBgQDTRkGpHwMS87xbA6PAk8OfnR3YJUHDlm8g 5bNxl3/HdRIrVpkOtN9slol4pxZVqDEOsqqHmaoKbMg+gs/adEvB7Lzbag6cSA8x Q6l46dUd+whYacXK7myfrKawSDESmOGjLmZ3G6vFdYDt26r1pelnjZdWMDtQlylD Z8eX7DB7EwKBgHA5fLgDSLyJmk1cYCtkolMjSLeOTLkT5W52N29OVRQYzLXkZe2I Flbbam7LLwTTrxVyR4SPDRdp4kZNgp5YjID/gZuJKkuMNs6zTogUs8IaKRw9vRSm 5AIFFsvSpYUDbtFCfm6XWJFlCtGy8Vi6ddvH6XEhE8n2q/iNiDqf3ORRAoGAVejW oEd8/4Lez3+OYat0O34u+YpE0JxmOdFNg14gVmGzbq369PD1fPlFkysWOOR4dkqO by875ptPXaPhkyoA+C0kqm/Y2xGuI9Eoo4Mp5tQCE7mG9Tq4LsGM0le4pKBH+AvR HJPC6DscnxvYy6SYYURBCon4RJAC9mbH0W34VMMCgYBnjz4DbIs4aBdGE5aEVYtx l4TJ3AJJLeXp2gGqNe2QA/VHxRFFvM+9rVj0JrEmgZWbAr6ygh8s1Pb5mL3dJJqw YS4ekN0fllolB210Q5e9spxDBn+yj83keKqc0rdDHLfoMZdbuMi+0Mf3j4Da7nLn 7AOGr6UkQ7cgOaTLq///qg==\n -----END PRIVATE KEY-----</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="instanceid" elementType="Argument">
              <stringProp name="Argument.name">instanceid</stringProp>
              <stringProp name="Argument.value">ocid1.datacatalog.oc1.iad.aaaaaaaaynl3vtqxl643aoiufg5nemlegot7badraf7bbycfqkfievz4dqua</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">dcatpreprod</stringProp>
        </Arguments>
        <hashTree/>
        <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="OffsetValue" enabled="true">
          <stringProp name="maximumValue">9990</stringProp>
          <stringProp name="minimumValue">10</stringProp>
          <stringProp name="outputFormat"></stringProp>
          <boolProp name="perThread">true</boolProp>
          <stringProp name="randomSeed"></stringProp>
          <stringProp name="variableName">OffsetValue</stringProp>
        </RandomVariableConfig>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="dcatdemo" enabled="false">
          <collectionProp name="Arguments.arguments">
            <elementProp name="OCIMicroservice" elementType="Argument">
              <stringProp name="Argument.name">OCIMicroservice</stringProp>
              <stringProp name="Argument.value">localhost</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="keyd" elementType="Argument">
              <stringProp name="Argument.name">keyd</stringProp>
              <stringProp name="Argument.value">/Users/zameermalim/Documents/Oracle/console-staging.us-ashburn-1.oraclecloud.com/zameer.rashid.malim-01-29-12-08.pem</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TENANCYID" elementType="Argument">
              <stringProp name="Argument.name">TENANCYID</stringProp>
              <stringProp name="Argument.value">ocid1.tenancy.oc1..aaaaaaaakydcqlqxuodjzygfaec6s5yyeo7jkscv5sxtzigs3hthgav3cyka</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="AUTHUSERID" elementType="Argument">
              <stringProp name="Argument.name">AUTHUSERID</stringProp>
              <stringProp name="Argument.value">ocid1.user.oc1..aaaaaaaaxt3uu6ml4hscfhugt2rdylprpvmfzfejqdhpxoarmswhi2euumba</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="FINGERPRINT" elementType="Argument">
              <stringProp name="Argument.name">FINGERPRINT</stringProp>
              <stringProp name="Argument.value">ce:39:89:6f:cf:25:8f:a4:5e:ca:44:c5:34:19:3c:c2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="hostname" elementType="Argument">
              <stringProp name="Argument.name">hostname</stringProp>
              <stringProp name="Argument.value">datacatalog-stage.eu-amsterdam-1.oci.oraclecloud.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="PRIVATEKEY" elementType="Argument">
              <stringProp name="Argument.name">PRIVATEKEY</stringProp>
              <stringProp name="Argument.value">-----BEGIN PRIVATE KEY-----\n MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQDAlUOJMt51tTMn B9BgzaYpFLcn7WLoBSos98fYRZirnCCUCALcDbsPM7Z5AqTloDOxbrITA5e0o27m 7IpG5EgSS2x/y/myznagIwaBqMdpPStHOQgDXTKBjyGRy6d5fgfBEncxpfgX5udz b3Xhl2y7OpzYtF2vdQ1vVV+9WhY4X201HPiQ1r4YNG0gLYkittNavVir9+HTjsga HH2nI52MZ++k7Z9cdzJawilmB14NmK6bvz94t8vHNWKT665WJratLEVYGLCNfhRQ 1dcjH2i0veaqsSEnX+23Vr3P92hsbFvFAHbfuORf+ejww1mBlakP/2yo5VEHphlA Ix9xAw4vAgMBAAECggEAV+FFKkxuO2RubTchnar6UfDEC5JF+f6xWkfPiB9qJZVf QG3PcD9LxwogEGRmfup17FfJJugSyDl0GCiEiQkO4lpMrpyT20Zf139kLrKoHJvv LdcWkwJqU7jO5sr6J3SdcTtN7PgBmFaj84c/UaxZz65VeIYF4lUVxmI9CBkd3qbS ICa8C9/G0i+iGfEd1O4VTnJId3ntlZ951Nx+D4v+9hgeRytbXc6XAIa5/VYxTyf+ 5J3rvTEigmwAdxC3GTxyeyfLLwjsTUYo3wRNMrkxSxD8x/uCsckSRSF+DF/gf9ex GQlO3/8ZCHjpbZ8JvHWn6yYBZ2NyIxPnJ0Da+QRDYQKBgQDrTij4Yf28L4GixQOD S45+dAx1PfFb/xQPnNXgVz6+bjjaauL4CG3sI7NlfT5PrKNC3Z7cHaq/7QmOTFBp Fkgldn6LCOR/MOUtRkHOGt7NFrgmmWU2TaowjHDVm+HOKdp6ItBKmathtXRLQH5X s7dS+SbX0uxO41+lBrQJEVNtNwKBgQDRhTkYunK97K78vqyRLqkBgOoLmJmuDKi+ plg9kzGILiF8d+IgEV6/wnzg8d/sYiVbeR/sPXoJaGcBrHPBY6edDBBWfargYYYj LMZMddpvCKU1y67QzKHLFavBoe3OuBT/bwvcjOE2G5W+gO2LfXFG1AJMgfkh3HSF 1Mz5JociyQKBgCmibsVkMU026q0uRuzYVaIyTnIAP9CTVa1dhspnJYb0YcLj3r0c YLbDql5uxrO6TDjslctExI2pF2PCRQgTFTjruoBHVoba0/Iq2EHrpziKqJLL2Yi+ PTrR3rUtG8sqxKmPt2M7xYNIZAdcpf5Gok1gIGtXutBKkwXUJc7k7eoJAoGAFjc/ D50tb2/6OfhpydcdungV2PbsTKUw+04eCyFhXiQuDsmTY30UA9c2cI+VA7aAaYuV U/JMz1SPn4DOoVHUwvU1gkY+6R3OIEquGAtjBuTux556Qc+A1EzO8nAeDA4+w7rd khwqARe5sAJxrZm2eiEewUgCx5FdlZczyLNKHukCgYAG8QzanU+uEIuN7HH+k0Z5 VJDWVDCVKHfKJQB6Kd3MLWozMw8lOLlIVQhGnZp1D5l1qOyXQ0KNT5bu5uhtKetG 2a8uPnsUrPyhAIXko3X9j0fPXX/b+uUVv8zvWdZo+R6vB77iDkHEp/Ck+vUSH948 U3iS/bsJ2ZKuriiQOzlzRw==\n -----END PRIVATE KEY-----</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="instanceid" elementType="Argument">
              <stringProp name="Argument.name">instanceid</stringProp>
              <stringProp name="Argument.value">ocid1.datacatalog.oc1.eu-amsterdam-1.aaaaaaaaxypdz5xnrq5hs2i772zcnvd2hj7z7mqi6fok5yx4pjb6txvkmzoa</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">dcatdemo</stringProp>
        </Arguments>
        <hashTree/>
        <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="entity and name extraction for offset" enabled="false">
          <stringProp name="maximumValue">4</stringProp>
          <stringProp name="minimumValue">0</stringProp>
          <stringProp name="outputFormat"></stringProp>
          <boolProp name="perThread">true</boolProp>
          <stringProp name="randomSeed"></stringProp>
          <stringProp name="variableName">entityNameCorrelator</stringProp>
        </RandomVariableConfig>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Glossary Signature" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;tenancyId&quot;: &quot;${TENANCYID}&quot;, &quot;authUserId&quot;: &quot;${AUTHUSERID}&quot;,&quot;keyFingerprint&quot;: &quot;${FINGERPRINT}&quot;,&quot;privateKeyFilename&quot;: &quot;${PRIVATEKEY}&quot;, &quot;geturl&quot;: &quot;https://${hostname}/20190325/catalogs/${instanceid}/glossaries/&quot;,&quot;restType&quot; : &quot;GET&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${OCIMicroservice}</stringProp>
          <stringProp name="HTTPSampler.port">9080</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/sign/getsignature</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">date7</stringProp>
            <stringProp name="RegexExtractor.regex">date:(.*?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">keyid7</stringProp>
            <stringProp name="RegexExtractor.regex">Authorization:(.+);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SHAPA</stringProp>
            <stringProp name="RegexExtractor.regex">x-content-sha256:(.+?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DCAT GET Glossary" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Variables pré-définies" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/20190325/catalogs/${instanceid}/glossaries/</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${keyid7}</stringProp>
              </elementProp>
              <elementProp name="date" elementType="Header">
                <stringProp name="Header.name">date</stringProp>
                <stringProp name="Header.value">${date7}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">host</stringProp>
                <stringProp name="Header.value">${hostname}</stringProp>
              </elementProp>
              <elementProp name="x-content-sha256" elementType="Header">
                <stringProp name="Header.name">x-content-sha256</stringProp>
                <stringProp name="Header.value">${SHAPA}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="glossaryKey" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">glossaryKey</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..key</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">null</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Terms Signature" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;tenancyId&quot;: &quot;${TENANCYID}&quot;, &quot;authUserId&quot;: &quot;${AUTHUSERID}&quot;,&quot;keyFingerprint&quot;: &quot;${FINGERPRINT}&quot;,&quot;privateKeyFilename&quot;: &quot;${PRIVATEKEY}&quot;, &quot;geturl&quot;: &quot;https://${hostname}/20190325/catalogs/${instanceid}/glossaries/${glossaryKey}/terms&quot;,&quot;restType&quot; : &quot;GET&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${OCIMicroservice}</stringProp>
          <stringProp name="HTTPSampler.port">9080</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/sign/getsignature</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">date7</stringProp>
            <stringProp name="RegexExtractor.regex">date:(.*?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">keyid7</stringProp>
            <stringProp name="RegexExtractor.regex">Authorization:(.+);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SHAPA</stringProp>
            <stringProp name="RegexExtractor.regex">x-content-sha256:(.+?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DCAT GET Terms" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Variables pré-définies" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/20190325/catalogs/${instanceid}/glossaries/${glossaryKey}/terms</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${keyid7}</stringProp>
              </elementProp>
              <elementProp name="date" elementType="Header">
                <stringProp name="Header.name">date</stringProp>
                <stringProp name="Header.value">${date7}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">host</stringProp>
                <stringProp name="Header.value">${hostname}</stringProp>
              </elementProp>
              <elementProp name="x-content-sha256" elementType="Header">
                <stringProp name="Header.name">x-content-sha256</stringProp>
                <stringProp name="Header.value">${SHAPA}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">entityid</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;entityKey&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">${__threadNum}</stringProp>
          </RegexExtractor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="key" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">key</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..items.[*]key</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">null</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="displayName" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">displayName</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.key==&apos;${key}&apos;)].displayName</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">null</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="key, name, dataAssetKey" enabled="false">
            <stringProp name="JSONPostProcessor.referenceNames">key;name;dataAssetKey</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..items.[${entityNameCorrelator}]key;$..items.[${entityNameCorrelator}]name;$..items.[${entityNameCorrelator}]dataAssetKey</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">0;0;0</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="termid" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">termid</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..key</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">null</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Term Signature" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;tenancyId&quot;: &quot;${TENANCYID}&quot;, &quot;authUserId&quot;: &quot;${AUTHUSERID}&quot;,&quot;keyFingerprint&quot;: &quot;${FINGERPRINT}&quot;,&quot;privateKeyFilename&quot;: &quot;${PRIVATEKEY}&quot;, &quot;geturl&quot;: &quot;https://${hostname}/20190325/catalogs/${instanceid}/glossaries/${glossaryKey}/terms/${termid}&quot;,&quot;restType&quot; : &quot;GET&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${OCIMicroservice}</stringProp>
          <stringProp name="HTTPSampler.port">9080</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/sign/getsignature</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">date7</stringProp>
            <stringProp name="RegexExtractor.regex">date:(.*?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">keyid7</stringProp>
            <stringProp name="RegexExtractor.regex">Authorization:(.+);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SHAPA</stringProp>
            <stringProp name="RegexExtractor.regex">x-content-sha256:(.+?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="DCAT GET Term" enabled="false">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DCAT GET Term" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Variables pré-définies" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/20190325/catalogs/${instanceid}/glossaries/${glossaryKey}/terms/${termid}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">${keyid7}</stringProp>
                </elementProp>
                <elementProp name="date" elementType="Header">
                  <stringProp name="Header.name">date</stringProp>
                  <stringProp name="Header.value">${date7}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">host</stringProp>
                  <stringProp name="Header.value">${hostname}</stringProp>
                </elementProp>
                <elementProp name="x-content-sha256" elementType="Header">
                  <stringProp name="Header.name">x-content-sha256</stringProp>
                  <stringProp name="Header.value">${SHAPA}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Search Signature Terms 10" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;tenancyId&quot;: &quot;${TENANCYID}&quot;, &quot;authUserId&quot;: &quot;${AUTHUSERID}&quot;,&quot;keyFingerprint&quot;: &quot;${FINGERPRINT}&quot;,&quot;privateKeyFilename&quot;: &quot;${PRIVATEKEY}&quot;, &quot;geturl&quot;: &quot;https://${hostname}/20190325/catalogs/${instanceid}/search?limit=10&quot;, &quot;messageBody&quot;:&quot;{\&quot;facetedQuery\&quot;:\&quot;*\&quot;,\&quot;dimensions\&quot;:[\&quot;customproperties\&quot;,\&quot;CatalogType\&quot;,\&quot;UpdatedBy\&quot;],\&quot;filters\&quot;:{\&quot;searchStringFilters\&quot;:[{\&quot;field\&quot;:\&quot;CatalogType\&quot;,\&quot;values\&quot;:[\&quot;Term\&quot;,\&quot;Category\&quot;]}],\&quot;searchDateFilters\&quot;:[]},\&quot;sort\&quot;:[{\&quot;sortBy\&quot;:\&quot;Relevancy\&quot;,\&quot;sortOrder\&quot;:\&quot;asc\&quot;}]}&quot;, &quot;restType&quot; : &quot;POST&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${OCIMicroservice}</stringProp>
          <stringProp name="HTTPSampler.port">9080</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/sign/getsignature</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">date7</stringProp>
            <stringProp name="RegexExtractor.regex">date:(.*?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">keyid7</stringProp>
            <stringProp name="RegexExtractor.regex">Authorization:(.+);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SHAPA</stringProp>
            <stringProp name="RegexExtractor.regex">x-content-sha256:(.+?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">0</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DCAT Search Terms limit 10" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;facetedQuery&quot;:&quot;*&quot;,&quot;dimensions&quot;:[&quot;customproperties&quot;,&quot;CatalogType&quot;,&quot;UpdatedBy&quot;],&quot;filters&quot;:{&quot;searchStringFilters&quot;:[{&quot;field&quot;:&quot;CatalogType&quot;,&quot;values&quot;:[&quot;Term&quot;,&quot;Category&quot;]}],&quot;searchDateFilters&quot;:[]},&quot;sort&quot;:[{&quot;sortBy&quot;:&quot;Relevancy&quot;,&quot;sortOrder&quot;:&quot;asc&quot;}]}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/20190325/catalogs/${instanceid}/search?limit=10</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${keyid7}</stringProp>
              </elementProp>
              <elementProp name="date" elementType="Header">
                <stringProp name="Header.name">date</stringProp>
                <stringProp name="Header.value">${date7}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">host</stringProp>
                <stringProp name="Header.value">${hostname}</stringProp>
              </elementProp>
              <elementProp name="x-content-sha256" elementType="Header">
                <stringProp name="Header.name">x-content-sha256</stringProp>
                <stringProp name="Header.value">${SHAPA}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">entityid</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;entityKey&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">${__threadNum}</stringProp>
          </RegexExtractor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="key, name, dataAssetKey" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">key;name;dataAssetKey</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..items.[${entityNameCorrelator}]key;$..items.[${entityNameCorrelator}]name;$..items.[${entityNameCorrelator}]dataAssetKey</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">0;0;0</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="entityKey match writer to file" enabled="false">
            <stringProp name="TestPlan.comments">This is filter out all the sourcekey that aren&apos;t null and write it out to a file</stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import org.apache.commons.io.FileUtils
import java.text.SimpleDateFormat;
// Get total number of matches. (Returns string)
def resultCount = vars.get(&quot;entityKey&quot;)
log.warn &apos;Output to jmeter console&apos; +  resultCount
// Generate timestamp to create uniue file name.
String fileSuffix = new SimpleDateFormat(&quot;ddMMyyyy&quot;).format(new Date())
// Create file Object
f = new File(&quot;/Users/zameermalim/Documents/Oracle/consoleStagingUsashburn1oraclecloud/entityKey_&quot;+fileSuffix+&quot;.csv&quot;)
records = vars.get(&quot;entityKey&quot;)
FileUtils.writeStringToFile(f,records + System.getProperty(&quot;line.separator&quot;),true)
//for (int i=1; i&lt;=resultCount.toInteger(); i++)
//{
  // Get each matching result one by one.
  //records = vars.get(&quot;ExtractedName_&quot;+i)
// Write result to csv file.
  //FileUtils.writeStringToFile(f,records + System.getProperty(&quot;line.separator&quot;),true)
//}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="entityKey response writer to file" enabled="false">
            <stringProp name="TestPlan.comments">This is filter out all the sourcekey that aren&apos;t null and write it out to a file</stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import org.apache.commons.io.FileUtils
import java.text.SimpleDateFormat;

// Generate timestamp to create uniue file name.
String fileSuffix = new SimpleDateFormat(&quot;ddMMyyyy&quot;).format(new Date())
// Create file Object
f = new File(&quot;/Users/zameermalim/Documents/Oracle/consoleStagingUsashburn1oraclecloud/entityKey&quot;+fileSuffix+&quot;.csv&quot;)
vars.put(&quot;response&quot;, prev.getResponseDataAsString());
records = vars.get(&quot;response&quot;)
FileUtils.writeStringToFile(f,records + System.getProperty(&quot;line.separator&quot;),true)
//for (int i=1; i&lt;=resultCount.toInteger(); i++)
//{
  // Get each matching result one by one.
  //records = vars.get(&quot;ExtractedName_&quot;+i)
// Write result to csv file.
  //FileUtils.writeStringToFile(f,records + System.getProperty(&quot;line.separator&quot;),true)
//}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="name match writer to file" enabled="false">
            <stringProp name="TestPlan.comments">This is filter out all the sourcekey that aren&apos;t null and write it out to a file</stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import org.apache.commons.io.FileUtils
import java.text.SimpleDateFormat;
// Get total number of matches. (Returns string)
def resultCount = vars.get(&quot;name&quot;)
log.warn &apos;Output to jmeter console&apos; +  resultCount
// Generate timestamp to create uniue file name.
String fileSuffix = new SimpleDateFormat(&quot;ddMMyyyy&quot;).format(new Date())
// Create file Object
f = new File(&quot;/Users/zameermalim/Documents/Oracle/consoleStagingUsashburn1oraclecloud/name_&quot;+fileSuffix+&quot;.csv&quot;)
records = vars.get(&quot;name&quot;)
FileUtils.writeStringToFile(f,records + System.getProperty(&quot;line.separator&quot;),true)
//for (int i=1; i&lt;=resultCount.toInteger(); i++)
//{
  // Get each matching result one by one.
  //records = vars.get(&quot;ExtractedName_&quot;+i)
// Write result to csv file.
  //FileUtils.writeStringToFile(f,records + System.getProperty(&quot;line.separator&quot;),true)
//}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Search Signature Terms 10 with offset" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;tenancyId&quot;: &quot;${TENANCYID}&quot;, &quot;authUserId&quot;: &quot;${AUTHUSERID}&quot;,&quot;keyFingerprint&quot;: &quot;${FINGERPRINT}&quot;,&quot;privateKeyFilename&quot;: &quot;${PRIVATEKEY}&quot;, &quot;geturl&quot;: &quot;https://${hostname}/20190325/catalogs/${instanceid}/search?limit=10&amp;page=offset=${OffsetValue}&quot;, &quot;messageBody&quot;:&quot;{\&quot;facetedQuery\&quot;:\&quot;*\&quot;,\&quot;dimensions\&quot;:[\&quot;customproperties\&quot;,\&quot;CatalogType\&quot;,\&quot;UpdatedBy\&quot;],\&quot;filters\&quot;:{\&quot;searchStringFilters\&quot;:[{\&quot;field\&quot;:\&quot;CatalogType\&quot;,\&quot;values\&quot;:[\&quot;Term\&quot;,\&quot;Category\&quot;]}],\&quot;searchDateFilters\&quot;:[]},\&quot;sort\&quot;:[{\&quot;sortBy\&quot;:\&quot;Relevancy\&quot;,\&quot;sortOrder\&quot;:\&quot;asc\&quot;}]}&quot;, &quot;restType&quot; : &quot;POST&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${OCIMicroservice}</stringProp>
          <stringProp name="HTTPSampler.port">9080</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/sign/getsignature</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">date7</stringProp>
            <stringProp name="RegexExtractor.regex">date:(.*?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">keyid7</stringProp>
            <stringProp name="RegexExtractor.regex">Authorization:(.+);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SHAPA</stringProp>
            <stringProp name="RegexExtractor.regex">x-content-sha256:(.+?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">0</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DCAT Search Terms limit 10 with offset" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;facetedQuery&quot;:&quot;*&quot;,&quot;dimensions&quot;:[&quot;customproperties&quot;,&quot;CatalogType&quot;,&quot;UpdatedBy&quot;],&quot;filters&quot;:{&quot;searchStringFilters&quot;:[{&quot;field&quot;:&quot;CatalogType&quot;,&quot;values&quot;:[&quot;Term&quot;,&quot;Category&quot;]}],&quot;searchDateFilters&quot;:[]},&quot;sort&quot;:[{&quot;sortBy&quot;:&quot;Relevancy&quot;,&quot;sortOrder&quot;:&quot;asc&quot;}]}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/20190325/catalogs/${instanceid}/search?limit=10&amp;page=offset=${OffsetValue}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${keyid7}</stringProp>
              </elementProp>
              <elementProp name="date" elementType="Header">
                <stringProp name="Header.name">date</stringProp>
                <stringProp name="Header.value">${date7}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">host</stringProp>
                <stringProp name="Header.value">${hostname}</stringProp>
              </elementProp>
              <elementProp name="x-content-sha256" elementType="Header">
                <stringProp name="Header.name">x-content-sha256</stringProp>
                <stringProp name="Header.value">${SHAPA}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">entityid</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;entityKey&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">${__threadNum}</stringProp>
          </RegexExtractor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="key" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">key</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..items.[*]key</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">null</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="name, dataAssetKey" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">name;dataAssetKey</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.key==&apos;${key}&apos;)].name;$..[?(@.key==&apos;${key}&apos;)].dataAssetKey</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">null;null</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="key, name, dataAssetKey" enabled="false">
            <stringProp name="JSONPostProcessor.referenceNames">key;name;dataAssetKey</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..items.[${entityNameCorrelator}]key;$..items.[${entityNameCorrelator}]name;$..items.[${entityNameCorrelator}]dataAssetKey</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">0;0;0</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">0</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Search Signature Terms with Name filter limit 10 with offset" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;tenancyId&quot;: &quot;${TENANCYID}&quot;, &quot;authUserId&quot;: &quot;${AUTHUSERID}&quot;,&quot;keyFingerprint&quot;: &quot;${FINGERPRINT}&quot;,&quot;privateKeyFilename&quot;: &quot;${PRIVATEKEY}&quot;, &quot;geturl&quot;: &quot;https://${hostname}/20190325/catalogs/${instanceid}/search?limit=10&quot;, &quot;messageBody&quot;:&quot;{\&quot;facetedQuery\&quot;:\&quot;MYTABLE\&quot;,\&quot;dimensions\&quot;:[\&quot;customproperties\&quot;,\&quot;CatalogType\&quot;,\&quot;UpdatedBy\&quot;],\&quot;filters\&quot;:{\&quot;searchStringFilters\&quot;:[{\&quot;field\&quot;:\&quot;CatalogType\&quot;,\&quot;values\&quot;:[\&quot;Term\&quot;,\&quot;Category\&quot;]}],\&quot;searchDateFilters\&quot;:[]},\&quot;sort\&quot;:[{\&quot;sortBy\&quot;:\&quot;Relevancy\&quot;,\&quot;sortOrder\&quot;:\&quot;asc\&quot;}]}&quot;, &quot;restType&quot; : &quot;POST&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${OCIMicroservice}</stringProp>
          <stringProp name="HTTPSampler.port">9080</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/sign/getsignature</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">date7</stringProp>
            <stringProp name="RegexExtractor.regex">date:(.*?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">keyid7</stringProp>
            <stringProp name="RegexExtractor.regex">Authorization:(.+);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SHAPA</stringProp>
            <stringProp name="RegexExtractor.regex">x-content-sha256:(.+?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">0</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DCAT Search Terms with Name filter limit 10 with offset" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;facetedQuery&quot;:&quot;MYTABLE&quot;,&quot;dimensions&quot;:[&quot;customproperties&quot;,&quot;CatalogType&quot;,&quot;UpdatedBy&quot;],&quot;filters&quot;:{&quot;searchStringFilters&quot;:[{&quot;field&quot;:&quot;CatalogType&quot;,&quot;values&quot;:[&quot;Term&quot;,&quot;Category&quot;]}],&quot;searchDateFilters&quot;:[]},&quot;sort&quot;:[{&quot;sortBy&quot;:&quot;Relevancy&quot;,&quot;sortOrder&quot;:&quot;asc&quot;}]}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/20190325/catalogs/${instanceid}/search?limit=10</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${keyid7}</stringProp>
              </elementProp>
              <elementProp name="date" elementType="Header">
                <stringProp name="Header.name">date</stringProp>
                <stringProp name="Header.value">${date7}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">host</stringProp>
                <stringProp name="Header.value">${hostname}</stringProp>
              </elementProp>
              <elementProp name="x-content-sha256" elementType="Header">
                <stringProp name="Header.name">x-content-sha256</stringProp>
                <stringProp name="Header.value">${SHAPA}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">entityid</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;entityKey&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">${__threadNum}</stringProp>
          </RegexExtractor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="key" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">key</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..items.[*]key</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">0</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="key, name, dataAssetKey" enabled="false">
            <stringProp name="JSONPostProcessor.referenceNames">key;name;dataAssetKey</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..items.[${entityNameCorrelator}]key;$..items.[${entityNameCorrelator}]name;$..items.[${entityNameCorrelator}]dataAssetKey</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">0;0;0</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="List Recommendations Term Signature " enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;tenancyId&quot;: &quot;${TENANCYID}&quot;, &quot;authUserId&quot;: &quot;${AUTHUSERID}&quot;,&quot;keyFingerprint&quot;: &quot;${FINGERPRINT}&quot;,&quot;privateKeyFilename&quot;: &quot;${PRIVATEKEY}&quot;, &quot;geturl&quot;: &quot;https://${hostname}/20190325/catalogs/${instanceid}/actions/getRecommendations?recommendationType=LINK_GLOSSARY_TERM&amp;sourceObjectKey=${key}&amp;sourceObjectType=TERM&amp;recommendationStatus=INFERRED&quot;, &quot;messageBody&quot;:&quot;&quot;, &quot;restType&quot; : &quot;POST&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${OCIMicroservice}</stringProp>
          <stringProp name="HTTPSampler.port">9080</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/sign/getsignature</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">date7</stringProp>
            <stringProp name="RegexExtractor.regex">date:(.*?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">keyid7</stringProp>
            <stringProp name="RegexExtractor.regex">Authorization:(.+);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SHAPA</stringProp>
            <stringProp name="RegexExtractor.regex">x-content-sha256:(.+?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">0</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="DCAT List Recommedations Term" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DCAT List Recommedations Term" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Variables pré-définies" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/20190325/catalogs/${instanceid}/actions/getRecommendations?recommendationType=LINK_GLOSSARY_TERM&amp;sourceObjectKey=${key}&amp;sourceObjectType=TERM&amp;recommendationStatus=INFERRED</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">${keyid7}</stringProp>
                </elementProp>
                <elementProp name="date" elementType="Header">
                  <stringProp name="Header.name">date</stringProp>
                  <stringProp name="Header.value">${date7}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">host</stringProp>
                  <stringProp name="Header.value">${hostname}</stringProp>
                </elementProp>
                <elementProp name="x-content-sha256" elementType="Header">
                  <stringProp name="Header.name">x-content-sha256</stringProp>
                  <stringProp name="Header.value">${SHAPA}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="jp@gc - JSON/YAML Path Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.*</stringProp>
              <stringProp name="EXPECTED_VALUE">[]</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">true</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
              <stringProp name="INPUT_FORMAT">JSON</stringProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="sourceObjectKey" enabled="false">
              <stringProp name="TestPlan.comments">sourceObjectKey</stringProp>
              <stringProp name="JSONPostProcessor.referenceNames">sourceObjectKey</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..sourceObjectKey</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NO_MATCH</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="sourceObjectName" enabled="false">
              <stringProp name="TestPlan.comments">sourceObjectName</stringProp>
              <stringProp name="JSONPostProcessor.referenceNames">sourceObjectName</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..sourceObjectName</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NO_MATCH</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="sourceObjectKey match writer to file" enabled="false">
              <stringProp name="TestPlan.comments">This is filter out all the sourcekey that aren&apos;t null and write it out to a file</stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import org.apache.commons.io.FileUtils
import java.text.SimpleDateFormat;
// Get total number of matches. (Returns string)
def resultCount = vars.get(&quot;sourceObjectKey&quot;)
log.warn &apos;Output to jmeter console&apos; +  resultCount
// Generate timestamp to create uniue file name.
String fileSuffix = new SimpleDateFormat(&quot;ddMMyyyy&quot;).format(new Date())
// Create file Object
f = new File(&quot;/Users/zameermalim/Documents/Oracle/consoleStagingUsashburn1oraclecloud/sourceObjectKey_&quot;+fileSuffix+&quot;.csv&quot;)
records = vars.get(&quot;sourceObjectKey&quot;)
FileUtils.writeStringToFile(f,records + System.getProperty(&quot;line.separator&quot;),true)
//for (int i=1; i&lt;=resultCount.toInteger(); i++)
//{
  // Get each matching result one by one.
  //records = vars.get(&quot;ExtractedName_&quot;+i)
// Write result to csv file.
  //FileUtils.writeStringToFile(f,records + System.getProperty(&quot;line.separator&quot;),true)
//}</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="sourceObjectName match writer to file" enabled="false">
              <stringProp name="TestPlan.comments">This is filter out all the sourcekey that aren&apos;t null and write it out to a file</stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import org.apache.commons.io.FileUtils
import java.text.SimpleDateFormat;
// Get total number of matches. (Returns string)
def resultCount = vars.get(&quot;sourceObjectName&quot;)
log.warn &apos;Output to jmeter console&apos; +  resultCount
// Generate timestamp to create uniue file name.
String fileSuffix = new SimpleDateFormat(&quot;ddMMyyyy&quot;).format(new Date())
// Create file Object
f = new File(&quot;/Users/zameermalim/Documents/Oracle/consoleStagingUsashburn1oraclecloud/sourceObjectName_&quot;+fileSuffix+&quot;.csv&quot;)
records = vars.get(&quot;sourceObjectName&quot;)
FileUtils.writeStringToFile(f,records + System.getProperty(&quot;line.separator&quot;),true)
//for (int i=1; i&lt;=resultCount.toInteger(); i++)
//{
  // Get each matching result one by one.
  //records = vars.get(&quot;ExtractedName_&quot;+i)
// Write result to csv file.
  //FileUtils.writeStringToFile(f,records + System.getProperty(&quot;line.separator&quot;),true)
//}</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
          </hashTree>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">0</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="List Recommendations Data Entity Signature with specific key" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;tenancyId&quot;: &quot;${TENANCYID}&quot;, &quot;authUserId&quot;: &quot;${AUTHUSERID}&quot;,&quot;keyFingerprint&quot;: &quot;${FINGERPRINT}&quot;,&quot;privateKeyFilename&quot;: &quot;${PRIVATEKEY}&quot;, &quot;geturl&quot;: &quot;https://${hostname}/20190325/catalogs/${instanceid}/actions/getRecommendations?recommendationType=LINK_GLOSSARY_TERM&amp;sourceObjectKey=b9d34bd0-b331-4aaa-bea5-f7d982a11b8d&amp;sourceObjectType=TERM&amp;recommendationStatus=INFERRED&quot;, &quot;messageBody&quot;:&quot;&quot;, &quot;restType&quot; : &quot;POST&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${OCIMicroservice}</stringProp>
          <stringProp name="HTTPSampler.port">9080</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/sign/getsignature</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">date7</stringProp>
            <stringProp name="RegexExtractor.regex">date:(.*?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">keyid7</stringProp>
            <stringProp name="RegexExtractor.regex">Authorization:(.+);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SHAPA</stringProp>
            <stringProp name="RegexExtractor.regex">x-content-sha256:(.+?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="DCAT List Recommedations Data Entity with specific key" enabled="false">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DCAT List Recommedations Data Entity" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Variables pré-définies" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/20190325/catalogs/${instanceid}/actions/getRecommendations?recommendationType=LINK_GLOSSARY_TERM&amp;sourceObjectKey=b9d34bd0-b331-4aaa-bea5-f7d982a11b8d&amp;sourceObjectType=TERM&amp;recommendationStatus=INFERRED</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">2e7ab8b9-9dc9-457b-ada7-280703b884f8</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">${keyid7}</stringProp>
                </elementProp>
                <elementProp name="date" elementType="Header">
                  <stringProp name="Header.name">date</stringProp>
                  <stringProp name="Header.value">${date7}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">host</stringProp>
                  <stringProp name="Header.value">${hostname}</stringProp>
                </elementProp>
                <elementProp name="x-content-sha256" elementType="Header">
                  <stringProp name="Header.name">x-content-sha256</stringProp>
                  <stringProp name="Header.value">${SHAPA}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="jp@gc - JSON/YAML Path Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.*</stringProp>
              <stringProp name="EXPECTED_VALUE">[]</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">true</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
              <stringProp name="INPUT_FORMAT">JSON</stringProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="sourceObjectKey" enabled="false">
              <stringProp name="TestPlan.comments">sourceObjectKey</stringProp>
              <stringProp name="JSONPostProcessor.referenceNames">sourceObjectKey</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..sourceObjectKey</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NO_MATCH</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="sourceObjectName" enabled="false">
              <stringProp name="TestPlan.comments">sourceObjectName</stringProp>
              <stringProp name="JSONPostProcessor.referenceNames">sourceObjectName</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..sourceObjectName</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NO_MATCH</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="sourceObjectKey match writer to file" enabled="false">
              <stringProp name="TestPlan.comments">This is filter out all the sourcekey that aren&apos;t null and write it out to a file</stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import org.apache.commons.io.FileUtils
import java.text.SimpleDateFormat;
// Get total number of matches. (Returns string)
def resultCount = vars.get(&quot;sourceObjectKey&quot;)
log.warn &apos;Output to jmeter console&apos; +  resultCount
// Generate timestamp to create uniue file name.
String fileSuffix = new SimpleDateFormat(&quot;ddMMyyyy&quot;).format(new Date())
// Create file Object
f = new File(&quot;/Users/zameermalim/Documents/Oracle/consoleStagingUsashburn1oraclecloud/sourceObjectKey_&quot;+fileSuffix+&quot;.csv&quot;)
records = vars.get(&quot;sourceObjectKey&quot;)
FileUtils.writeStringToFile(f,records + System.getProperty(&quot;line.separator&quot;),true)
//for (int i=1; i&lt;=resultCount.toInteger(); i++)
//{
  // Get each matching result one by one.
  //records = vars.get(&quot;ExtractedName_&quot;+i)
// Write result to csv file.
  //FileUtils.writeStringToFile(f,records + System.getProperty(&quot;line.separator&quot;),true)
//}</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="sourceObjectName match writer to file" enabled="false">
              <stringProp name="TestPlan.comments">This is filter out all the sourcekey that aren&apos;t null and write it out to a file</stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import org.apache.commons.io.FileUtils
import java.text.SimpleDateFormat;
// Get total number of matches. (Returns string)
def resultCount = vars.get(&quot;sourceObjectName&quot;)
log.warn &apos;Output to jmeter console&apos; +  resultCount
// Generate timestamp to create uniue file name.
String fileSuffix = new SimpleDateFormat(&quot;ddMMyyyy&quot;).format(new Date())
// Create file Object
f = new File(&quot;/Users/zameermalim/Documents/Oracle/consoleStagingUsashburn1oraclecloud/sourceObjectName_&quot;+fileSuffix+&quot;.csv&quot;)
records = vars.get(&quot;sourceObjectName&quot;)
FileUtils.writeStringToFile(f,records + System.getProperty(&quot;line.separator&quot;),true)
//for (int i=1; i&lt;=resultCount.toInteger(); i++)
//{
  // Get each matching result one by one.
  //records = vars.get(&quot;ExtractedName_&quot;+i)
// Write result to csv file.
  //FileUtils.writeStringToFile(f,records + System.getProperty(&quot;line.separator&quot;),true)
//}</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
              <stringProp name="DurationAssertion.duration">5000</stringProp>
            </DurationAssertion>
            <hashTree/>
          </hashTree>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="BG glossary" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">3600</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="paasdevdcatqa_glossary" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="OCIMicroservice" elementType="Argument">
              <stringProp name="Argument.name">OCIMicroservice</stringProp>
              <stringProp name="Argument.value">localhost</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="keyd" elementType="Argument">
              <stringProp name="Argument.name">keyd</stringProp>
              <stringProp name="Argument.value">/Users/zameermalim/Documents/Oracle/console-staging.us-ashburn-1.oraclecloud.com/zameer.rashid.malim-01-29-12-08.pem</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TENANCYID" elementType="Argument">
              <stringProp name="Argument.name">TENANCYID</stringProp>
              <stringProp name="Argument.value">ocid1.tenancy.oc1..aaaaaaaahk25msb4bift5w2tlqo6tcepprf54thivzjr2k4vohezlmiooywa</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="AUTHUSERID" elementType="Argument">
              <stringProp name="Argument.name">AUTHUSERID</stringProp>
              <stringProp name="Argument.value">ocid1.user.oc1..aaaaaaaa7mn3ws2ubofutwhfxu5db76tukft2ppsjpx6xqf77ohsvejbtvba</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="FINGERPRINT" elementType="Argument">
              <stringProp name="Argument.name">FINGERPRINT</stringProp>
              <stringProp name="Argument.value">1a:ab:f6:bd:35:dc:60:48:25:00:f9:10:93:1e:0e:a9</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="hostname" elementType="Argument">
              <stringProp name="Argument.name">hostname</stringProp>
              <stringProp name="Argument.value">datacatalog-qa.us-ashburn-1.oci.oraclecloud.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="PRIVATEKEY" elementType="Argument">
              <stringProp name="Argument.name">PRIVATEKEY</stringProp>
              <stringProp name="Argument.value">-----BEGIN PRIVATE KEY-----\n MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCp836eRiGV7Lqn 8VOKaR9hO7yKMHEnAFNaFBzPcFu/TcfUoEMfZEMsgVfoPZAo+ZgXKPpzZ6gPZtRt flJif8d4NQ3KnoxEZ1O7tDES6jRdPtc1TPAoOmga3ns9vcr69DCtiTMmZI7vglL+ nquNI94zoHeIkAwGXeC+WsEwSr2hBf4VMqHoia4RrrdPwNkXFtPvihJ9rShkDVnn z1xqZY82PFDn3zJuNyJOA+3zof0e6HXJ0Y8BSis9rxq50xL9Qdkr2PjCZ2nHq6Pa hZeUej0eDBA3vDkM+P1RpZvwLel6W3koWQwYTMFT1/JJAgpDa3MufwU2ppLTCDxk 7IhXH+xXAgMBAAECggEAQI0seDiCFDyM7zIx/X4NPbTfWYupxtsQTcQa502xg3mr H59Zr2g5PYPJXHxZr76R3qYhbskd4++2Wvpil2gaXxWjreTHuUmX29FG3HzZs9sl Cek1xMnedeowXFSk7unmPVvB8mC6i81v8adZ2KuZf/mAvX2dG6P3s8Wr4EhbO3f5 LJEV9di7N9C/qQuEOfR5Iv7b2KbQSyQwC5+NaI6gXsvOxEQw/hdAPzMfcX9DKkz9 ZSDriSRdm+uSDVdhje4b4X4umKvDbNiURK/Z4TyrM8YZnQ5WrkGfWhrgESAL+30L 8Yaau7Ifteo/onIHQJHgK+des1Mn6njDX/CUwXM0KQKBgQDX5JTYXtY74H9Ck7nd qb2zhtRHm0sVJjd5J8ypkNWfdqcK94ipqr1LV9PawyrmIkM6vFlMU9qveOFod031 6hOVTr+fyS5BRMYLT0PwpAVMKHwqaK3l3pQHQbZ5LB/pAbIPw7DvaVdGiYXt5Ctk RXXm/+4qyuetBwkIX3P1N+x22QKBgQDJhgTdoPoyGbJRXTCDHhH2x2BeRcSntx9k jKe/8hhLt0BEsEM6Y8db0vSUSoNU3Hwt30Ziq8qAW5QhdCmgTwXe4G+DU1HUQGYn Ef0jT4S9CjhRg4y4gWvCCDKzjWChGvozObbkmGg2HfUNa+RLJTUkii6xwpzj8HKN eLDTzy9erwKBgH71gUKsorebkbsJPKhKBbDpfTSO8lyBmOW6rfSZo8ae9CTS5J9C NQd1orRnSXcEdxy3XpwwQ84k/Al+/226NcH8CVxh5r2jQAOunXmKO0NKG5qk7H7d oZeS4Ufo1usjgB8dKZPhEt38SbJYF9xjrK4nm1u27v8lv/4YhAyU0o4hAoGBAI4U 3U1c98lm8KAI8fEfvE6fV0RgMDyHEa0UthjQmWyYsMk89MkwHBiTbTk4J8wm/65f 4wIiWM2Sw6eqfMa3sE3pMvYGQoVBOkSFnFHO+KlHkVl3RDm5lb3hhc2t+djcala/ dEFLav3stR9XWEfa3dL7Udymd3MFzd4Mn69WPfGlAoGAE3R73QJcCiaGF38Xmivg OS+QCroZoQxiTIT3Wr9k1y5ARiJLpo0SGxB1NjafMucOsvTfW2YhuxSYxATTqZLE nHNLvtiTguKYEp68FRLgVEm7gcoMaFmgy+VvjOEGPJ46QrKMwnzIUT2oOXTtnQPq dS6yauJBm8thM4juwTbtr7Q=\n -----END PRIVATE KEY-----</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="instanceid" elementType="Argument">
              <stringProp name="Argument.name">instanceid</stringProp>
              <stringProp name="Argument.value">ocid1.datacatalog.oc1.iad.aaaaaaaaspkqq2z5uwn6zngetdf4flgw7rllqdrpeq5bcwxvinnfan33wxba</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">paasdevdcatqa</stringProp>
        </Arguments>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="paasdevdcatqa_recommendation" enabled="false">
          <collectionProp name="Arguments.arguments">
            <elementProp name="OCIMicroservice" elementType="Argument">
              <stringProp name="Argument.name">OCIMicroservice</stringProp>
              <stringProp name="Argument.value">localhost</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="keyd" elementType="Argument">
              <stringProp name="Argument.name">keyd</stringProp>
              <stringProp name="Argument.value">/Users/zameermalim/Documents/Oracle/console-staging.us-ashburn-1.oraclecloud.com/zameer.rashid.malim-01-29-12-08.pem</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TENANCYID" elementType="Argument">
              <stringProp name="Argument.name">TENANCYID</stringProp>
              <stringProp name="Argument.value">ocid1.tenancy.oc1..aaaaaaaahk25msb4bift5w2tlqo6tcepprf54thivzjr2k4vohezlmiooywa</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="AUTHUSERID" elementType="Argument">
              <stringProp name="Argument.name">AUTHUSERID</stringProp>
              <stringProp name="Argument.value">ocid1.user.oc1..aaaaaaaa7mn3ws2ubofutwhfxu5db76tukft2ppsjpx6xqf77ohsvejbtvba</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="FINGERPRINT" elementType="Argument">
              <stringProp name="Argument.name">FINGERPRINT</stringProp>
              <stringProp name="Argument.value">1a:ab:f6:bd:35:dc:60:48:25:00:f9:10:93:1e:0e:a9</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="hostname" elementType="Argument">
              <stringProp name="Argument.name">hostname</stringProp>
              <stringProp name="Argument.value">datacatalog-qa.us-ashburn-1.oci.oraclecloud.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="PRIVATEKEY" elementType="Argument">
              <stringProp name="Argument.name">PRIVATEKEY</stringProp>
              <stringProp name="Argument.value">-----BEGIN PRIVATE KEY-----\n MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCp836eRiGV7Lqn 8VOKaR9hO7yKMHEnAFNaFBzPcFu/TcfUoEMfZEMsgVfoPZAo+ZgXKPpzZ6gPZtRt flJif8d4NQ3KnoxEZ1O7tDES6jRdPtc1TPAoOmga3ns9vcr69DCtiTMmZI7vglL+ nquNI94zoHeIkAwGXeC+WsEwSr2hBf4VMqHoia4RrrdPwNkXFtPvihJ9rShkDVnn z1xqZY82PFDn3zJuNyJOA+3zof0e6HXJ0Y8BSis9rxq50xL9Qdkr2PjCZ2nHq6Pa hZeUej0eDBA3vDkM+P1RpZvwLel6W3koWQwYTMFT1/JJAgpDa3MufwU2ppLTCDxk 7IhXH+xXAgMBAAECggEAQI0seDiCFDyM7zIx/X4NPbTfWYupxtsQTcQa502xg3mr H59Zr2g5PYPJXHxZr76R3qYhbskd4++2Wvpil2gaXxWjreTHuUmX29FG3HzZs9sl Cek1xMnedeowXFSk7unmPVvB8mC6i81v8adZ2KuZf/mAvX2dG6P3s8Wr4EhbO3f5 LJEV9di7N9C/qQuEOfR5Iv7b2KbQSyQwC5+NaI6gXsvOxEQw/hdAPzMfcX9DKkz9 ZSDriSRdm+uSDVdhje4b4X4umKvDbNiURK/Z4TyrM8YZnQ5WrkGfWhrgESAL+30L 8Yaau7Ifteo/onIHQJHgK+des1Mn6njDX/CUwXM0KQKBgQDX5JTYXtY74H9Ck7nd qb2zhtRHm0sVJjd5J8ypkNWfdqcK94ipqr1LV9PawyrmIkM6vFlMU9qveOFod031 6hOVTr+fyS5BRMYLT0PwpAVMKHwqaK3l3pQHQbZ5LB/pAbIPw7DvaVdGiYXt5Ctk RXXm/+4qyuetBwkIX3P1N+x22QKBgQDJhgTdoPoyGbJRXTCDHhH2x2BeRcSntx9k jKe/8hhLt0BEsEM6Y8db0vSUSoNU3Hwt30Ziq8qAW5QhdCmgTwXe4G+DU1HUQGYn Ef0jT4S9CjhRg4y4gWvCCDKzjWChGvozObbkmGg2HfUNa+RLJTUkii6xwpzj8HKN eLDTzy9erwKBgH71gUKsorebkbsJPKhKBbDpfTSO8lyBmOW6rfSZo8ae9CTS5J9C NQd1orRnSXcEdxy3XpwwQ84k/Al+/226NcH8CVxh5r2jQAOunXmKO0NKG5qk7H7d oZeS4Ufo1usjgB8dKZPhEt38SbJYF9xjrK4nm1u27v8lv/4YhAyU0o4hAoGBAI4U 3U1c98lm8KAI8fEfvE6fV0RgMDyHEa0UthjQmWyYsMk89MkwHBiTbTk4J8wm/65f 4wIiWM2Sw6eqfMa3sE3pMvYGQoVBOkSFnFHO+KlHkVl3RDm5lb3hhc2t+djcala/ dEFLav3stR9XWEfa3dL7Udymd3MFzd4Mn69WPfGlAoGAE3R73QJcCiaGF38Xmivg OS+QCroZoQxiTIT3Wr9k1y5ARiJLpo0SGxB1NjafMucOsvTfW2YhuxSYxATTqZLE nHNLvtiTguKYEp68FRLgVEm7gcoMaFmgy+VvjOEGPJ46QrKMwnzIUT2oOXTtnQPq dS6yauJBm8thM4juwTbtr7Q=\n -----END PRIVATE KEY-----</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="instanceid" elementType="Argument">
              <stringProp name="Argument.name">instanceid</stringProp>
              <stringProp name="Argument.value">ocid1.datacatalog.oc1.iad.aaaaaaaamioppqjmrk6cv4c5qji7d2zw3bvzg6xdf575gj4nkzqyjw52i4ea</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">paasdevdcatqa</stringProp>
        </Arguments>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="paasdevdcatinfra" enabled="false">
          <collectionProp name="Arguments.arguments">
            <elementProp name="OCIMicroservice" elementType="Argument">
              <stringProp name="Argument.name">OCIMicroservice</stringProp>
              <stringProp name="Argument.value">localhost</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="keyd" elementType="Argument">
              <stringProp name="Argument.name">keyd</stringProp>
              <stringProp name="Argument.value">/Users/zameermalim/Documents/Oracle/consoleStagingUsashburn1oraclecloud/zameer.rashid.malim-02-17-08-30paasdecdcatinfra.pem</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TENANCYID" elementType="Argument">
              <stringProp name="Argument.name">TENANCYID</stringProp>
              <stringProp name="Argument.value">ocid1.tenancy.oc1..aaaaaaaarmzlx7mdssig6ml73hvndduyimqicw6xi275xn2opyr4rioqjs2q</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="AUTHUSERID" elementType="Argument">
              <stringProp name="Argument.name">AUTHUSERID</stringProp>
              <stringProp name="Argument.value">ocid1.user.oc1..aaaaaaaasirrtdkxxp7votndbprqhru52mvgy5qihqtkgjlgpc2ubsdj2jkq</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="FINGERPRINT" elementType="Argument">
              <stringProp name="Argument.name">FINGERPRINT</stringProp>
              <stringProp name="Argument.value">58:e5:b3:f2:1e:ae:ca:23:7c:75:8d:52:3b:e9:0b:08</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="hostname" elementType="Argument">
              <stringProp name="Argument.name">hostname</stringProp>
              <stringProp name="Argument.value">datacatalog-devn.us-phoenix-1.oci.oraclecloud.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="PRIVATEKEY" elementType="Argument">
              <stringProp name="Argument.name">PRIVATEKEY</stringProp>
              <stringProp name="Argument.value">-----BEGIN PRIVATE KEY-----\nMIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQC39SYdrHrTu+WJ nFoVHzqxfWR47vWSmUT8FFU28Vc3oCuZGWwZ+K77Sozm6n6Z4/LG4eOVEnqV2nYr Hr3+JIm/UzAhJfKsudrSOeKhLXWo9KzY7J5AXMLscoKs4Pt2uiPZWdODaAbp+Xqb wNR20VidT8oeCxH5PYEpuFNX70x7syaTJWRBItWNL+pj1mGnfQRRSoQVbdu+jt6z euLR9/Vgwv3CunOZqxuQWeUUUsSkNo4/3PYG+LvR3CPcCpRWqwcIC3uW0+PxEWkF a/vLXjE6dSE9DBaG7S/2y79MF7dW0Db38ztSpFWWEiMuB3VokMOehpV9z1t+bW1j 7szd9a87AgMBAAECggEAWT8LDexm7qBC/R8oqQSsof12qCEubMAFMtLegLhXmvoP DMjDpFn88pc5grITV6+6Ufi3Q9RiOp9xIvxYKpspZPQD7qENefT1D3bb11xJr/18 egVZxVn7i2EGur6v4Orvh3xH3IG0kQDjFftYWIi6GB/kq+ys/KF1L3tom8nR7lSq B/z2iezJjYf/u5vDev9PyfxReKANYbeXYVStHrPpr4NL7tC2GRrHT/nFRfR4YBbw Iv56XUt70NM+2tDTRGi77x7ShNS/2nt8cP+Om85w7BMANGaEwVJaGjIqOTtmdlT7 kFjYxW81s8qXesosZGGdJSTKmvCTJtSIeNMU1QNv4QKBgQDnntV4ocblf9ynPtPe B2CAXk3X9QNexT6v5zjzjIyhjhsWBJgDReZkM588ArlwTDgR9amdCrR8mmUK3I0W YfR7OLI+xeffT3tQBTiZ2zlrHE3+4iHG2qUrnMJbOzRVzFp6QNBBMhJQ6UPJ0rCg qKls/okT10toQqGaPKlTWJpqiwKBgQDLUgIri35GGtLD1g1RlCgOGIXJf86Pq+fR Q2eGGz6rlOiQW6aEgYbL1uEGMg6S7JVezCXsN+wGXrlnrXSJubYJPyegary3tFwg fB9it1TP0udGXds4p6BrgQ9/p9FvvvoOxDFnj+I1/a6LCj8X8ZLlr/kg32PtomyW mkaUnR1UEQKBgDmN6WOxZ3gNvqm8Xe81DBC53kQEeRLqlnolTayPRz65zhc5iwB9 NRO/FBlYX/X8qo4j6kLArzqrLuJ1DYX7T0HzQ69/g++kk3K96WOp6umnveXRES2V lSdyK4V5/7Y2MmFgi583rv92B0c2WHeDkZ4o3a0VeYJt1DQ8UKMKSEyjAoGBALCo lcgeEN56yexsnO/n6hGtTvlwOhrtQ6O4jEeifoZ5AMUFTR7OqD+OecB3V+Bi/bn7 aWvgfwxd23xw4tQT704DeLvSYhy/8lgrYN3V6zQTzO1/+U01oJYn8j55oukUJ5MS 9tZD10oQHEsk4QM92+QETVM5pkrAmNcWPwM7rFLxAoGBAInNWXs54xAgkwOVsBOx x9YvEYPBoXPxVkfoGUeal3a0Cs2iggze9vvcUMkM0vB2MWfnORJzUjF9XoQMCMwz rbchcn+uW4WrdkpDvXuoN3G+/mQqlPUomz4ZlVUthclL3PlEvf2QBF8VTgpiua5K 1GrxXWEe8M/HEz8TPP8+SsTF\n -----END PRIVATE KEY-----</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="instanceid" elementType="Argument">
              <stringProp name="Argument.name">instanceid</stringProp>
              <stringProp name="Argument.value">ocid1.datacatalog.oc1.phx.aaaaaaaagqp6u4kkpvjlnn2mcg2xzswdcsnvi3drqdgqfpyjrrtnpm4wqm5a</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">paasdevdcatinfra</stringProp>
        </Arguments>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="dcatpreprod" enabled="false">
          <collectionProp name="Arguments.arguments">
            <elementProp name="OCIMicroservice" elementType="Argument">
              <stringProp name="Argument.name">OCIMicroservice</stringProp>
              <stringProp name="Argument.value">localhost</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="keyd" elementType="Argument">
              <stringProp name="Argument.name">keyd</stringProp>
              <stringProp name="Argument.value">/Users/zameermalim/Documents/Oracle/console-staging.us-ashburn-1.oraclecloud.com/zameer.rashid.malim-01-29-12-08.pem</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TENANCYID" elementType="Argument">
              <stringProp name="Argument.name">TENANCYID</stringProp>
              <stringProp name="Argument.value">ocid1.tenancy.oc1..aaaaaaaao6ootzd3fq4ebh2pr57yijfgxj6wnkncytdqlrwrdekiva5nqr7a</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="AUTHUSERID" elementType="Argument">
              <stringProp name="Argument.name">AUTHUSERID</stringProp>
              <stringProp name="Argument.value">ocid1.user.oc1..aaaaaaaahwllyvnbvm7sivnrlrzptqk3tb54wz3uxfjheliwkk5nemkdx3vq</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="FINGERPRINT" elementType="Argument">
              <stringProp name="Argument.name">FINGERPRINT</stringProp>
              <stringProp name="Argument.value">48:b4:70:c6:81:8c:4d:f9:4d:1e:a5:72:fd:10:54:0c</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="hostname" elementType="Argument">
              <stringProp name="Argument.name">hostname</stringProp>
              <stringProp name="Argument.value">datacatalog-stage.us-ashburn-1.oci.oraclecloud.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="PRIVATEKEY" elementType="Argument">
              <stringProp name="Argument.name">PRIVATEKEY</stringProp>
              <stringProp name="Argument.value">-----BEGIN PRIVATE KEY-----\nMIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQDAOa6LdKjrlOtR Uf5UeDf3KJVVSqo+d1XvBqFIsbwRvIy8fE1bP1tlbWdgPyreslwJlsXNnnRzyQxs 21a0suztXQarCf7b1Xiit8D0sX+02T2S0Q2+uT+LOZ3ChgyiUIiB6UX1msFluF6t JFhpEcmrxDHhiI/8OennoMftuRNDbxL53IFPzfaroXb0lmELqAqW0pB5ZWOIT8E6 PqnypaGASbnYwhyLqfOIt4kRGSCOTgFDY0QkbimTBsInJTVz6IzlmxONFiHGVrXP V0HmLZ9XZ2s6djQAOJdHduAVR+79c02pLevUuQHW1BbiVAhfaBw4+0WBsP3edHnM nhYnyd6DAgMBAAECggEAXvW/392kOykIrNYkHad8AknWp9loS86ZMaklUOuYnGx4 W/7OGjcs1+jZikb6TyRuakBE/ER8g9x8mmQqq76+Y64yhpk8AW6uFzhOhrMPAxDU paxHrYIHPaibYkblg+Pj48WRDXlDdBRGFSOg11r1tTiJacCUXMZhYk9fpPTqasNf fVTcih+rb6q/uLlUMZ5ETENpLD75h6HKZ1CAubzzpdokVG+2A+b79XR9mFIqtQd0 bFiJ5pOomb80FqJ4tCelfCex8Z+4pKw6CsvB+JN2MDKc/JNzOuGla+3l7JRjtypm 4X4rfUnkCzH8gevkJcSvYN3Jl52dCfgEcwQ+XuBvsQKBgQDo6xVC09BcYDTZrtPG Bii+qUKflvc/UFqwjhXaYX/5oHSaVkZm7b/tuXY+pim4NWjHMBuOEQWv2CBdhcSC KXNiuJbAy3CbMQbj8ShcUXWiJpmV3ivhEBT00BnzSI/ZzodYvlqQ22fReljUAB85 5Ec7RQa2i5BwB0/n8zq82V2M0QKBgQDTRkGpHwMS87xbA6PAk8OfnR3YJUHDlm8g 5bNxl3/HdRIrVpkOtN9slol4pxZVqDEOsqqHmaoKbMg+gs/adEvB7Lzbag6cSA8x Q6l46dUd+whYacXK7myfrKawSDESmOGjLmZ3G6vFdYDt26r1pelnjZdWMDtQlylD Z8eX7DB7EwKBgHA5fLgDSLyJmk1cYCtkolMjSLeOTLkT5W52N29OVRQYzLXkZe2I Flbbam7LLwTTrxVyR4SPDRdp4kZNgp5YjID/gZuJKkuMNs6zTogUs8IaKRw9vRSm 5AIFFsvSpYUDbtFCfm6XWJFlCtGy8Vi6ddvH6XEhE8n2q/iNiDqf3ORRAoGAVejW oEd8/4Lez3+OYat0O34u+YpE0JxmOdFNg14gVmGzbq369PD1fPlFkysWOOR4dkqO by875ptPXaPhkyoA+C0kqm/Y2xGuI9Eoo4Mp5tQCE7mG9Tq4LsGM0le4pKBH+AvR HJPC6DscnxvYy6SYYURBCon4RJAC9mbH0W34VMMCgYBnjz4DbIs4aBdGE5aEVYtx l4TJ3AJJLeXp2gGqNe2QA/VHxRFFvM+9rVj0JrEmgZWbAr6ygh8s1Pb5mL3dJJqw YS4ekN0fllolB210Q5e9spxDBn+yj83keKqc0rdDHLfoMZdbuMi+0Mf3j4Da7nLn 7AOGr6UkQ7cgOaTLq///qg==\n -----END PRIVATE KEY-----</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="instanceid" elementType="Argument">
              <stringProp name="Argument.name">instanceid</stringProp>
              <stringProp name="Argument.value">ocid1.datacatalog.oc1.iad.aaaaaaaaynl3vtqxl643aoiufg5nemlegot7badraf7bbycfqkfievz4dqua</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">dcatpreprod</stringProp>
        </Arguments>
        <hashTree/>
        <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="OffsetValue" enabled="true">
          <stringProp name="maximumValue">9990</stringProp>
          <stringProp name="minimumValue">10</stringProp>
          <stringProp name="outputFormat"></stringProp>
          <boolProp name="perThread">true</boolProp>
          <stringProp name="randomSeed"></stringProp>
          <stringProp name="variableName">OffsetValue</stringProp>
        </RandomVariableConfig>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="dcatdemo" enabled="false">
          <collectionProp name="Arguments.arguments">
            <elementProp name="OCIMicroservice" elementType="Argument">
              <stringProp name="Argument.name">OCIMicroservice</stringProp>
              <stringProp name="Argument.value">localhost</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="keyd" elementType="Argument">
              <stringProp name="Argument.name">keyd</stringProp>
              <stringProp name="Argument.value">/Users/zameermalim/Documents/Oracle/console-staging.us-ashburn-1.oraclecloud.com/zameer.rashid.malim-01-29-12-08.pem</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TENANCYID" elementType="Argument">
              <stringProp name="Argument.name">TENANCYID</stringProp>
              <stringProp name="Argument.value">ocid1.tenancy.oc1..aaaaaaaakydcqlqxuodjzygfaec6s5yyeo7jkscv5sxtzigs3hthgav3cyka</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="AUTHUSERID" elementType="Argument">
              <stringProp name="Argument.name">AUTHUSERID</stringProp>
              <stringProp name="Argument.value">ocid1.user.oc1..aaaaaaaaxt3uu6ml4hscfhugt2rdylprpvmfzfejqdhpxoarmswhi2euumba</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="FINGERPRINT" elementType="Argument">
              <stringProp name="Argument.name">FINGERPRINT</stringProp>
              <stringProp name="Argument.value">ce:39:89:6f:cf:25:8f:a4:5e:ca:44:c5:34:19:3c:c2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="hostname" elementType="Argument">
              <stringProp name="Argument.name">hostname</stringProp>
              <stringProp name="Argument.value">datacatalog-stage.eu-amsterdam-1.oci.oraclecloud.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="PRIVATEKEY" elementType="Argument">
              <stringProp name="Argument.name">PRIVATEKEY</stringProp>
              <stringProp name="Argument.value">-----BEGIN PRIVATE KEY-----\n MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQDAlUOJMt51tTMn B9BgzaYpFLcn7WLoBSos98fYRZirnCCUCALcDbsPM7Z5AqTloDOxbrITA5e0o27m 7IpG5EgSS2x/y/myznagIwaBqMdpPStHOQgDXTKBjyGRy6d5fgfBEncxpfgX5udz b3Xhl2y7OpzYtF2vdQ1vVV+9WhY4X201HPiQ1r4YNG0gLYkittNavVir9+HTjsga HH2nI52MZ++k7Z9cdzJawilmB14NmK6bvz94t8vHNWKT665WJratLEVYGLCNfhRQ 1dcjH2i0veaqsSEnX+23Vr3P92hsbFvFAHbfuORf+ejww1mBlakP/2yo5VEHphlA Ix9xAw4vAgMBAAECggEAV+FFKkxuO2RubTchnar6UfDEC5JF+f6xWkfPiB9qJZVf QG3PcD9LxwogEGRmfup17FfJJugSyDl0GCiEiQkO4lpMrpyT20Zf139kLrKoHJvv LdcWkwJqU7jO5sr6J3SdcTtN7PgBmFaj84c/UaxZz65VeIYF4lUVxmI9CBkd3qbS ICa8C9/G0i+iGfEd1O4VTnJId3ntlZ951Nx+D4v+9hgeRytbXc6XAIa5/VYxTyf+ 5J3rvTEigmwAdxC3GTxyeyfLLwjsTUYo3wRNMrkxSxD8x/uCsckSRSF+DF/gf9ex GQlO3/8ZCHjpbZ8JvHWn6yYBZ2NyIxPnJ0Da+QRDYQKBgQDrTij4Yf28L4GixQOD S45+dAx1PfFb/xQPnNXgVz6+bjjaauL4CG3sI7NlfT5PrKNC3Z7cHaq/7QmOTFBp Fkgldn6LCOR/MOUtRkHOGt7NFrgmmWU2TaowjHDVm+HOKdp6ItBKmathtXRLQH5X s7dS+SbX0uxO41+lBrQJEVNtNwKBgQDRhTkYunK97K78vqyRLqkBgOoLmJmuDKi+ plg9kzGILiF8d+IgEV6/wnzg8d/sYiVbeR/sPXoJaGcBrHPBY6edDBBWfargYYYj LMZMddpvCKU1y67QzKHLFavBoe3OuBT/bwvcjOE2G5W+gO2LfXFG1AJMgfkh3HSF 1Mz5JociyQKBgCmibsVkMU026q0uRuzYVaIyTnIAP9CTVa1dhspnJYb0YcLj3r0c YLbDql5uxrO6TDjslctExI2pF2PCRQgTFTjruoBHVoba0/Iq2EHrpziKqJLL2Yi+ PTrR3rUtG8sqxKmPt2M7xYNIZAdcpf5Gok1gIGtXutBKkwXUJc7k7eoJAoGAFjc/ D50tb2/6OfhpydcdungV2PbsTKUw+04eCyFhXiQuDsmTY30UA9c2cI+VA7aAaYuV U/JMz1SPn4DOoVHUwvU1gkY+6R3OIEquGAtjBuTux556Qc+A1EzO8nAeDA4+w7rd khwqARe5sAJxrZm2eiEewUgCx5FdlZczyLNKHukCgYAG8QzanU+uEIuN7HH+k0Z5 VJDWVDCVKHfKJQB6Kd3MLWozMw8lOLlIVQhGnZp1D5l1qOyXQ0KNT5bu5uhtKetG 2a8uPnsUrPyhAIXko3X9j0fPXX/b+uUVv8zvWdZo+R6vB77iDkHEp/Ck+vUSH948 U3iS/bsJ2ZKuriiQOzlzRw==\n -----END PRIVATE KEY-----</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="instanceid" elementType="Argument">
              <stringProp name="Argument.name">instanceid</stringProp>
              <stringProp name="Argument.value">ocid1.datacatalog.oc1.eu-amsterdam-1.aaaaaaaavflwxj2xnu5xawsccxtltstg7cgbop57zkf4sqlw3nk5mmjwy2ja</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">dcatdemo</stringProp>
        </Arguments>
        <hashTree/>
        <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="entity and name extraction for offset" enabled="false">
          <stringProp name="maximumValue">9</stringProp>
          <stringProp name="minimumValue">0</stringProp>
          <stringProp name="outputFormat"></stringProp>
          <boolProp name="perThread">true</boolProp>
          <stringProp name="randomSeed"></stringProp>
          <stringProp name="variableName">entityNameCorrelator</stringProp>
        </RandomVariableConfig>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="From API" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Glossary Signature" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;tenancyId&quot;: &quot;${TENANCYID}&quot;, &quot;authUserId&quot;: &quot;${AUTHUSERID}&quot;,&quot;keyFingerprint&quot;: &quot;${FINGERPRINT}&quot;,&quot;privateKeyFilename&quot;: &quot;${PRIVATEKEY}&quot;, &quot;geturl&quot;: &quot;https://${hostname}/20190325/catalogs/${instanceid}/glossaries/&quot;,&quot;restType&quot; : &quot;GET&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${OCIMicroservice}</stringProp>
            <stringProp name="HTTPSampler.port">9080</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/sign/getsignature</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">date7</stringProp>
              <stringProp name="RegexExtractor.regex">date:(.*?);</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">keyid7</stringProp>
              <stringProp name="RegexExtractor.regex">Authorization:(.+);</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SHAPA</stringProp>
              <stringProp name="RegexExtractor.regex">x-content-sha256:(.+?);</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">1000</stringProp>
          </TestAction>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
              <stringProp name="ConstantTimer.delay">1000</stringProp>
              <stringProp name="RandomTimer.range">100</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DCAT GET Glossary" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Variables pré-définies" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/20190325/catalogs/${instanceid}/glossaries/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">${keyid7}</stringProp>
                </elementProp>
                <elementProp name="date" elementType="Header">
                  <stringProp name="Header.name">date</stringProp>
                  <stringProp name="Header.value">${date7}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">host</stringProp>
                  <stringProp name="Header.value">${hostname}</stringProp>
                </elementProp>
                <elementProp name="x-content-sha256" elementType="Header">
                  <stringProp name="Header.name">x-content-sha256</stringProp>
                  <stringProp name="Header.value">${SHAPA}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="glossaryKey" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">glossaryKey</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..key</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">null</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">1000</stringProp>
          </TestAction>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
              <stringProp name="ConstantTimer.delay">1000</stringProp>
              <stringProp name="RandomTimer.range">100</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Terms Signature" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;tenancyId&quot;: &quot;${TENANCYID}&quot;, &quot;authUserId&quot;: &quot;${AUTHUSERID}&quot;,&quot;keyFingerprint&quot;: &quot;${FINGERPRINT}&quot;,&quot;privateKeyFilename&quot;: &quot;${PRIVATEKEY}&quot;, &quot;geturl&quot;: &quot;https://${hostname}/20190325/catalogs/${instanceid}/glossaries/${glossaryKey}/terms&quot;,&quot;restType&quot; : &quot;GET&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${OCIMicroservice}</stringProp>
            <stringProp name="HTTPSampler.port">9080</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/sign/getsignature</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">date7</stringProp>
              <stringProp name="RegexExtractor.regex">date:(.*?);</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">keyid7</stringProp>
              <stringProp name="RegexExtractor.regex">Authorization:(.+);</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SHAPA</stringProp>
              <stringProp name="RegexExtractor.regex">x-content-sha256:(.+?);</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">1000</stringProp>
          </TestAction>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
              <stringProp name="ConstantTimer.delay">1000</stringProp>
              <stringProp name="RandomTimer.range">100</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DCAT GET Terms" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Variables pré-définies" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/20190325/catalogs/${instanceid}/glossaries/${glossaryKey}/terms</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">${keyid7}</stringProp>
                </elementProp>
                <elementProp name="date" elementType="Header">
                  <stringProp name="Header.name">date</stringProp>
                  <stringProp name="Header.value">${date7}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">host</stringProp>
                  <stringProp name="Header.value">${hostname}</stringProp>
                </elementProp>
                <elementProp name="x-content-sha256" elementType="Header">
                  <stringProp name="Header.name">x-content-sha256</stringProp>
                  <stringProp name="Header.value">${SHAPA}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">entityid</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;entityKey&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">${__threadNum}</stringProp>
            </RegexExtractor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="key" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">key</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..items.[*]key</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">null</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="displayName" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">displayName</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.key==&apos;${key}&apos;)].displayName</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">null</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="key, name, dataAssetKey" enabled="false">
              <stringProp name="JSONPostProcessor.referenceNames">key;name;dataAssetKey</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..items.[${entityNameCorrelator}]key;$..items.[${entityNameCorrelator}]name;$..items.[${entityNameCorrelator}]dataAssetKey</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">0;0;0</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">1000</stringProp>
          </TestAction>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
              <stringProp name="ConstantTimer.delay">1000</stringProp>
              <stringProp name="RandomTimer.range">100</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Term Signature" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;tenancyId&quot;: &quot;${TENANCYID}&quot;, &quot;authUserId&quot;: &quot;${AUTHUSERID}&quot;,&quot;keyFingerprint&quot;: &quot;${FINGERPRINT}&quot;,&quot;privateKeyFilename&quot;: &quot;${PRIVATEKEY}&quot;, &quot;geturl&quot;: &quot;https://${hostname}/20190325/catalogs/${instanceid}/glossaries/${glossaryKey}/terms/${key}&quot;,&quot;restType&quot; : &quot;GET&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${OCIMicroservice}</stringProp>
            <stringProp name="HTTPSampler.port">9080</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/sign/getsignature</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">date7</stringProp>
              <stringProp name="RegexExtractor.regex">date:(.*?);</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">keyid7</stringProp>
              <stringProp name="RegexExtractor.regex">Authorization:(.+);</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SHAPA</stringProp>
              <stringProp name="RegexExtractor.regex">x-content-sha256:(.+?);</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">1000</stringProp>
          </TestAction>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
              <stringProp name="ConstantTimer.delay">1000</stringProp>
              <stringProp name="RandomTimer.range">100</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="DCAT GET Term" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DCAT GET Term" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Variables pré-définies" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/20190325/catalogs/${instanceid}/glossaries/${glossaryKey}/terms/${key}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">${keyid7}</stringProp>
                  </elementProp>
                  <elementProp name="date" elementType="Header">
                    <stringProp name="Header.name">date</stringProp>
                    <stringProp name="Header.value">${date7}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">host</stringProp>
                    <stringProp name="Header.value">${hostname}</stringProp>
                  </elementProp>
                  <elementProp name="x-content-sha256" elementType="Header">
                    <stringProp name="Header.name">x-content-sha256</stringProp>
                    <stringProp name="Header.value">${SHAPA}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugSampler>
            <hashTree/>
          </hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="false">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">0</stringProp>
          </TestAction>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
              <stringProp name="ConstantTimer.delay">1000</stringProp>
              <stringProp name="RandomTimer.range">100</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="From Search" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Glossary Signature" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;tenancyId&quot;: &quot;${TENANCYID}&quot;, &quot;authUserId&quot;: &quot;${AUTHUSERID}&quot;,&quot;keyFingerprint&quot;: &quot;${FINGERPRINT}&quot;,&quot;privateKeyFilename&quot;: &quot;${PRIVATEKEY}&quot;, &quot;geturl&quot;: &quot;https://${hostname}/20190325/catalogs/${instanceid}/glossaries/&quot;,&quot;restType&quot; : &quot;GET&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${OCIMicroservice}</stringProp>
            <stringProp name="HTTPSampler.port">9080</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/sign/getsignature</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">date7</stringProp>
              <stringProp name="RegexExtractor.regex">date:(.*?);</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">keyid7</stringProp>
              <stringProp name="RegexExtractor.regex">Authorization:(.+);</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SHAPA</stringProp>
              <stringProp name="RegexExtractor.regex">x-content-sha256:(.+?);</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">1000</stringProp>
          </TestAction>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
              <stringProp name="ConstantTimer.delay">1000</stringProp>
              <stringProp name="RandomTimer.range">100</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DCAT GET Glossary" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Variables pré-définies" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/20190325/catalogs/${instanceid}/glossaries/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">${keyid7}</stringProp>
                </elementProp>
                <elementProp name="date" elementType="Header">
                  <stringProp name="Header.name">date</stringProp>
                  <stringProp name="Header.value">${date7}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">host</stringProp>
                  <stringProp name="Header.value">${hostname}</stringProp>
                </elementProp>
                <elementProp name="x-content-sha256" elementType="Header">
                  <stringProp name="Header.name">x-content-sha256</stringProp>
                  <stringProp name="Header.value">${SHAPA}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="glossaryKey" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">glossaryKey</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..key</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">null</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="false">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">0</stringProp>
          </TestAction>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
              <stringProp name="ConstantTimer.delay">1000</stringProp>
              <stringProp name="RandomTimer.range">100</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Search Signature Terms 10 with offset" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;tenancyId&quot;: &quot;${TENANCYID}&quot;, &quot;authUserId&quot;: &quot;${AUTHUSERID}&quot;,&quot;keyFingerprint&quot;: &quot;${FINGERPRINT}&quot;,&quot;privateKeyFilename&quot;: &quot;${PRIVATEKEY}&quot;, &quot;geturl&quot;: &quot;https://${hostname}/20190325/catalogs/${instanceid}/search?limit=10&amp;page=offset=${OffsetValue}&quot;, &quot;messageBody&quot;:&quot;{\&quot;facetedQuery\&quot;:\&quot;*\&quot;,\&quot;dimensions\&quot;:[\&quot;customproperties\&quot;,\&quot;CatalogType\&quot;,\&quot;UpdatedBy\&quot;],\&quot;filters\&quot;:{\&quot;searchStringFilters\&quot;:[{\&quot;field\&quot;:\&quot;CatalogType\&quot;,\&quot;values\&quot;:[\&quot;Term\&quot;,\&quot;Category\&quot;]}],\&quot;searchDateFilters\&quot;:[]},\&quot;sort\&quot;:[{\&quot;sortBy\&quot;:\&quot;Relevancy\&quot;,\&quot;sortOrder\&quot;:\&quot;asc\&quot;}]}&quot;, &quot;restType&quot; : &quot;POST&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${OCIMicroservice}</stringProp>
            <stringProp name="HTTPSampler.port">9080</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/sign/getsignature</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">date7</stringProp>
              <stringProp name="RegexExtractor.regex">date:(.*?);</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">keyid7</stringProp>
              <stringProp name="RegexExtractor.regex">Authorization:(.+);</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SHAPA</stringProp>
              <stringProp name="RegexExtractor.regex">x-content-sha256:(.+?);</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">0</stringProp>
          </TestAction>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
              <stringProp name="ConstantTimer.delay">1000</stringProp>
              <stringProp name="RandomTimer.range">100</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DCAT Search Terms limit 10 with offset" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;facetedQuery&quot;:&quot;*&quot;,&quot;dimensions&quot;:[&quot;customproperties&quot;,&quot;CatalogType&quot;,&quot;UpdatedBy&quot;],&quot;filters&quot;:{&quot;searchStringFilters&quot;:[{&quot;field&quot;:&quot;CatalogType&quot;,&quot;values&quot;:[&quot;Term&quot;,&quot;Category&quot;]}],&quot;searchDateFilters&quot;:[]},&quot;sort&quot;:[{&quot;sortBy&quot;:&quot;Relevancy&quot;,&quot;sortOrder&quot;:&quot;asc&quot;}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/20190325/catalogs/${instanceid}/search?limit=10&amp;page=offset=${OffsetValue}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">${keyid7}</stringProp>
                </elementProp>
                <elementProp name="date" elementType="Header">
                  <stringProp name="Header.name">date</stringProp>
                  <stringProp name="Header.value">${date7}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">host</stringProp>
                  <stringProp name="Header.value">${hostname}</stringProp>
                </elementProp>
                <elementProp name="x-content-sha256" elementType="Header">
                  <stringProp name="Header.name">x-content-sha256</stringProp>
                  <stringProp name="Header.value">${SHAPA}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="key" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">key</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..items.[*]key</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">null</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="name, glossaryKey" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">name;glossaryKey</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.key==&apos;${key}&apos;)].name;$..[?(@.key==&apos;${key}&apos;)].glossaryKey</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">null;null</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">entityid</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;entityKey&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">${__threadNum}</stringProp>
            </RegexExtractor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="key, name, dataAssetKey" enabled="false">
              <stringProp name="JSONPostProcessor.referenceNames">key;name;dataAssetKey</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..items.[${entityNameCorrelator}]key;$..items.[${entityNameCorrelator}]name;$..items.[${entityNameCorrelator}]dataAssetKey</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">0;0;0</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">1000</stringProp>
          </TestAction>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
              <stringProp name="ConstantTimer.delay">1000</stringProp>
              <stringProp name="RandomTimer.range">100</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Term Signature from search" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;tenancyId&quot;: &quot;${TENANCYID}&quot;, &quot;authUserId&quot;: &quot;${AUTHUSERID}&quot;,&quot;keyFingerprint&quot;: &quot;${FINGERPRINT}&quot;,&quot;privateKeyFilename&quot;: &quot;${PRIVATEKEY}&quot;, &quot;geturl&quot;: &quot;https://${hostname}/20190325/catalogs/${instanceid}/glossaries/${glossaryKey}/terms/${key}&quot;,&quot;restType&quot; : &quot;GET&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${OCIMicroservice}</stringProp>
            <stringProp name="HTTPSampler.port">9080</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/sign/getsignature</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">date7</stringProp>
              <stringProp name="RegexExtractor.regex">date:(.*?);</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">keyid7</stringProp>
              <stringProp name="RegexExtractor.regex">Authorization:(.+);</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SHAPA</stringProp>
              <stringProp name="RegexExtractor.regex">x-content-sha256:(.+?);</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">1000</stringProp>
          </TestAction>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
              <stringProp name="ConstantTimer.delay">1000</stringProp>
              <stringProp name="RandomTimer.range">100</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="DCAT GET Term from search" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DCAT GET Term from search" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Variables pré-définies" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/20190325/catalogs/${instanceid}/glossaries/${glossaryKey}/terms/${key}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">${keyid7}</stringProp>
                  </elementProp>
                  <elementProp name="date" elementType="Header">
                    <stringProp name="Header.name">date</stringProp>
                    <stringProp name="Header.value">${date7}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">host</stringProp>
                    <stringProp name="Header.value">${hostname}</stringProp>
                  </elementProp>
                  <elementProp name="x-content-sha256" elementType="Header">
                    <stringProp name="Header.name">x-content-sha256</stringProp>
                    <stringProp name="Header.value">${SHAPA}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugSampler>
            <hashTree/>
          </hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">0</stringProp>
          </TestAction>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
              <stringProp name="ConstantTimer.delay">1000</stringProp>
              <stringProp name="RandomTimer.range">100</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="SSH" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="100.96.245.66" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="Hostname" elementType="Argument">
              <stringProp name="Argument.name">Hostname</stringProp>
              <stringProp name="Argument.value">100.96.245.66</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="username" elementType="Argument">
              <stringProp name="Argument.name">username</stringProp>
              <stringProp name="Argument.value">opc</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="password" elementType="Argument">
              <stringProp name="Argument.name">password</stringProp>
              <stringProp name="Argument.value">01Mar@2021</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="SSHKey" elementType="Argument">
              <stringProp name="Argument.name">SSHKey</stringProp>
              <stringProp name="Argument.value">/Users/zameermalim/Documents/Oracle/Vms/RecommendationService/v2.2/Private_100.96.245.66/ssh-key-2021-01-18.key</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">autolink4</stringProp>
        </Arguments>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="144.25.28.165" enabled="false">
          <collectionProp name="Arguments.arguments">
            <elementProp name="Hostname" elementType="Argument">
              <stringProp name="Argument.name">Hostname</stringProp>
              <stringProp name="Argument.value">144.25.28.165</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="username" elementType="Argument">
              <stringProp name="Argument.name">username</stringProp>
              <stringProp name="Argument.value">opc</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="password" elementType="Argument">
              <stringProp name="Argument.name">password</stringProp>
              <stringProp name="Argument.value">01Mar@2021</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="SSHKey" elementType="Argument">
              <stringProp name="Argument.name">SSHKey</stringProp>
              <stringProp name="Argument.value">/Users/zameermalim/Documents/Oracle/Vms/RecommendationService/v2.2/144.25.28.165/ssh-key-2020-11-20.key</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">autolink2</stringProp>
        </Arguments>
        <hashTree/>
        <org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler" testname="date" enabled="true">
          <stringProp name="command">date</stringProp>
          <intProp name="connectionTimeout">5000</intProp>
          <stringProp name="hostname">${Hostname}</stringProp>
          <stringProp name="passphrase"></stringProp>
          <stringProp name="password">${password}</stringProp>
          <intProp name="port">22</intProp>
          <boolProp name="printStdErr">false</boolProp>
          <stringProp name="sshkeyfile">${SSHKey}</stringProp>
          <boolProp name="useReturnCode">true</boolProp>
          <boolProp name="useTty">false</boolProp>
          <stringProp name="username">${username}</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler>
        <hashTree/>
        <org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler" testname="hostname" enabled="true">
          <stringProp name="command">hostname</stringProp>
          <intProp name="connectionTimeout">5000</intProp>
          <stringProp name="hostname">${Hostname}</stringProp>
          <stringProp name="passphrase"></stringProp>
          <stringProp name="password">${password}</stringProp>
          <intProp name="port">22</intProp>
          <boolProp name="printStdErr">false</boolProp>
          <stringProp name="sshkeyfile">${SSHKey}</stringProp>
          <boolProp name="useReturnCode">true</boolProp>
          <boolProp name="useTty">false</boolProp>
          <stringProp name="username">${username}</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler>
        <hashTree/>
        <org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler" testname="spark submit" enabled="true">
          <stringProp name="command">spark-submit --class org.apache.spark.examples.SparkPi     --master local     --num-executors 1     --driver-memory 512m     --executor-memory 512m     --executor-cores 1     $SPARK_HOME/examples/jars/spark-examples*.jar 10 </stringProp>
          <intProp name="connectionTimeout">5000</intProp>
          <stringProp name="hostname">${Hostname}</stringProp>
          <stringProp name="passphrase"></stringProp>
          <stringProp name="password">${password}</stringProp>
          <intProp name="port">22</intProp>
          <boolProp name="printStdErr">true</boolProp>
          <stringProp name="sshkeyfile">${SSHKey}</stringProp>
          <boolProp name="useReturnCode">true</boolProp>
          <boolProp name="useTty">false</boolProp>
          <stringProp name="username">${username}</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHCommandSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="MetastoreThroughSplat" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">1600</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="paasdevdcatqa_recommendation" enabled="false">
          <collectionProp name="Arguments.arguments">
            <elementProp name="OCIMicroservice" elementType="Argument">
              <stringProp name="Argument.name">OCIMicroservice</stringProp>
              <stringProp name="Argument.value">localhost</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="keyd" elementType="Argument">
              <stringProp name="Argument.name">keyd</stringProp>
              <stringProp name="Argument.value">/Users/zameermalim/Documents/Oracle/console-staging.us-ashburn-1.oraclecloud.com/zameer.rashid.malim-01-29-12-08.pem</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TENANCYID" elementType="Argument">
              <stringProp name="Argument.name">TENANCYID</stringProp>
              <stringProp name="Argument.value">ocid1.tenancy.oc1..aaaaaaaahk25msb4bift5w2tlqo6tcepprf54thivzjr2k4vohezlmiooywa</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="AUTHUSERID" elementType="Argument">
              <stringProp name="Argument.name">AUTHUSERID</stringProp>
              <stringProp name="Argument.value">ocid1.user.oc1..aaaaaaaa7mn3ws2ubofutwhfxu5db76tukft2ppsjpx6xqf77ohsvejbtvba</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="FINGERPRINT" elementType="Argument">
              <stringProp name="Argument.name">FINGERPRINT</stringProp>
              <stringProp name="Argument.value">1a:ab:f6:bd:35:dc:60:48:25:00:f9:10:93:1e:0e:a9</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="hostname" elementType="Argument">
              <stringProp name="Argument.name">hostname</stringProp>
              <stringProp name="Argument.value">datacatalog-qa.us-ashburn-1.oci.oraclecloud.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="PRIVATEKEY" elementType="Argument">
              <stringProp name="Argument.name">PRIVATEKEY</stringProp>
              <stringProp name="Argument.value">-----BEGIN PRIVATE KEY-----\n MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCp836eRiGV7Lqn 8VOKaR9hO7yKMHEnAFNaFBzPcFu/TcfUoEMfZEMsgVfoPZAo+ZgXKPpzZ6gPZtRt flJif8d4NQ3KnoxEZ1O7tDES6jRdPtc1TPAoOmga3ns9vcr69DCtiTMmZI7vglL+ nquNI94zoHeIkAwGXeC+WsEwSr2hBf4VMqHoia4RrrdPwNkXFtPvihJ9rShkDVnn z1xqZY82PFDn3zJuNyJOA+3zof0e6HXJ0Y8BSis9rxq50xL9Qdkr2PjCZ2nHq6Pa hZeUej0eDBA3vDkM+P1RpZvwLel6W3koWQwYTMFT1/JJAgpDa3MufwU2ppLTCDxk 7IhXH+xXAgMBAAECggEAQI0seDiCFDyM7zIx/X4NPbTfWYupxtsQTcQa502xg3mr H59Zr2g5PYPJXHxZr76R3qYhbskd4++2Wvpil2gaXxWjreTHuUmX29FG3HzZs9sl Cek1xMnedeowXFSk7unmPVvB8mC6i81v8adZ2KuZf/mAvX2dG6P3s8Wr4EhbO3f5 LJEV9di7N9C/qQuEOfR5Iv7b2KbQSyQwC5+NaI6gXsvOxEQw/hdAPzMfcX9DKkz9 ZSDriSRdm+uSDVdhje4b4X4umKvDbNiURK/Z4TyrM8YZnQ5WrkGfWhrgESAL+30L 8Yaau7Ifteo/onIHQJHgK+des1Mn6njDX/CUwXM0KQKBgQDX5JTYXtY74H9Ck7nd qb2zhtRHm0sVJjd5J8ypkNWfdqcK94ipqr1LV9PawyrmIkM6vFlMU9qveOFod031 6hOVTr+fyS5BRMYLT0PwpAVMKHwqaK3l3pQHQbZ5LB/pAbIPw7DvaVdGiYXt5Ctk RXXm/+4qyuetBwkIX3P1N+x22QKBgQDJhgTdoPoyGbJRXTCDHhH2x2BeRcSntx9k jKe/8hhLt0BEsEM6Y8db0vSUSoNU3Hwt30Ziq8qAW5QhdCmgTwXe4G+DU1HUQGYn Ef0jT4S9CjhRg4y4gWvCCDKzjWChGvozObbkmGg2HfUNa+RLJTUkii6xwpzj8HKN eLDTzy9erwKBgH71gUKsorebkbsJPKhKBbDpfTSO8lyBmOW6rfSZo8ae9CTS5J9C NQd1orRnSXcEdxy3XpwwQ84k/Al+/226NcH8CVxh5r2jQAOunXmKO0NKG5qk7H7d oZeS4Ufo1usjgB8dKZPhEt38SbJYF9xjrK4nm1u27v8lv/4YhAyU0o4hAoGBAI4U 3U1c98lm8KAI8fEfvE6fV0RgMDyHEa0UthjQmWyYsMk89MkwHBiTbTk4J8wm/65f 4wIiWM2Sw6eqfMa3sE3pMvYGQoVBOkSFnFHO+KlHkVl3RDm5lb3hhc2t+djcala/ dEFLav3stR9XWEfa3dL7Udymd3MFzd4Mn69WPfGlAoGAE3R73QJcCiaGF38Xmivg OS+QCroZoQxiTIT3Wr9k1y5ARiJLpo0SGxB1NjafMucOsvTfW2YhuxSYxATTqZLE nHNLvtiTguKYEp68FRLgVEm7gcoMaFmgy+VvjOEGPJ46QrKMwnzIUT2oOXTtnQPq dS6yauJBm8thM4juwTbtr7Q=\n -----END PRIVATE KEY-----</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="instanceid" elementType="Argument">
              <stringProp name="Argument.name">instanceid</stringProp>
              <stringProp name="Argument.value">ocid1.datacatalog.oc1.iad.aaaaaaaamioppqjmrk6cv4c5qji7d2zw3bvzg6xdf575gj4nkzqyjw52i4ea</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">paasdevdcatqa</stringProp>
        </Arguments>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="paasdevdcatqa_glossary" enabled="false">
          <collectionProp name="Arguments.arguments">
            <elementProp name="OCIMicroservice" elementType="Argument">
              <stringProp name="Argument.name">OCIMicroservice</stringProp>
              <stringProp name="Argument.value">localhost</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="keyd" elementType="Argument">
              <stringProp name="Argument.name">keyd</stringProp>
              <stringProp name="Argument.value">/Users/zameermalim/Documents/Oracle/console-staging.us-ashburn-1.oraclecloud.com/zameer.rashid.malim-01-29-12-08.pem</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TENANCYID" elementType="Argument">
              <stringProp name="Argument.name">TENANCYID</stringProp>
              <stringProp name="Argument.value">ocid1.tenancy.oc1..aaaaaaaahk25msb4bift5w2tlqo6tcepprf54thivzjr2k4vohezlmiooywa</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="AUTHUSERID" elementType="Argument">
              <stringProp name="Argument.name">AUTHUSERID</stringProp>
              <stringProp name="Argument.value">ocid1.user.oc1..aaaaaaaa7mn3ws2ubofutwhfxu5db76tukft2ppsjpx6xqf77ohsvejbtvba</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="FINGERPRINT" elementType="Argument">
              <stringProp name="Argument.name">FINGERPRINT</stringProp>
              <stringProp name="Argument.value">1a:ab:f6:bd:35:dc:60:48:25:00:f9:10:93:1e:0e:a9</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="hostname" elementType="Argument">
              <stringProp name="Argument.name">hostname</stringProp>
              <stringProp name="Argument.value">datacatalog-qa.us-ashburn-1.oci.oraclecloud.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="PRIVATEKEY" elementType="Argument">
              <stringProp name="Argument.name">PRIVATEKEY</stringProp>
              <stringProp name="Argument.value">-----BEGIN PRIVATE KEY-----\n MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCp836eRiGV7Lqn 8VOKaR9hO7yKMHEnAFNaFBzPcFu/TcfUoEMfZEMsgVfoPZAo+ZgXKPpzZ6gPZtRt flJif8d4NQ3KnoxEZ1O7tDES6jRdPtc1TPAoOmga3ns9vcr69DCtiTMmZI7vglL+ nquNI94zoHeIkAwGXeC+WsEwSr2hBf4VMqHoia4RrrdPwNkXFtPvihJ9rShkDVnn z1xqZY82PFDn3zJuNyJOA+3zof0e6HXJ0Y8BSis9rxq50xL9Qdkr2PjCZ2nHq6Pa hZeUej0eDBA3vDkM+P1RpZvwLel6W3koWQwYTMFT1/JJAgpDa3MufwU2ppLTCDxk 7IhXH+xXAgMBAAECggEAQI0seDiCFDyM7zIx/X4NPbTfWYupxtsQTcQa502xg3mr H59Zr2g5PYPJXHxZr76R3qYhbskd4++2Wvpil2gaXxWjreTHuUmX29FG3HzZs9sl Cek1xMnedeowXFSk7unmPVvB8mC6i81v8adZ2KuZf/mAvX2dG6P3s8Wr4EhbO3f5 LJEV9di7N9C/qQuEOfR5Iv7b2KbQSyQwC5+NaI6gXsvOxEQw/hdAPzMfcX9DKkz9 ZSDriSRdm+uSDVdhje4b4X4umKvDbNiURK/Z4TyrM8YZnQ5WrkGfWhrgESAL+30L 8Yaau7Ifteo/onIHQJHgK+des1Mn6njDX/CUwXM0KQKBgQDX5JTYXtY74H9Ck7nd qb2zhtRHm0sVJjd5J8ypkNWfdqcK94ipqr1LV9PawyrmIkM6vFlMU9qveOFod031 6hOVTr+fyS5BRMYLT0PwpAVMKHwqaK3l3pQHQbZ5LB/pAbIPw7DvaVdGiYXt5Ctk RXXm/+4qyuetBwkIX3P1N+x22QKBgQDJhgTdoPoyGbJRXTCDHhH2x2BeRcSntx9k jKe/8hhLt0BEsEM6Y8db0vSUSoNU3Hwt30Ziq8qAW5QhdCmgTwXe4G+DU1HUQGYn Ef0jT4S9CjhRg4y4gWvCCDKzjWChGvozObbkmGg2HfUNa+RLJTUkii6xwpzj8HKN eLDTzy9erwKBgH71gUKsorebkbsJPKhKBbDpfTSO8lyBmOW6rfSZo8ae9CTS5J9C NQd1orRnSXcEdxy3XpwwQ84k/Al+/226NcH8CVxh5r2jQAOunXmKO0NKG5qk7H7d oZeS4Ufo1usjgB8dKZPhEt38SbJYF9xjrK4nm1u27v8lv/4YhAyU0o4hAoGBAI4U 3U1c98lm8KAI8fEfvE6fV0RgMDyHEa0UthjQmWyYsMk89MkwHBiTbTk4J8wm/65f 4wIiWM2Sw6eqfMa3sE3pMvYGQoVBOkSFnFHO+KlHkVl3RDm5lb3hhc2t+djcala/ dEFLav3stR9XWEfa3dL7Udymd3MFzd4Mn69WPfGlAoGAE3R73QJcCiaGF38Xmivg OS+QCroZoQxiTIT3Wr9k1y5ARiJLpo0SGxB1NjafMucOsvTfW2YhuxSYxATTqZLE nHNLvtiTguKYEp68FRLgVEm7gcoMaFmgy+VvjOEGPJ46QrKMwnzIUT2oOXTtnQPq dS6yauJBm8thM4juwTbtr7Q=\n -----END PRIVATE KEY-----</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="instanceid" elementType="Argument">
              <stringProp name="Argument.name">instanceid</stringProp>
              <stringProp name="Argument.value">ocid1.datacatalog.oc1.iad.aaaaaaaaspkqq2z5uwn6zngetdf4flgw7rllqdrpeq5bcwxvinnfan33wxba</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">paasdevdcatqa</stringProp>
        </Arguments>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="paasdevdcatqa_metastore_amaaaaaaw5lrnkiapjp7lzgqzedux7zwbyr7v7eklrs2pdwgp45j37c2lwqq" enabled="false">
          <collectionProp name="Arguments.arguments">
            <elementProp name="OCIMicroservice" elementType="Argument">
              <stringProp name="Argument.name">OCIMicroservice</stringProp>
              <stringProp name="Argument.value">localhost</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="keyd" elementType="Argument">
              <stringProp name="Argument.name">keyd</stringProp>
              <stringProp name="Argument.value">/Users/zameermalim/Documents/Oracle/console-staging.us-ashburn-1.oraclecloud.com/zameer.rashid.malim-01-29-12-08.pem</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TENANCYID" elementType="Argument">
              <stringProp name="Argument.name">TENANCYID</stringProp>
              <stringProp name="Argument.value">ocid1.tenancy.oc1..aaaaaaaahk25msb4bift5w2tlqo6tcepprf54thivzjr2k4vohezlmiooywa</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="AUTHUSERID" elementType="Argument">
              <stringProp name="Argument.name">AUTHUSERID</stringProp>
              <stringProp name="Argument.value">ocid1.user.oc1..aaaaaaaa7mn3ws2ubofutwhfxu5db76tukft2ppsjpx6xqf77ohsvejbtvba</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="FINGERPRINT" elementType="Argument">
              <stringProp name="Argument.name">FINGERPRINT</stringProp>
              <stringProp name="Argument.value">1a:ab:f6:bd:35:dc:60:48:25:00:f9:10:93:1e:0e:a9</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="hostname" elementType="Argument">
              <stringProp name="Argument.name">hostname</stringProp>
              <stringProp name="Argument.value">datacatalog-qa.us-ashburn-1.oci.oraclecloud.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="PRIVATEKEY" elementType="Argument">
              <stringProp name="Argument.name">PRIVATEKEY</stringProp>
              <stringProp name="Argument.value">-----BEGIN PRIVATE KEY-----\n MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCp836eRiGV7Lqn 8VOKaR9hO7yKMHEnAFNaFBzPcFu/TcfUoEMfZEMsgVfoPZAo+ZgXKPpzZ6gPZtRt flJif8d4NQ3KnoxEZ1O7tDES6jRdPtc1TPAoOmga3ns9vcr69DCtiTMmZI7vglL+ nquNI94zoHeIkAwGXeC+WsEwSr2hBf4VMqHoia4RrrdPwNkXFtPvihJ9rShkDVnn z1xqZY82PFDn3zJuNyJOA+3zof0e6HXJ0Y8BSis9rxq50xL9Qdkr2PjCZ2nHq6Pa hZeUej0eDBA3vDkM+P1RpZvwLel6W3koWQwYTMFT1/JJAgpDa3MufwU2ppLTCDxk 7IhXH+xXAgMBAAECggEAQI0seDiCFDyM7zIx/X4NPbTfWYupxtsQTcQa502xg3mr H59Zr2g5PYPJXHxZr76R3qYhbskd4++2Wvpil2gaXxWjreTHuUmX29FG3HzZs9sl Cek1xMnedeowXFSk7unmPVvB8mC6i81v8adZ2KuZf/mAvX2dG6P3s8Wr4EhbO3f5 LJEV9di7N9C/qQuEOfR5Iv7b2KbQSyQwC5+NaI6gXsvOxEQw/hdAPzMfcX9DKkz9 ZSDriSRdm+uSDVdhje4b4X4umKvDbNiURK/Z4TyrM8YZnQ5WrkGfWhrgESAL+30L 8Yaau7Ifteo/onIHQJHgK+des1Mn6njDX/CUwXM0KQKBgQDX5JTYXtY74H9Ck7nd qb2zhtRHm0sVJjd5J8ypkNWfdqcK94ipqr1LV9PawyrmIkM6vFlMU9qveOFod031 6hOVTr+fyS5BRMYLT0PwpAVMKHwqaK3l3pQHQbZ5LB/pAbIPw7DvaVdGiYXt5Ctk RXXm/+4qyuetBwkIX3P1N+x22QKBgQDJhgTdoPoyGbJRXTCDHhH2x2BeRcSntx9k jKe/8hhLt0BEsEM6Y8db0vSUSoNU3Hwt30Ziq8qAW5QhdCmgTwXe4G+DU1HUQGYn Ef0jT4S9CjhRg4y4gWvCCDKzjWChGvozObbkmGg2HfUNa+RLJTUkii6xwpzj8HKN eLDTzy9erwKBgH71gUKsorebkbsJPKhKBbDpfTSO8lyBmOW6rfSZo8ae9CTS5J9C NQd1orRnSXcEdxy3XpwwQ84k/Al+/226NcH8CVxh5r2jQAOunXmKO0NKG5qk7H7d oZeS4Ufo1usjgB8dKZPhEt38SbJYF9xjrK4nm1u27v8lv/4YhAyU0o4hAoGBAI4U 3U1c98lm8KAI8fEfvE6fV0RgMDyHEa0UthjQmWyYsMk89MkwHBiTbTk4J8wm/65f 4wIiWM2Sw6eqfMa3sE3pMvYGQoVBOkSFnFHO+KlHkVl3RDm5lb3hhc2t+djcala/ dEFLav3stR9XWEfa3dL7Udymd3MFzd4Mn69WPfGlAoGAE3R73QJcCiaGF38Xmivg OS+QCroZoQxiTIT3Wr9k1y5ARiJLpo0SGxB1NjafMucOsvTfW2YhuxSYxATTqZLE nHNLvtiTguKYEp68FRLgVEm7gcoMaFmgy+VvjOEGPJ46QrKMwnzIUT2oOXTtnQPq dS6yauJBm8thM4juwTbtr7Q=\n -----END PRIVATE KEY-----</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="instanceid" elementType="Argument">
              <stringProp name="Argument.name">instanceid</stringProp>
              <stringProp name="Argument.value">ocid1.datacatalogmetastore.oc1.iad.amaaaaaaw5lrnkiapjp7lzgqzedux7zwbyr7v7eklrs2pdwgp45j37c2lwqq</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="database" elementType="Argument">
              <stringProp name="Argument.name">database</stringProp>
              <stringProp name="Argument.value">default</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="table" elementType="Argument">
              <stringProp name="Argument.name">table</stringProp>
              <stringProp name="Argument.value">stdtbl16240181581624018158462</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">1000 parts</stringProp>
            </elementProp>
            <elementProp name="catalog" elementType="Argument">
              <stringProp name="Argument.name">catalog</stringProp>
              <stringProp name="Argument.value">hive</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">paasdevdcatqa</stringProp>
        </Arguments>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="paasdevdcatqa_metastore_amaaaaaaw5lrnkiauu5xhkli6pay3fdk756pzcl54tbuoamjfa2b54l7pcqq" enabled="false">
          <collectionProp name="Arguments.arguments">
            <elementProp name="OCIMicroservice" elementType="Argument">
              <stringProp name="Argument.name">OCIMicroservice</stringProp>
              <stringProp name="Argument.value">localhost</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="keyd" elementType="Argument">
              <stringProp name="Argument.name">keyd</stringProp>
              <stringProp name="Argument.value">/Users/zameermalim/Documents/Oracle/console-staging.us-ashburn-1.oraclecloud.com/zameer.rashid.malim-01-29-12-08.pem</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TENANCYID" elementType="Argument">
              <stringProp name="Argument.name">TENANCYID</stringProp>
              <stringProp name="Argument.value">ocid1.tenancy.oc1..aaaaaaaahk25msb4bift5w2tlqo6tcepprf54thivzjr2k4vohezlmiooywa</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="AUTHUSERID" elementType="Argument">
              <stringProp name="Argument.name">AUTHUSERID</stringProp>
              <stringProp name="Argument.value">ocid1.user.oc1..aaaaaaaa7mn3ws2ubofutwhfxu5db76tukft2ppsjpx6xqf77ohsvejbtvba</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="FINGERPRINT" elementType="Argument">
              <stringProp name="Argument.name">FINGERPRINT</stringProp>
              <stringProp name="Argument.value">1a:ab:f6:bd:35:dc:60:48:25:00:f9:10:93:1e:0e:a9</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="hostname" elementType="Argument">
              <stringProp name="Argument.name">hostname</stringProp>
              <stringProp name="Argument.value">datacatalog-qa.us-ashburn-1.oci.oraclecloud.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="PRIVATEKEY" elementType="Argument">
              <stringProp name="Argument.name">PRIVATEKEY</stringProp>
              <stringProp name="Argument.value">-----BEGIN PRIVATE KEY-----\n MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCp836eRiGV7Lqn 8VOKaR9hO7yKMHEnAFNaFBzPcFu/TcfUoEMfZEMsgVfoPZAo+ZgXKPpzZ6gPZtRt flJif8d4NQ3KnoxEZ1O7tDES6jRdPtc1TPAoOmga3ns9vcr69DCtiTMmZI7vglL+ nquNI94zoHeIkAwGXeC+WsEwSr2hBf4VMqHoia4RrrdPwNkXFtPvihJ9rShkDVnn z1xqZY82PFDn3zJuNyJOA+3zof0e6HXJ0Y8BSis9rxq50xL9Qdkr2PjCZ2nHq6Pa hZeUej0eDBA3vDkM+P1RpZvwLel6W3koWQwYTMFT1/JJAgpDa3MufwU2ppLTCDxk 7IhXH+xXAgMBAAECggEAQI0seDiCFDyM7zIx/X4NPbTfWYupxtsQTcQa502xg3mr H59Zr2g5PYPJXHxZr76R3qYhbskd4++2Wvpil2gaXxWjreTHuUmX29FG3HzZs9sl Cek1xMnedeowXFSk7unmPVvB8mC6i81v8adZ2KuZf/mAvX2dG6P3s8Wr4EhbO3f5 LJEV9di7N9C/qQuEOfR5Iv7b2KbQSyQwC5+NaI6gXsvOxEQw/hdAPzMfcX9DKkz9 ZSDriSRdm+uSDVdhje4b4X4umKvDbNiURK/Z4TyrM8YZnQ5WrkGfWhrgESAL+30L 8Yaau7Ifteo/onIHQJHgK+des1Mn6njDX/CUwXM0KQKBgQDX5JTYXtY74H9Ck7nd qb2zhtRHm0sVJjd5J8ypkNWfdqcK94ipqr1LV9PawyrmIkM6vFlMU9qveOFod031 6hOVTr+fyS5BRMYLT0PwpAVMKHwqaK3l3pQHQbZ5LB/pAbIPw7DvaVdGiYXt5Ctk RXXm/+4qyuetBwkIX3P1N+x22QKBgQDJhgTdoPoyGbJRXTCDHhH2x2BeRcSntx9k jKe/8hhLt0BEsEM6Y8db0vSUSoNU3Hwt30Ziq8qAW5QhdCmgTwXe4G+DU1HUQGYn Ef0jT4S9CjhRg4y4gWvCCDKzjWChGvozObbkmGg2HfUNa+RLJTUkii6xwpzj8HKN eLDTzy9erwKBgH71gUKsorebkbsJPKhKBbDpfTSO8lyBmOW6rfSZo8ae9CTS5J9C NQd1orRnSXcEdxy3XpwwQ84k/Al+/226NcH8CVxh5r2jQAOunXmKO0NKG5qk7H7d oZeS4Ufo1usjgB8dKZPhEt38SbJYF9xjrK4nm1u27v8lv/4YhAyU0o4hAoGBAI4U 3U1c98lm8KAI8fEfvE6fV0RgMDyHEa0UthjQmWyYsMk89MkwHBiTbTk4J8wm/65f 4wIiWM2Sw6eqfMa3sE3pMvYGQoVBOkSFnFHO+KlHkVl3RDm5lb3hhc2t+djcala/ dEFLav3stR9XWEfa3dL7Udymd3MFzd4Mn69WPfGlAoGAE3R73QJcCiaGF38Xmivg OS+QCroZoQxiTIT3Wr9k1y5ARiJLpo0SGxB1NjafMucOsvTfW2YhuxSYxATTqZLE nHNLvtiTguKYEp68FRLgVEm7gcoMaFmgy+VvjOEGPJ46QrKMwnzIUT2oOXTtnQPq dS6yauJBm8thM4juwTbtr7Q=\n -----END PRIVATE KEY-----</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="instanceid" elementType="Argument">
              <stringProp name="Argument.name">instanceid</stringProp>
              <stringProp name="Argument.value">ocid1.datacatalogmetastore.oc1.iad.amaaaaaaw5lrnkiauu5xhkli6pay3fdk756pzcl54tbuoamjfa2b54l7pcqq</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="database" elementType="Argument">
              <stringProp name="Argument.name">database</stringProp>
              <stringProp name="Argument.value">default</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="table" elementType="Argument">
              <stringProp name="Argument.name">table</stringProp>
              <stringProp name="Argument.value">stdtbl16240181581624018158462</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">1000 parts</stringProp>
            </elementProp>
            <elementProp name="catalog" elementType="Argument">
              <stringProp name="Argument.name">catalog</stringProp>
              <stringProp name="Argument.value">hive</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">paasdevdcatqa</stringProp>
        </Arguments>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="paasdevdcatqa_metastore_amaaaaaaw5lrnkia6gzaiyl54gcfgexlybk4kfaa4tkcfocjmr5uc3xvcwpq" enabled="false">
          <collectionProp name="Arguments.arguments">
            <elementProp name="OCIMicroservice" elementType="Argument">
              <stringProp name="Argument.name">OCIMicroservice</stringProp>
              <stringProp name="Argument.value">localhost</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="keyd" elementType="Argument">
              <stringProp name="Argument.name">keyd</stringProp>
              <stringProp name="Argument.value">/Users/zameermalim/Documents/Oracle/console-staging.us-ashburn-1.oraclecloud.com/zameer.rashid.malim-01-29-12-08.pem</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TENANCYID" elementType="Argument">
              <stringProp name="Argument.name">TENANCYID</stringProp>
              <stringProp name="Argument.value">ocid1.tenancy.oc1..aaaaaaaahk25msb4bift5w2tlqo6tcepprf54thivzjr2k4vohezlmiooywa</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="AUTHUSERID" elementType="Argument">
              <stringProp name="Argument.name">AUTHUSERID</stringProp>
              <stringProp name="Argument.value">ocid1.user.oc1..aaaaaaaa7mn3ws2ubofutwhfxu5db76tukft2ppsjpx6xqf77ohsvejbtvba</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="FINGERPRINT" elementType="Argument">
              <stringProp name="Argument.name">FINGERPRINT</stringProp>
              <stringProp name="Argument.value">1a:ab:f6:bd:35:dc:60:48:25:00:f9:10:93:1e:0e:a9</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="hostname" elementType="Argument">
              <stringProp name="Argument.name">hostname</stringProp>
              <stringProp name="Argument.value">datacatalog-qa.us-ashburn-1.oci.oraclecloud.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="PRIVATEKEY" elementType="Argument">
              <stringProp name="Argument.name">PRIVATEKEY</stringProp>
              <stringProp name="Argument.value">-----BEGIN PRIVATE KEY-----\n MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCp836eRiGV7Lqn 8VOKaR9hO7yKMHEnAFNaFBzPcFu/TcfUoEMfZEMsgVfoPZAo+ZgXKPpzZ6gPZtRt flJif8d4NQ3KnoxEZ1O7tDES6jRdPtc1TPAoOmga3ns9vcr69DCtiTMmZI7vglL+ nquNI94zoHeIkAwGXeC+WsEwSr2hBf4VMqHoia4RrrdPwNkXFtPvihJ9rShkDVnn z1xqZY82PFDn3zJuNyJOA+3zof0e6HXJ0Y8BSis9rxq50xL9Qdkr2PjCZ2nHq6Pa hZeUej0eDBA3vDkM+P1RpZvwLel6W3koWQwYTMFT1/JJAgpDa3MufwU2ppLTCDxk 7IhXH+xXAgMBAAECggEAQI0seDiCFDyM7zIx/X4NPbTfWYupxtsQTcQa502xg3mr H59Zr2g5PYPJXHxZr76R3qYhbskd4++2Wvpil2gaXxWjreTHuUmX29FG3HzZs9sl Cek1xMnedeowXFSk7unmPVvB8mC6i81v8adZ2KuZf/mAvX2dG6P3s8Wr4EhbO3f5 LJEV9di7N9C/qQuEOfR5Iv7b2KbQSyQwC5+NaI6gXsvOxEQw/hdAPzMfcX9DKkz9 ZSDriSRdm+uSDVdhje4b4X4umKvDbNiURK/Z4TyrM8YZnQ5WrkGfWhrgESAL+30L 8Yaau7Ifteo/onIHQJHgK+des1Mn6njDX/CUwXM0KQKBgQDX5JTYXtY74H9Ck7nd qb2zhtRHm0sVJjd5J8ypkNWfdqcK94ipqr1LV9PawyrmIkM6vFlMU9qveOFod031 6hOVTr+fyS5BRMYLT0PwpAVMKHwqaK3l3pQHQbZ5LB/pAbIPw7DvaVdGiYXt5Ctk RXXm/+4qyuetBwkIX3P1N+x22QKBgQDJhgTdoPoyGbJRXTCDHhH2x2BeRcSntx9k jKe/8hhLt0BEsEM6Y8db0vSUSoNU3Hwt30Ziq8qAW5QhdCmgTwXe4G+DU1HUQGYn Ef0jT4S9CjhRg4y4gWvCCDKzjWChGvozObbkmGg2HfUNa+RLJTUkii6xwpzj8HKN eLDTzy9erwKBgH71gUKsorebkbsJPKhKBbDpfTSO8lyBmOW6rfSZo8ae9CTS5J9C NQd1orRnSXcEdxy3XpwwQ84k/Al+/226NcH8CVxh5r2jQAOunXmKO0NKG5qk7H7d oZeS4Ufo1usjgB8dKZPhEt38SbJYF9xjrK4nm1u27v8lv/4YhAyU0o4hAoGBAI4U 3U1c98lm8KAI8fEfvE6fV0RgMDyHEa0UthjQmWyYsMk89MkwHBiTbTk4J8wm/65f 4wIiWM2Sw6eqfMa3sE3pMvYGQoVBOkSFnFHO+KlHkVl3RDm5lb3hhc2t+djcala/ dEFLav3stR9XWEfa3dL7Udymd3MFzd4Mn69WPfGlAoGAE3R73QJcCiaGF38Xmivg OS+QCroZoQxiTIT3Wr9k1y5ARiJLpo0SGxB1NjafMucOsvTfW2YhuxSYxATTqZLE nHNLvtiTguKYEp68FRLgVEm7gcoMaFmgy+VvjOEGPJ46QrKMwnzIUT2oOXTtnQPq dS6yauJBm8thM4juwTbtr7Q=\n -----END PRIVATE KEY-----</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="instanceid" elementType="Argument">
              <stringProp name="Argument.name">instanceid</stringProp>
              <stringProp name="Argument.value">ocid1.datacatalogmetastore.oc1.iad.amaaaaaaw5lrnkia6gzaiyl54gcfgexlybk4kfaa4tkcfocjmr5uc3xvcwpq</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="database" elementType="Argument">
              <stringProp name="Argument.name">database</stringProp>
              <stringProp name="Argument.value">default</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="table" elementType="Argument">
              <stringProp name="Argument.name">table</stringProp>
              <stringProp name="Argument.value">stdtbl16240024061624002406175</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="catalog" elementType="Argument">
              <stringProp name="Argument.name">catalog</stringProp>
              <stringProp name="Argument.value">hive</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">paasdevdcatqa</stringProp>
        </Arguments>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="paasdevdcatqa_metastore_amaaaaaaw5lrnkiaihwlgquewslg3kuzwlb67ikf34io3vaf4pbh6q6fnlhq" enabled="false">
          <collectionProp name="Arguments.arguments">
            <elementProp name="OCIMicroservice" elementType="Argument">
              <stringProp name="Argument.name">OCIMicroservice</stringProp>
              <stringProp name="Argument.value">localhost</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="keyd" elementType="Argument">
              <stringProp name="Argument.name">keyd</stringProp>
              <stringProp name="Argument.value">/Users/zameermalim/Documents/Oracle/console-staging.us-ashburn-1.oraclecloud.com/zameer.rashid.malim-01-29-12-08.pem</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TENANCYID" elementType="Argument">
              <stringProp name="Argument.name">TENANCYID</stringProp>
              <stringProp name="Argument.value">ocid1.tenancy.oc1..aaaaaaaahk25msb4bift5w2tlqo6tcepprf54thivzjr2k4vohezlmiooywa</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="AUTHUSERID" elementType="Argument">
              <stringProp name="Argument.name">AUTHUSERID</stringProp>
              <stringProp name="Argument.value">ocid1.user.oc1..aaaaaaaa7mn3ws2ubofutwhfxu5db76tukft2ppsjpx6xqf77ohsvejbtvba</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="FINGERPRINT" elementType="Argument">
              <stringProp name="Argument.name">FINGERPRINT</stringProp>
              <stringProp name="Argument.value">1a:ab:f6:bd:35:dc:60:48:25:00:f9:10:93:1e:0e:a9</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="hostname" elementType="Argument">
              <stringProp name="Argument.name">hostname</stringProp>
              <stringProp name="Argument.value">datacatalog-qa.us-ashburn-1.oci.oraclecloud.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="PRIVATEKEY" elementType="Argument">
              <stringProp name="Argument.name">PRIVATEKEY</stringProp>
              <stringProp name="Argument.value">-----BEGIN PRIVATE KEY-----\n MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCp836eRiGV7Lqn 8VOKaR9hO7yKMHEnAFNaFBzPcFu/TcfUoEMfZEMsgVfoPZAo+ZgXKPpzZ6gPZtRt flJif8d4NQ3KnoxEZ1O7tDES6jRdPtc1TPAoOmga3ns9vcr69DCtiTMmZI7vglL+ nquNI94zoHeIkAwGXeC+WsEwSr2hBf4VMqHoia4RrrdPwNkXFtPvihJ9rShkDVnn z1xqZY82PFDn3zJuNyJOA+3zof0e6HXJ0Y8BSis9rxq50xL9Qdkr2PjCZ2nHq6Pa hZeUej0eDBA3vDkM+P1RpZvwLel6W3koWQwYTMFT1/JJAgpDa3MufwU2ppLTCDxk 7IhXH+xXAgMBAAECggEAQI0seDiCFDyM7zIx/X4NPbTfWYupxtsQTcQa502xg3mr H59Zr2g5PYPJXHxZr76R3qYhbskd4++2Wvpil2gaXxWjreTHuUmX29FG3HzZs9sl Cek1xMnedeowXFSk7unmPVvB8mC6i81v8adZ2KuZf/mAvX2dG6P3s8Wr4EhbO3f5 LJEV9di7N9C/qQuEOfR5Iv7b2KbQSyQwC5+NaI6gXsvOxEQw/hdAPzMfcX9DKkz9 ZSDriSRdm+uSDVdhje4b4X4umKvDbNiURK/Z4TyrM8YZnQ5WrkGfWhrgESAL+30L 8Yaau7Ifteo/onIHQJHgK+des1Mn6njDX/CUwXM0KQKBgQDX5JTYXtY74H9Ck7nd qb2zhtRHm0sVJjd5J8ypkNWfdqcK94ipqr1LV9PawyrmIkM6vFlMU9qveOFod031 6hOVTr+fyS5BRMYLT0PwpAVMKHwqaK3l3pQHQbZ5LB/pAbIPw7DvaVdGiYXt5Ctk RXXm/+4qyuetBwkIX3P1N+x22QKBgQDJhgTdoPoyGbJRXTCDHhH2x2BeRcSntx9k jKe/8hhLt0BEsEM6Y8db0vSUSoNU3Hwt30Ziq8qAW5QhdCmgTwXe4G+DU1HUQGYn Ef0jT4S9CjhRg4y4gWvCCDKzjWChGvozObbkmGg2HfUNa+RLJTUkii6xwpzj8HKN eLDTzy9erwKBgH71gUKsorebkbsJPKhKBbDpfTSO8lyBmOW6rfSZo8ae9CTS5J9C NQd1orRnSXcEdxy3XpwwQ84k/Al+/226NcH8CVxh5r2jQAOunXmKO0NKG5qk7H7d oZeS4Ufo1usjgB8dKZPhEt38SbJYF9xjrK4nm1u27v8lv/4YhAyU0o4hAoGBAI4U 3U1c98lm8KAI8fEfvE6fV0RgMDyHEa0UthjQmWyYsMk89MkwHBiTbTk4J8wm/65f 4wIiWM2Sw6eqfMa3sE3pMvYGQoVBOkSFnFHO+KlHkVl3RDm5lb3hhc2t+djcala/ dEFLav3stR9XWEfa3dL7Udymd3MFzd4Mn69WPfGlAoGAE3R73QJcCiaGF38Xmivg OS+QCroZoQxiTIT3Wr9k1y5ARiJLpo0SGxB1NjafMucOsvTfW2YhuxSYxATTqZLE nHNLvtiTguKYEp68FRLgVEm7gcoMaFmgy+VvjOEGPJ46QrKMwnzIUT2oOXTtnQPq dS6yauJBm8thM4juwTbtr7Q=\n -----END PRIVATE KEY-----</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="instanceid" elementType="Argument">
              <stringProp name="Argument.name">instanceid</stringProp>
              <stringProp name="Argument.value">ocid1.datacatalogmetastore.oc1.iad.amaaaaaaw5lrnkiaihwlgquewslg3kuzwlb67ikf34io3vaf4pbh6q6fnlhq</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="database" elementType="Argument">
              <stringProp name="Argument.name">database</stringProp>
              <stringProp name="Argument.value">default</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="table" elementType="Argument">
              <stringProp name="Argument.name">table</stringProp>
              <stringProp name="Argument.value">stdtbl16259347111625934711151</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">1000 parts</stringProp>
            </elementProp>
            <elementProp name="catalog" elementType="Argument">
              <stringProp name="Argument.name">catalog</stringProp>
              <stringProp name="Argument.value">hive</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">paasdevdcatqa</stringProp>
        </Arguments>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="paasdevdcatqa_metastore_amaaaaaaw5lrnkiazunhhlltoxgzi3xyueeroklbiofwv6hbqc4kpgrhuisq" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="OCIMicroservice" elementType="Argument">
              <stringProp name="Argument.name">OCIMicroservice</stringProp>
              <stringProp name="Argument.value">localhost</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="keyd" elementType="Argument">
              <stringProp name="Argument.name">keyd</stringProp>
              <stringProp name="Argument.value">/Users/zameermalim/Documents/Oracle/console-staging.us-ashburn-1.oraclecloud.com/zameer.rashid.malim-01-29-12-08.pem</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TENANCYID" elementType="Argument">
              <stringProp name="Argument.name">TENANCYID</stringProp>
              <stringProp name="Argument.value">ocid1.tenancy.oc1..aaaaaaaahk25msb4bift5w2tlqo6tcepprf54thivzjr2k4vohezlmiooywa</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="AUTHUSERID" elementType="Argument">
              <stringProp name="Argument.name">AUTHUSERID</stringProp>
              <stringProp name="Argument.value">ocid1.user.oc1..aaaaaaaa7mn3ws2ubofutwhfxu5db76tukft2ppsjpx6xqf77ohsvejbtvba</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="FINGERPRINT" elementType="Argument">
              <stringProp name="Argument.name">FINGERPRINT</stringProp>
              <stringProp name="Argument.value">1a:ab:f6:bd:35:dc:60:48:25:00:f9:10:93:1e:0e:a9</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="hostname" elementType="Argument">
              <stringProp name="Argument.name">hostname</stringProp>
              <stringProp name="Argument.value">datacatalog-qa.us-ashburn-1.oci.oraclecloud.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="PRIVATEKEY" elementType="Argument">
              <stringProp name="Argument.name">PRIVATEKEY</stringProp>
              <stringProp name="Argument.value">-----BEGIN PRIVATE KEY-----\n MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCp836eRiGV7Lqn 8VOKaR9hO7yKMHEnAFNaFBzPcFu/TcfUoEMfZEMsgVfoPZAo+ZgXKPpzZ6gPZtRt flJif8d4NQ3KnoxEZ1O7tDES6jRdPtc1TPAoOmga3ns9vcr69DCtiTMmZI7vglL+ nquNI94zoHeIkAwGXeC+WsEwSr2hBf4VMqHoia4RrrdPwNkXFtPvihJ9rShkDVnn z1xqZY82PFDn3zJuNyJOA+3zof0e6HXJ0Y8BSis9rxq50xL9Qdkr2PjCZ2nHq6Pa hZeUej0eDBA3vDkM+P1RpZvwLel6W3koWQwYTMFT1/JJAgpDa3MufwU2ppLTCDxk 7IhXH+xXAgMBAAECggEAQI0seDiCFDyM7zIx/X4NPbTfWYupxtsQTcQa502xg3mr H59Zr2g5PYPJXHxZr76R3qYhbskd4++2Wvpil2gaXxWjreTHuUmX29FG3HzZs9sl Cek1xMnedeowXFSk7unmPVvB8mC6i81v8adZ2KuZf/mAvX2dG6P3s8Wr4EhbO3f5 LJEV9di7N9C/qQuEOfR5Iv7b2KbQSyQwC5+NaI6gXsvOxEQw/hdAPzMfcX9DKkz9 ZSDriSRdm+uSDVdhje4b4X4umKvDbNiURK/Z4TyrM8YZnQ5WrkGfWhrgESAL+30L 8Yaau7Ifteo/onIHQJHgK+des1Mn6njDX/CUwXM0KQKBgQDX5JTYXtY74H9Ck7nd qb2zhtRHm0sVJjd5J8ypkNWfdqcK94ipqr1LV9PawyrmIkM6vFlMU9qveOFod031 6hOVTr+fyS5BRMYLT0PwpAVMKHwqaK3l3pQHQbZ5LB/pAbIPw7DvaVdGiYXt5Ctk RXXm/+4qyuetBwkIX3P1N+x22QKBgQDJhgTdoPoyGbJRXTCDHhH2x2BeRcSntx9k jKe/8hhLt0BEsEM6Y8db0vSUSoNU3Hwt30Ziq8qAW5QhdCmgTwXe4G+DU1HUQGYn Ef0jT4S9CjhRg4y4gWvCCDKzjWChGvozObbkmGg2HfUNa+RLJTUkii6xwpzj8HKN eLDTzy9erwKBgH71gUKsorebkbsJPKhKBbDpfTSO8lyBmOW6rfSZo8ae9CTS5J9C NQd1orRnSXcEdxy3XpwwQ84k/Al+/226NcH8CVxh5r2jQAOunXmKO0NKG5qk7H7d oZeS4Ufo1usjgB8dKZPhEt38SbJYF9xjrK4nm1u27v8lv/4YhAyU0o4hAoGBAI4U 3U1c98lm8KAI8fEfvE6fV0RgMDyHEa0UthjQmWyYsMk89MkwHBiTbTk4J8wm/65f 4wIiWM2Sw6eqfMa3sE3pMvYGQoVBOkSFnFHO+KlHkVl3RDm5lb3hhc2t+djcala/ dEFLav3stR9XWEfa3dL7Udymd3MFzd4Mn69WPfGlAoGAE3R73QJcCiaGF38Xmivg OS+QCroZoQxiTIT3Wr9k1y5ARiJLpo0SGxB1NjafMucOsvTfW2YhuxSYxATTqZLE nHNLvtiTguKYEp68FRLgVEm7gcoMaFmgy+VvjOEGPJ46QrKMwnzIUT2oOXTtnQPq dS6yauJBm8thM4juwTbtr7Q=\n -----END PRIVATE KEY-----</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="instanceid" elementType="Argument">
              <stringProp name="Argument.name">instanceid</stringProp>
              <stringProp name="Argument.value">ocid1.datacatalogmetastore.oc1.iad.amaaaaaaw5lrnkiazunhhlltoxgzi3xyueeroklbiofwv6hbqc4kpgrhuisq</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="database" elementType="Argument">
              <stringProp name="Argument.name">database</stringProp>
              <stringProp name="Argument.value">default</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="table" elementType="Argument">
              <stringProp name="Argument.name">table</stringProp>
              <stringProp name="Argument.value">stdtbl16259347111625934711151</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">1000 parts</stringProp>
            </elementProp>
            <elementProp name="catalog" elementType="Argument">
              <stringProp name="Argument.name">catalog</stringProp>
              <stringProp name="Argument.value">hive</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">paasdevdcatqa</stringProp>
        </Arguments>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="paasdevdcatinfra" enabled="false">
          <collectionProp name="Arguments.arguments">
            <elementProp name="OCIMicroservice" elementType="Argument">
              <stringProp name="Argument.name">OCIMicroservice</stringProp>
              <stringProp name="Argument.value">localhost</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="keyd" elementType="Argument">
              <stringProp name="Argument.name">keyd</stringProp>
              <stringProp name="Argument.value">/Users/zameermalim/Documents/Oracle/consoleStagingUsashburn1oraclecloud/zameer.rashid.malim-02-17-08-30paasdecdcatinfra.pem</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TENANCYID" elementType="Argument">
              <stringProp name="Argument.name">TENANCYID</stringProp>
              <stringProp name="Argument.value">ocid1.tenancy.oc1..aaaaaaaarmzlx7mdssig6ml73hvndduyimqicw6xi275xn2opyr4rioqjs2q</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="AUTHUSERID" elementType="Argument">
              <stringProp name="Argument.name">AUTHUSERID</stringProp>
              <stringProp name="Argument.value">ocid1.user.oc1..aaaaaaaasirrtdkxxp7votndbprqhru52mvgy5qihqtkgjlgpc2ubsdj2jkq</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="FINGERPRINT" elementType="Argument">
              <stringProp name="Argument.name">FINGERPRINT</stringProp>
              <stringProp name="Argument.value">58:e5:b3:f2:1e:ae:ca:23:7c:75:8d:52:3b:e9:0b:08</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="hostname" elementType="Argument">
              <stringProp name="Argument.name">hostname</stringProp>
              <stringProp name="Argument.value">datacatalog-devn.us-phoenix-1.oci.oraclecloud.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="PRIVATEKEY" elementType="Argument">
              <stringProp name="Argument.name">PRIVATEKEY</stringProp>
              <stringProp name="Argument.value">-----BEGIN PRIVATE KEY-----\nMIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQC39SYdrHrTu+WJ nFoVHzqxfWR47vWSmUT8FFU28Vc3oCuZGWwZ+K77Sozm6n6Z4/LG4eOVEnqV2nYr Hr3+JIm/UzAhJfKsudrSOeKhLXWo9KzY7J5AXMLscoKs4Pt2uiPZWdODaAbp+Xqb wNR20VidT8oeCxH5PYEpuFNX70x7syaTJWRBItWNL+pj1mGnfQRRSoQVbdu+jt6z euLR9/Vgwv3CunOZqxuQWeUUUsSkNo4/3PYG+LvR3CPcCpRWqwcIC3uW0+PxEWkF a/vLXjE6dSE9DBaG7S/2y79MF7dW0Db38ztSpFWWEiMuB3VokMOehpV9z1t+bW1j 7szd9a87AgMBAAECggEAWT8LDexm7qBC/R8oqQSsof12qCEubMAFMtLegLhXmvoP DMjDpFn88pc5grITV6+6Ufi3Q9RiOp9xIvxYKpspZPQD7qENefT1D3bb11xJr/18 egVZxVn7i2EGur6v4Orvh3xH3IG0kQDjFftYWIi6GB/kq+ys/KF1L3tom8nR7lSq B/z2iezJjYf/u5vDev9PyfxReKANYbeXYVStHrPpr4NL7tC2GRrHT/nFRfR4YBbw Iv56XUt70NM+2tDTRGi77x7ShNS/2nt8cP+Om85w7BMANGaEwVJaGjIqOTtmdlT7 kFjYxW81s8qXesosZGGdJSTKmvCTJtSIeNMU1QNv4QKBgQDnntV4ocblf9ynPtPe B2CAXk3X9QNexT6v5zjzjIyhjhsWBJgDReZkM588ArlwTDgR9amdCrR8mmUK3I0W YfR7OLI+xeffT3tQBTiZ2zlrHE3+4iHG2qUrnMJbOzRVzFp6QNBBMhJQ6UPJ0rCg qKls/okT10toQqGaPKlTWJpqiwKBgQDLUgIri35GGtLD1g1RlCgOGIXJf86Pq+fR Q2eGGz6rlOiQW6aEgYbL1uEGMg6S7JVezCXsN+wGXrlnrXSJubYJPyegary3tFwg fB9it1TP0udGXds4p6BrgQ9/p9FvvvoOxDFnj+I1/a6LCj8X8ZLlr/kg32PtomyW mkaUnR1UEQKBgDmN6WOxZ3gNvqm8Xe81DBC53kQEeRLqlnolTayPRz65zhc5iwB9 NRO/FBlYX/X8qo4j6kLArzqrLuJ1DYX7T0HzQ69/g++kk3K96WOp6umnveXRES2V lSdyK4V5/7Y2MmFgi583rv92B0c2WHeDkZ4o3a0VeYJt1DQ8UKMKSEyjAoGBALCo lcgeEN56yexsnO/n6hGtTvlwOhrtQ6O4jEeifoZ5AMUFTR7OqD+OecB3V+Bi/bn7 aWvgfwxd23xw4tQT704DeLvSYhy/8lgrYN3V6zQTzO1/+U01oJYn8j55oukUJ5MS 9tZD10oQHEsk4QM92+QETVM5pkrAmNcWPwM7rFLxAoGBAInNWXs54xAgkwOVsBOx x9YvEYPBoXPxVkfoGUeal3a0Cs2iggze9vvcUMkM0vB2MWfnORJzUjF9XoQMCMwz rbchcn+uW4WrdkpDvXuoN3G+/mQqlPUomz4ZlVUthclL3PlEvf2QBF8VTgpiua5K 1GrxXWEe8M/HEz8TPP8+SsTF\n -----END PRIVATE KEY-----</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="instanceid" elementType="Argument">
              <stringProp name="Argument.name">instanceid</stringProp>
              <stringProp name="Argument.value">ocid1.datacatalog.oc1.phx.aaaaaaaagqp6u4kkpvjlnn2mcg2xzswdcsnvi3drqdgqfpyjrrtnpm4wqm5a</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">paasdevdcatinfra</stringProp>
        </Arguments>
        <hashTree/>
        <com.blazemeter.jmeter.RandomCSVDataSetConfig guiclass="com.blazemeter.jmeter.RandomCSVDataSetConfigGui" testclass="com.blazemeter.jmeter.RandomCSVDataSetConfig" testname="tablesCSVServer" enabled="false">
          <stringProp name="filename">/home/opc/DataSet</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="variableNames">table</stringProp>
          <boolProp name="randomOrder">true</boolProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <boolProp name="rewindOnTheEndOfList">true</boolProp>
          <boolProp name="independentListPerThread">false</boolProp>
        </com.blazemeter.jmeter.RandomCSVDataSetConfig>
        <hashTree/>
        <com.blazemeter.jmeter.RandomCSVDataSetConfig guiclass="com.blazemeter.jmeter.RandomCSVDataSetConfigGui" testclass="com.blazemeter.jmeter.RandomCSVDataSetConfig" testname="tablesCSVLocal" enabled="false">
          <stringProp name="filename">/Users/zameermalim/Documents/Oracle/Vms/HIveMetaStore/jMeterResults/DataSet</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="variableNames">table</stringProp>
          <boolProp name="randomOrder">true</boolProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <boolProp name="rewindOnTheEndOfList">true</boolProp>
          <boolProp name="independentListPerThread">false</boolProp>
        </com.blazemeter.jmeter.RandomCSVDataSetConfig>
        <hashTree/>
        <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="OffsetValue" enabled="true">
          <stringProp name="maximumValue">9990</stringProp>
          <stringProp name="minimumValue">10</stringProp>
          <stringProp name="outputFormat"></stringProp>
          <boolProp name="perThread">true</boolProp>
          <stringProp name="randomSeed"></stringProp>
          <stringProp name="variableName">OffsetValue</stringProp>
        </RandomVariableConfig>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="dcatdemo" enabled="false">
          <collectionProp name="Arguments.arguments">
            <elementProp name="OCIMicroservice" elementType="Argument">
              <stringProp name="Argument.name">OCIMicroservice</stringProp>
              <stringProp name="Argument.value">localhost</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="keyd" elementType="Argument">
              <stringProp name="Argument.name">keyd</stringProp>
              <stringProp name="Argument.value">/Users/zameermalim/Documents/Oracle/console-staging.us-ashburn-1.oraclecloud.com/zameer.rashid.malim-01-29-12-08.pem</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TENANCYID" elementType="Argument">
              <stringProp name="Argument.name">TENANCYID</stringProp>
              <stringProp name="Argument.value">ocid1.tenancy.oc1..aaaaaaaakydcqlqxuodjzygfaec6s5yyeo7jkscv5sxtzigs3hthgav3cyka</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="AUTHUSERID" elementType="Argument">
              <stringProp name="Argument.name">AUTHUSERID</stringProp>
              <stringProp name="Argument.value">ocid1.user.oc1..aaaaaaaaxt3uu6ml4hscfhugt2rdylprpvmfzfejqdhpxoarmswhi2euumba</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="FINGERPRINT" elementType="Argument">
              <stringProp name="Argument.name">FINGERPRINT</stringProp>
              <stringProp name="Argument.value">ce:39:89:6f:cf:25:8f:a4:5e:ca:44:c5:34:19:3c:c2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="hostname" elementType="Argument">
              <stringProp name="Argument.name">hostname</stringProp>
              <stringProp name="Argument.value">datacatalog-stage.eu-amsterdam-1.oci.oraclecloud.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="PRIVATEKEY" elementType="Argument">
              <stringProp name="Argument.name">PRIVATEKEY</stringProp>
              <stringProp name="Argument.value">-----BEGIN PRIVATE KEY-----\n MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQDAlUOJMt51tTMn B9BgzaYpFLcn7WLoBSos98fYRZirnCCUCALcDbsPM7Z5AqTloDOxbrITA5e0o27m 7IpG5EgSS2x/y/myznagIwaBqMdpPStHOQgDXTKBjyGRy6d5fgfBEncxpfgX5udz b3Xhl2y7OpzYtF2vdQ1vVV+9WhY4X201HPiQ1r4YNG0gLYkittNavVir9+HTjsga HH2nI52MZ++k7Z9cdzJawilmB14NmK6bvz94t8vHNWKT665WJratLEVYGLCNfhRQ 1dcjH2i0veaqsSEnX+23Vr3P92hsbFvFAHbfuORf+ejww1mBlakP/2yo5VEHphlA Ix9xAw4vAgMBAAECggEAV+FFKkxuO2RubTchnar6UfDEC5JF+f6xWkfPiB9qJZVf QG3PcD9LxwogEGRmfup17FfJJugSyDl0GCiEiQkO4lpMrpyT20Zf139kLrKoHJvv LdcWkwJqU7jO5sr6J3SdcTtN7PgBmFaj84c/UaxZz65VeIYF4lUVxmI9CBkd3qbS ICa8C9/G0i+iGfEd1O4VTnJId3ntlZ951Nx+D4v+9hgeRytbXc6XAIa5/VYxTyf+ 5J3rvTEigmwAdxC3GTxyeyfLLwjsTUYo3wRNMrkxSxD8x/uCsckSRSF+DF/gf9ex GQlO3/8ZCHjpbZ8JvHWn6yYBZ2NyIxPnJ0Da+QRDYQKBgQDrTij4Yf28L4GixQOD S45+dAx1PfFb/xQPnNXgVz6+bjjaauL4CG3sI7NlfT5PrKNC3Z7cHaq/7QmOTFBp Fkgldn6LCOR/MOUtRkHOGt7NFrgmmWU2TaowjHDVm+HOKdp6ItBKmathtXRLQH5X s7dS+SbX0uxO41+lBrQJEVNtNwKBgQDRhTkYunK97K78vqyRLqkBgOoLmJmuDKi+ plg9kzGILiF8d+IgEV6/wnzg8d/sYiVbeR/sPXoJaGcBrHPBY6edDBBWfargYYYj LMZMddpvCKU1y67QzKHLFavBoe3OuBT/bwvcjOE2G5W+gO2LfXFG1AJMgfkh3HSF 1Mz5JociyQKBgCmibsVkMU026q0uRuzYVaIyTnIAP9CTVa1dhspnJYb0YcLj3r0c YLbDql5uxrO6TDjslctExI2pF2PCRQgTFTjruoBHVoba0/Iq2EHrpziKqJLL2Yi+ PTrR3rUtG8sqxKmPt2M7xYNIZAdcpf5Gok1gIGtXutBKkwXUJc7k7eoJAoGAFjc/ D50tb2/6OfhpydcdungV2PbsTKUw+04eCyFhXiQuDsmTY30UA9c2cI+VA7aAaYuV U/JMz1SPn4DOoVHUwvU1gkY+6R3OIEquGAtjBuTux556Qc+A1EzO8nAeDA4+w7rd khwqARe5sAJxrZm2eiEewUgCx5FdlZczyLNKHukCgYAG8QzanU+uEIuN7HH+k0Z5 VJDWVDCVKHfKJQB6Kd3MLWozMw8lOLlIVQhGnZp1D5l1qOyXQ0KNT5bu5uhtKetG 2a8uPnsUrPyhAIXko3X9j0fPXX/b+uUVv8zvWdZo+R6vB77iDkHEp/Ck+vUSH948 U3iS/bsJ2ZKuriiQOzlzRw==\n -----END PRIVATE KEY-----</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="instanceid" elementType="Argument">
              <stringProp name="Argument.name">instanceid</stringProp>
              <stringProp name="Argument.value">ocid1.datacatalog.oc1.eu-amsterdam-1.aaaaaaaaxypdz5xnrq5hs2i772zcnvd2hj7z7mqi6fok5yx4pjb6txvkmzoa</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">dcatdemo</stringProp>
        </Arguments>
        <hashTree/>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <intProp name="calcMode">1</intProp>
          <doubleProp>
            <name>throughput</name>
            <value>18000.0</value>
            <savedValue>0.0</savedValue>
          </doubleProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Catalogs Signature" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;tenancyId&quot;: &quot;${TENANCYID}&quot;, &quot;authUserId&quot;: &quot;${AUTHUSERID}&quot;,&quot;keyFingerprint&quot;: &quot;${FINGERPRINT}&quot;,&quot;privateKeyFilename&quot;: &quot;${PRIVATEKEY}&quot;, &quot;geturl&quot;: &quot;https://${hostname}/20190325/metastores/${instanceid}/actions/execute&quot;, &quot;messageBody&quot;:&quot;{\&quot;methodName\&quot;:\&quot;getCatalogs\&quot;,\&quot;metastoreVersion\&quot;:\&quot;3.1.2\&quot;}&quot;, &quot;restType&quot; : &quot;POST&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${OCIMicroservice}</stringProp>
          <stringProp name="HTTPSampler.port">9080</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/sign/getsignature</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">date7</stringProp>
            <stringProp name="RegexExtractor.regex">date:(.*?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">keyid7</stringProp>
            <stringProp name="RegexExtractor.regex">Authorization:(.+);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SHAPA</stringProp>
            <stringProp name="RegexExtractor.regex">x-content-sha256:(.+?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">100</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="false">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DCAT MS GET Catalogs" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;methodName&quot;:&quot;getCatalogs&quot;,&quot;metastoreVersion&quot;:&quot;3.1.2&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">20190325/metastores/${instanceid}/actions/execute</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${keyid7}</stringProp>
              </elementProp>
              <elementProp name="date" elementType="Header">
                <stringProp name="Header.name">date</stringProp>
                <stringProp name="Header.value">${date7}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">host</stringProp>
                <stringProp name="Header.value">${hostname}</stringProp>
              </elementProp>
              <elementProp name="x-content-sha256" elementType="Header">
                <stringProp name="Header.name">x-content-sha256</stringProp>
                <stringProp name="Header.value">${SHAPA}</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="catalog" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">catalog</stringProp>
            <stringProp name="RegexExtractor.regex">\\&quot;(.*?)\\&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">100</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="false">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Databases Signature" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;tenancyId&quot;: &quot;${TENANCYID}&quot;, &quot;authUserId&quot;: &quot;${AUTHUSERID}&quot;,&quot;keyFingerprint&quot;: &quot;${FINGERPRINT}&quot;,&quot;privateKeyFilename&quot;: &quot;${PRIVATEKEY}&quot;, &quot;geturl&quot;: &quot;https://${hostname}/20190325/metastores/${instanceid}/actions/execute&quot;, &quot;messageBody&quot;:&quot;{\&quot;methodName\&quot;:\&quot;getDatabases\&quot;,\&quot;metastoreVersion\&quot;:\&quot;3.1.2\&quot;}&quot;, &quot;restType&quot; : &quot;POST&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${OCIMicroservice}</stringProp>
          <stringProp name="HTTPSampler.port">9080</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/sign/getsignature</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">date7</stringProp>
            <stringProp name="RegexExtractor.regex">date:(.*?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">keyid7</stringProp>
            <stringProp name="RegexExtractor.regex">Authorization:(.+);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SHAPA</stringProp>
            <stringProp name="RegexExtractor.regex">x-content-sha256:(.+?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">100</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="false">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DCAT MS GET Database" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;methodName&quot;:&quot;getDatabases&quot;,&quot;metastoreVersion&quot;:&quot;3.1.2&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">20190325/metastores/${instanceid}/actions/execute</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${keyid7}</stringProp>
              </elementProp>
              <elementProp name="date" elementType="Header">
                <stringProp name="Header.name">date</stringProp>
                <stringProp name="Header.value">${date7}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">host</stringProp>
                <stringProp name="Header.value">${hostname}</stringProp>
              </elementProp>
              <elementProp name="x-content-sha256" elementType="Header">
                <stringProp name="Header.name">x-content-sha256</stringProp>
                <stringProp name="Header.value">${SHAPA}</stringProp>
              </elementProp>
              <elementProp name="{&quot;methodName&quot;" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="database" enabled="false">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">database</stringProp>
            <stringProp name="RegexExtractor.regex">\\&quot;(.*?)\\&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">100</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="false">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Tables Signature" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;tenancyId&quot;: &quot;${TENANCYID}&quot;, &quot;authUserId&quot;: &quot;${AUTHUSERID}&quot;,&quot;keyFingerprint&quot;: &quot;${FINGERPRINT}&quot;,&quot;privateKeyFilename&quot;: &quot;${PRIVATEKEY}&quot;, &quot;geturl&quot;: &quot;https://${hostname}/20190325/metastores/${instanceid}/actions/execute&quot;, &quot;messageBody&quot;:&quot;{\&quot;params\&quot;:{\&quot;catName\&quot;:\&quot;${catalog}\&quot;,\&quot;dbName\&quot;:\&quot;${database}\&quot;},\&quot;payload\&quot;:\&quot;\&quot;,\&quot;methodName\&quot;:\&quot;getTables\&quot;,\&quot;metastoreVersion\&quot;:\&quot;3.1.2\&quot;}&quot;, &quot;restType&quot; : &quot;POST&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${OCIMicroservice}</stringProp>
          <stringProp name="HTTPSampler.port">9080</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/sign/getsignature</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">date7</stringProp>
            <stringProp name="RegexExtractor.regex">date:(.*?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">keyid7</stringProp>
            <stringProp name="RegexExtractor.regex">Authorization:(.+);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SHAPA</stringProp>
            <stringProp name="RegexExtractor.regex">x-content-sha256:(.+?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">100</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="false">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DCAT MS GET Tables" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;params&quot;:{&quot;catName&quot;:&quot;${catalog}&quot;,&quot;dbName&quot;:&quot;${database}&quot;},&quot;payload&quot;:&quot;&quot;,&quot;methodName&quot;:&quot;getTables&quot;,&quot;metastoreVersion&quot;:&quot;3.1.2&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">20190325/metastores/${instanceid}/actions/execute</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${keyid7}</stringProp>
              </elementProp>
              <elementProp name="date" elementType="Header">
                <stringProp name="Header.name">date</stringProp>
                <stringProp name="Header.value">${date7}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">host</stringProp>
                <stringProp name="Header.value">${hostname}</stringProp>
              </elementProp>
              <elementProp name="x-content-sha256" elementType="Header">
                <stringProp name="Header.name">x-content-sha256</stringProp>
                <stringProp name="Header.value">${SHAPA}</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="table" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">table</stringProp>
            <stringProp name="RegexExtractor.regex">\\&quot;(.*?)\\&quot;,</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">100</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="false">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Catalog Signature" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;tenancyId&quot;: &quot;${TENANCYID}&quot;, &quot;authUserId&quot;: &quot;${AUTHUSERID}&quot;,&quot;keyFingerprint&quot;: &quot;${FINGERPRINT}&quot;,&quot;privateKeyFilename&quot;: &quot;${PRIVATEKEY}&quot;, &quot;geturl&quot;: &quot;https://${hostname}/20190325/metastores/${instanceid}/actions/execute&quot;, &quot;messageBody&quot;:&quot;{\&quot;params\&quot;:{\&quot;catName\&quot;:\&quot;${catalog}\&quot;},\&quot;payload\&quot;:\&quot;\&quot;,\&quot;methodName\&quot;:\&quot;getCatalog\&quot;,\&quot;metastoreVersion\&quot;:\&quot;3.1.2\&quot;}&quot;, &quot;restType&quot; : &quot;POST&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${OCIMicroservice}</stringProp>
          <stringProp name="HTTPSampler.port">9080</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/sign/getsignature</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">date7</stringProp>
            <stringProp name="RegexExtractor.regex">date:(.*?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">keyid7</stringProp>
            <stringProp name="RegexExtractor.regex">Authorization:(.+);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SHAPA</stringProp>
            <stringProp name="RegexExtractor.regex">x-content-sha256:(.+?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">100</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="false">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DCAT MS GET Catalog" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;params&quot;:{&quot;catName&quot;:&quot;${catalog}&quot;},&quot;payload&quot;:&quot;&quot;,&quot;methodName&quot;:&quot;getCatalog&quot;,&quot;metastoreVersion&quot;:&quot;3.1.2&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">20190325/metastores/${instanceid}/actions/execute</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${keyid7}</stringProp>
              </elementProp>
              <elementProp name="date" elementType="Header">
                <stringProp name="Header.name">date</stringProp>
                <stringProp name="Header.value">${date7}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">host</stringProp>
                <stringProp name="Header.value">${hostname}</stringProp>
              </elementProp>
              <elementProp name="x-content-sha256" elementType="Header">
                <stringProp name="Header.name">x-content-sha256</stringProp>
                <stringProp name="Header.value">${SHAPA}</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">100</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="false">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Table Signature" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;tenancyId&quot;: &quot;${TENANCYID}&quot;, &quot;authUserId&quot;: &quot;${AUTHUSERID}&quot;,&quot;keyFingerprint&quot;: &quot;${FINGERPRINT}&quot;,&quot;privateKeyFilename&quot;: &quot;${PRIVATEKEY}&quot;, &quot;geturl&quot;: &quot;https://${hostname}/20190325/metastores/${instanceid}/actions/execute&quot;, &quot;messageBody&quot;:&quot;{\&quot;params\&quot;:{\&quot;catName\&quot;:\&quot;${catalog}\&quot;,\&quot;dbName\&quot;:\&quot;${database}\&quot;,\&quot;tblName\&quot;:\&quot;${table}\&quot;},\&quot;payload\&quot;:\&quot;\&quot;,\&quot;methodName\&quot;:\&quot;getTable\&quot;,\&quot;metastoreVersion\&quot;:\&quot;3.1.2\&quot;}&quot;, &quot;restType&quot; : &quot;POST&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${OCIMicroservice}</stringProp>
          <stringProp name="HTTPSampler.port">9080</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/sign/getsignature</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">date7</stringProp>
            <stringProp name="RegexExtractor.regex">date:(.*?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">keyid7</stringProp>
            <stringProp name="RegexExtractor.regex">Authorization:(.+);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SHAPA</stringProp>
            <stringProp name="RegexExtractor.regex">x-content-sha256:(.+?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">100</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="false">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DCAT MS GET Table" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;params&quot;:{&quot;catName&quot;:&quot;${catalog}&quot;,&quot;dbName&quot;:&quot;${database}&quot;,&quot;tblName&quot;:&quot;${table}&quot;},&quot;payload&quot;:&quot;&quot;,&quot;methodName&quot;:&quot;getTable&quot;,&quot;metastoreVersion&quot;:&quot;3.1.2&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">20190325/metastores/${instanceid}/actions/execute</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${keyid7}</stringProp>
              </elementProp>
              <elementProp name="date" elementType="Header">
                <stringProp name="Header.name">date</stringProp>
                <stringProp name="Header.value">${date7}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">host</stringProp>
                <stringProp name="Header.value">${hostname}</stringProp>
              </elementProp>
              <elementProp name="x-content-sha256" elementType="Header">
                <stringProp name="Header.name">x-content-sha256</stringProp>
                <stringProp name="Header.value">${SHAPA}</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="false">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">30</stringProp>
        </LoopController>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET TableMeta Signature" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;tenancyId&quot;: &quot;${TENANCYID}&quot;, &quot;authUserId&quot;: &quot;${AUTHUSERID}&quot;,&quot;keyFingerprint&quot;: &quot;${FINGERPRINT}&quot;,&quot;privateKeyFilename&quot;: &quot;${PRIVATEKEY}&quot;, &quot;geturl&quot;: &quot;https://${hostname}/20190325/metastores/${instanceid}/actions/execute&quot;, &quot;messageBody&quot;:&quot;{\&quot;params\&quot;:{\&quot;catName\&quot;:\&quot;hive\&quot;,\&quot;databasePatterns\&quot;:\&quot;default\&quot;,\&quot;tablePatterns\&quot;:\&quot;stdtbl16245899121624589912157\&quot;,\&quot;tableTypes\&quot;:\&quot;[\\\&quot;MANAGED_TABLE\\\&quot;]\&quot;},\&quot;payload\&quot;:\&quot;\&quot;,\&quot;methodName\&quot;:\&quot;getTableMeta\&quot;,\&quot;metastoreVersion\&quot;:\&quot;3.1.2\&quot;}&quot;, &quot;restType&quot; : &quot;POST&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${OCIMicroservice}</stringProp>
          <stringProp name="HTTPSampler.port">9080</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/sign/getsignature</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">date7</stringProp>
            <stringProp name="RegexExtractor.regex">date:(.*?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">keyid7</stringProp>
            <stringProp name="RegexExtractor.regex">Authorization:(.+);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SHAPA</stringProp>
            <stringProp name="RegexExtractor.regex">x-content-sha256:(.+?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DCAT MS GET TableMeta" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;params&quot;:{&quot;catName&quot;:&quot;hive&quot;,&quot;databasePatterns&quot;:&quot;default&quot;,&quot;tablePatterns&quot;:&quot;stdtbl16245899121624589912157&quot;,&quot;tableTypes&quot;:&quot;[\&quot;MANAGED_TABLE\&quot;]&quot;},&quot;payload&quot;:&quot;&quot;,&quot;methodName&quot;:&quot;getTableMeta&quot;,&quot;metastoreVersion&quot;:&quot;3.1.2&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">20190325/metastores/${instanceid}/actions/execute</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${keyid7}</stringProp>
              </elementProp>
              <elementProp name="date" elementType="Header">
                <stringProp name="Header.name">date</stringProp>
                <stringProp name="Header.value">${date7}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">host</stringProp>
                <stringProp name="Header.value">${hostname}</stringProp>
              </elementProp>
              <elementProp name="x-content-sha256" elementType="Header">
                <stringProp name="Header.name">x-content-sha256</stringProp>
                <stringProp name="Header.value">${SHAPA}</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET TableMeta Signature" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;tenancyId&quot;: &quot;${TENANCYID}&quot;, &quot;authUserId&quot;: &quot;${AUTHUSERID}&quot;,&quot;keyFingerprint&quot;: &quot;${FINGERPRINT}&quot;,&quot;privateKeyFilename&quot;: &quot;${PRIVATEKEY}&quot;, &quot;geturl&quot;: &quot;https://${hostname}/20190325/metastores/${instanceid}/actions/execute&quot;, &quot;messageBody&quot;:&quot;{\&quot;params\&quot;:{\&quot;catName\&quot;:\&quot;hive\&quot;,\&quot;databasePatterns\&quot;:\&quot;default\&quot;,\&quot;tablePatterns\&quot;:\&quot;stdtbl16245899121624589912157\&quot;,\&quot;tableTypes\&quot;:\&quot;[\\\&quot;MANAGED_TABLE\\\&quot;]\&quot;},\&quot;payload\&quot;:\&quot;\&quot;,\&quot;methodName\&quot;:\&quot;getTableMeta\&quot;,\&quot;metastoreVersion\&quot;:\&quot;3.1.2\&quot;}&quot;, &quot;restType&quot; : &quot;POST&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${OCIMicroservice}</stringProp>
          <stringProp name="HTTPSampler.port">9080</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/sign/getsignature</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">date7</stringProp>
            <stringProp name="RegexExtractor.regex">date:(.*?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">keyid7</stringProp>
            <stringProp name="RegexExtractor.regex">Authorization:(.+);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SHAPA</stringProp>
            <stringProp name="RegexExtractor.regex">x-content-sha256:(.+?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DCAT MS GET TableMeta" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;params&quot;:{&quot;catName&quot;:&quot;hive&quot;,&quot;databasePatterns&quot;:&quot;default&quot;,&quot;tablePatterns&quot;:&quot;stdtbl16245899121624589912157&quot;,&quot;tableTypes&quot;:&quot;[\&quot;MANAGED_TABLE\&quot;]&quot;},&quot;payload&quot;:&quot;&quot;,&quot;methodName&quot;:&quot;getTableMeta&quot;,&quot;metastoreVersion&quot;:&quot;3.1.2&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">20190325/metastores/${instanceid}/actions/execute</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="glossaryKey" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">glossaryKey</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..key</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">null</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET getTableColumnStatistics Signature" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;tenancyId&quot;: &quot;${TENANCYID}&quot;, &quot;authUserId&quot;: &quot;${AUTHUSERID}&quot;,&quot;keyFingerprint&quot;: &quot;${FINGERPRINT}&quot;,&quot;privateKeyFilename&quot;: &quot;${PRIVATEKEY}&quot;, &quot;geturl&quot;: &quot;https://${hostname}/20190325/metastores/${instanceid}/actions/execute&quot;, &quot;messageBody&quot;:&quot;{\&quot;params\&quot;:{\&quot;catName\&quot;:\&quot;hive\&quot;,\&quot;dbName\&quot;:\&quot;default\&quot;,\&quot;columnNames\&quot;:\&quot;[\\\&quot;stdCol_0_stdTbl16233103881623310388043\\\&quot;,\\\&quot;stdCol_1_stdTbl16233103881623310388043\\\&quot;]\&quot;,\&quot;tblName\&quot;:\&quot;stdTbl16233103881623310388043\&quot;},\&quot;payload\&quot;:\&quot;\&quot;,\&quot;methodName\&quot;:\&quot;getTableColumnStatistics\&quot;,\&quot;metastoreVersion\&quot;:\&quot;3.1.2\&quot;}&quot;, &quot;restType&quot; : &quot;POST&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${OCIMicroservice}</stringProp>
          <stringProp name="HTTPSampler.port">9080</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/sign/getsignature</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">date7</stringProp>
            <stringProp name="RegexExtractor.regex">date:(.*?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">keyid7</stringProp>
            <stringProp name="RegexExtractor.regex">Authorization:(.+);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SHAPA</stringProp>
            <stringProp name="RegexExtractor.regex">x-content-sha256:(.+?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DCAT MS GET getTableColumnStatistics" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;params&quot;:{&quot;catName&quot;:&quot;hive&quot;,&quot;dbName&quot;:&quot;default&quot;,&quot;columnNames&quot;:&quot;[\&quot;stdCol_0_stdTbl16233103881623310388043\&quot;,\&quot;stdCol_1_stdTbl16233103881623310388043\&quot;]&quot;,&quot;tblName&quot;:&quot;stdTbl16233103881623310388043&quot;},&quot;payload&quot;:&quot;&quot;,&quot;methodName&quot;:&quot;getTableColumnStatistics&quot;,&quot;metastoreVersion&quot;:&quot;3.1.2&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">20190325/metastores/${instanceid}/actions/execute</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${keyid7}</stringProp>
              </elementProp>
              <elementProp name="date" elementType="Header">
                <stringProp name="Header.name">date</stringProp>
                <stringProp name="Header.value">${date7}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">host</stringProp>
                <stringProp name="Header.value">${hostname}</stringProp>
              </elementProp>
              <elementProp name="x-content-sha256" elementType="Header">
                <stringProp name="Header.name">x-content-sha256</stringProp>
                <stringProp name="Header.value">${SHAPA}</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="glossaryKey" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">glossaryKey</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..key</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">null</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET listPartitionNames Signature" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;tenancyId&quot;: &quot;${TENANCYID}&quot;, &quot;authUserId&quot;: &quot;${AUTHUSERID}&quot;,&quot;keyFingerprint&quot;: &quot;${FINGERPRINT}&quot;,&quot;privateKeyFilename&quot;: &quot;${PRIVATEKEY}&quot;, &quot;geturl&quot;: &quot;https://${hostname}/20190325/metastores/${instanceid}/actions/execute&quot;, &quot;messageBody&quot;:&quot;{\&quot;params\&quot;:{\&quot;catName\&quot;:\&quot;hive\&quot;,\&quot;dbName\&quot;:\&quot;default\&quot;,\&quot;maxParts\&quot;:\&quot;-1\&quot;,\&quot;tblName\&quot;:\&quot;${table}\&quot;},\&quot;payload\&quot;:\&quot;\&quot;,\&quot;methodName\&quot;:\&quot;listPartitionNames\&quot;,\&quot;metastoreVersion\&quot;:\&quot;3.1.2\&quot;}&quot;, &quot;restType&quot; : &quot;POST&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${OCIMicroservice}</stringProp>
          <stringProp name="HTTPSampler.port">9080</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/sign/getsignature</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">date7</stringProp>
            <stringProp name="RegexExtractor.regex">date:(.*?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">keyid7</stringProp>
            <stringProp name="RegexExtractor.regex">Authorization:(.+);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SHAPA</stringProp>
            <stringProp name="RegexExtractor.regex">x-content-sha256:(.+?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">100</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="false">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DCAT MS GET listPartitionNames" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;params&quot;:{&quot;catName&quot;:&quot;hive&quot;,&quot;dbName&quot;:&quot;default&quot;,&quot;maxParts&quot;:&quot;-1&quot;,&quot;tblName&quot;:&quot;${table}&quot;},&quot;payload&quot;:&quot;&quot;,&quot;methodName&quot;:&quot;listPartitionNames&quot;,&quot;metastoreVersion&quot;:&quot;3.1.2&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">20190325/metastores/${instanceid}/actions/execute</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${keyid7}</stringProp>
              </elementProp>
              <elementProp name="date" elementType="Header">
                <stringProp name="Header.name">date</stringProp>
                <stringProp name="Header.value">${date7}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">host</stringProp>
                <stringProp name="Header.value">${hostname}</stringProp>
              </elementProp>
              <elementProp name="x-content-sha256" elementType="Header">
                <stringProp name="Header.name">x-content-sha256</stringProp>
                <stringProp name="Header.value">${SHAPA}</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="listPartitionNames" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">listPartitionNames</stringProp>
            <stringProp name="RegexExtractor.regex">\\&quot;(.*?)\\&quot;,</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="jp@gc - JSON/YAML Path Assertion" enabled="true">
            <stringProp name="JSON_PATH">$.*</stringProp>
            <stringProp name="EXPECTED_VALUE">[]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">true</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
            <stringProp name="INPUT_FORMAT">JSON</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">100</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="false">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET getPartitions Signature" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;tenancyId&quot;: &quot;${TENANCYID}&quot;, &quot;authUserId&quot;: &quot;${AUTHUSERID}&quot;,&quot;keyFingerprint&quot;: &quot;${FINGERPRINT}&quot;,&quot;privateKeyFilename&quot;: &quot;${PRIVATEKEY}&quot;, &quot;geturl&quot;: &quot;https://${hostname}/20190325/metastores/${instanceid}/actions/execute&quot;, &quot;messageBody&quot;:&quot;{\&quot;params\&quot;:{\&quot;catName\&quot;:\&quot;hive\&quot;,\&quot;dbName\&quot;:\&quot;default\&quot;,\&quot;maxParts\&quot;:\&quot;-1\&quot;,\&quot;tblName\&quot;:\&quot;${table}\&quot;},\&quot;payload\&quot;:\&quot;\&quot;,\&quot;methodName\&quot;:\&quot;getPartitions\&quot;,\&quot;metastoreVersion\&quot;:\&quot;3.1.2\&quot;}&quot;, &quot;restType&quot; : &quot;POST&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${OCIMicroservice}</stringProp>
          <stringProp name="HTTPSampler.port">9080</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/sign/getsignature</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">date7</stringProp>
            <stringProp name="RegexExtractor.regex">date:(.*?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">keyid7</stringProp>
            <stringProp name="RegexExtractor.regex">Authorization:(.+);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SHAPA</stringProp>
            <stringProp name="RegexExtractor.regex">x-content-sha256:(.+?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">100</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="false">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DCAT MS GET getPartitions" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;params&quot;:{&quot;catName&quot;:&quot;hive&quot;,&quot;dbName&quot;:&quot;default&quot;,&quot;maxParts&quot;:&quot;-1&quot;,&quot;tblName&quot;:&quot;${table}&quot;},&quot;payload&quot;:&quot;&quot;,&quot;methodName&quot;:&quot;getPartitions&quot;,&quot;metastoreVersion&quot;:&quot;3.1.2&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">20190325/metastores/${instanceid}/actions/execute</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${keyid7}</stringProp>
              </elementProp>
              <elementProp name="date" elementType="Header">
                <stringProp name="Header.name">date</stringProp>
                <stringProp name="Header.value">${date7}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">host</stringProp>
                <stringProp name="Header.value">${hostname}</stringProp>
              </elementProp>
              <elementProp name="x-content-sha256" elementType="Header">
                <stringProp name="Header.name">x-content-sha256</stringProp>
                <stringProp name="Header.value">${SHAPA}</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getPartitions" enabled="false">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">getPartitions</stringProp>
            <stringProp name="RegexExtractor.regex">\\&quot;(.*?)\\&quot;,</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="jp@gc - JSON/YAML Path Assertion" enabled="true">
            <stringProp name="JSON_PATH">$.*</stringProp>
            <stringProp name="EXPECTED_VALUE">[]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">true</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
            <stringProp name="INPUT_FORMAT">JSON</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="getPartitions match writer to file" enabled="false">
            <stringProp name="TestPlan.comments">This is filter out all the sourcekey that aren&apos;t null and write it out to a file</stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import org.apache.commons.io.FileUtils
import java.text.SimpleDateFormat;
// Get total number of matches. (Returns string)
def resultCount = vars.get(&quot;table&quot;)
log.warn &apos;Output to jmeter console&apos; +  resultCount
// Generate timestamp to create uniue file name.
String fileSuffix = new SimpleDateFormat(&quot;ddMMyyyy&quot;).format(new Date())
// Create file Object
f = new File(&quot;/Users/zameermalim/Documents/Oracle/Vms/HIveMetaStore/jMeterResults/23Jun/getPartitions_&quot;+fileSuffix+&quot;.csv&quot;)
records = vars.get(&quot;table&quot;)
FileUtils.writeStringToFile(f,records + System.getProperty(&quot;line.separator&quot;),true)
//for (int i=1; i&lt;=resultCount.toInteger(); i++)
//{
  // Get each matching result one by one.
  //records = vars.get(&quot;ExtractedName_&quot;+i)
// Write result to csv file.
  //FileUtils.writeStringToFile(f,records + System.getProperty(&quot;line.separator&quot;),true)
//}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">100</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="false">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="MetastoreThroughOCIAP" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">1600</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="paasdevdcatqa_metastore_100.100.3.43:23000" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="OCIMicroservice" elementType="Argument">
              <stringProp name="Argument.name">OCIMicroservice</stringProp>
              <stringProp name="Argument.value">localhost</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="keyd" elementType="Argument">
              <stringProp name="Argument.name">keyd</stringProp>
              <stringProp name="Argument.value">/Users/zameermalim/Documents/Oracle/console-staging.us-ashburn-1.oraclecloud.com/zameer.rashid.malim-01-29-12-08.pem</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TENANCYID" elementType="Argument">
              <stringProp name="Argument.name">TENANCYID</stringProp>
              <stringProp name="Argument.value">ocid1.tenancy.oc1..aaaaaaaahk25msb4bift5w2tlqo6tcepprf54thivzjr2k4vohezlmiooywa</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="AUTHUSERID" elementType="Argument">
              <stringProp name="Argument.name">AUTHUSERID</stringProp>
              <stringProp name="Argument.value">ocid1.user.oc1..aaaaaaaa7mn3ws2ubofutwhfxu5db76tukft2ppsjpx6xqf77ohsvejbtvba</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="FINGERPRINT" elementType="Argument">
              <stringProp name="Argument.name">FINGERPRINT</stringProp>
              <stringProp name="Argument.value">1a:ab:f6:bd:35:dc:60:48:25:00:f9:10:93:1e:0e:a9</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="hostname" elementType="Argument">
              <stringProp name="Argument.name">hostname</stringProp>
              <stringProp name="Argument.value">100.100.3.43</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="PRIVATEKEY" elementType="Argument">
              <stringProp name="Argument.name">PRIVATEKEY</stringProp>
              <stringProp name="Argument.value">-----BEGIN PRIVATE KEY-----\n MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCp836eRiGV7Lqn 8VOKaR9hO7yKMHEnAFNaFBzPcFu/TcfUoEMfZEMsgVfoPZAo+ZgXKPpzZ6gPZtRt flJif8d4NQ3KnoxEZ1O7tDES6jRdPtc1TPAoOmga3ns9vcr69DCtiTMmZI7vglL+ nquNI94zoHeIkAwGXeC+WsEwSr2hBf4VMqHoia4RrrdPwNkXFtPvihJ9rShkDVnn z1xqZY82PFDn3zJuNyJOA+3zof0e6HXJ0Y8BSis9rxq50xL9Qdkr2PjCZ2nHq6Pa hZeUej0eDBA3vDkM+P1RpZvwLel6W3koWQwYTMFT1/JJAgpDa3MufwU2ppLTCDxk 7IhXH+xXAgMBAAECggEAQI0seDiCFDyM7zIx/X4NPbTfWYupxtsQTcQa502xg3mr H59Zr2g5PYPJXHxZr76R3qYhbskd4++2Wvpil2gaXxWjreTHuUmX29FG3HzZs9sl Cek1xMnedeowXFSk7unmPVvB8mC6i81v8adZ2KuZf/mAvX2dG6P3s8Wr4EhbO3f5 LJEV9di7N9C/qQuEOfR5Iv7b2KbQSyQwC5+NaI6gXsvOxEQw/hdAPzMfcX9DKkz9 ZSDriSRdm+uSDVdhje4b4X4umKvDbNiURK/Z4TyrM8YZnQ5WrkGfWhrgESAL+30L 8Yaau7Ifteo/onIHQJHgK+des1Mn6njDX/CUwXM0KQKBgQDX5JTYXtY74H9Ck7nd qb2zhtRHm0sVJjd5J8ypkNWfdqcK94ipqr1LV9PawyrmIkM6vFlMU9qveOFod031 6hOVTr+fyS5BRMYLT0PwpAVMKHwqaK3l3pQHQbZ5LB/pAbIPw7DvaVdGiYXt5Ctk RXXm/+4qyuetBwkIX3P1N+x22QKBgQDJhgTdoPoyGbJRXTCDHhH2x2BeRcSntx9k jKe/8hhLt0BEsEM6Y8db0vSUSoNU3Hwt30Ziq8qAW5QhdCmgTwXe4G+DU1HUQGYn Ef0jT4S9CjhRg4y4gWvCCDKzjWChGvozObbkmGg2HfUNa+RLJTUkii6xwpzj8HKN eLDTzy9erwKBgH71gUKsorebkbsJPKhKBbDpfTSO8lyBmOW6rfSZo8ae9CTS5J9C NQd1orRnSXcEdxy3XpwwQ84k/Al+/226NcH8CVxh5r2jQAOunXmKO0NKG5qk7H7d oZeS4Ufo1usjgB8dKZPhEt38SbJYF9xjrK4nm1u27v8lv/4YhAyU0o4hAoGBAI4U 3U1c98lm8KAI8fEfvE6fV0RgMDyHEa0UthjQmWyYsMk89MkwHBiTbTk4J8wm/65f 4wIiWM2Sw6eqfMa3sE3pMvYGQoVBOkSFnFHO+KlHkVl3RDm5lb3hhc2t+djcala/ dEFLav3stR9XWEfa3dL7Udymd3MFzd4Mn69WPfGlAoGAE3R73QJcCiaGF38Xmivg OS+QCroZoQxiTIT3Wr9k1y5ARiJLpo0SGxB1NjafMucOsvTfW2YhuxSYxATTqZLE nHNLvtiTguKYEp68FRLgVEm7gcoMaFmgy+VvjOEGPJ46QrKMwnzIUT2oOXTtnQPq dS6yauJBm8thM4juwTbtr7Q=\n -----END PRIVATE KEY-----</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="instanceid" elementType="Argument">
              <stringProp name="Argument.name">instanceid</stringProp>
              <stringProp name="Argument.value">ocid1.datacatalogmetastore.oc1.iad.amaaaaaaw5lrnkiazunhhlltoxgzi3xyueeroklbiofwv6hbqc4kpgrhuisq</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="database" elementType="Argument">
              <stringProp name="Argument.name">database</stringProp>
              <stringProp name="Argument.value">default</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="table" elementType="Argument">
              <stringProp name="Argument.name">table</stringProp>
              <stringProp name="Argument.value">stdtbl16259347111625934711151</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">1000 parts</stringProp>
            </elementProp>
            <elementProp name="catalog" elementType="Argument">
              <stringProp name="Argument.name">catalog</stringProp>
              <stringProp name="Argument.value">hive</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CPAPINODE" elementType="Argument">
              <stringProp name="Argument.name">CPAPINODE</stringProp>
              <stringProp name="Argument.value">23000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">paasdevdcatqa</stringProp>
        </Arguments>
        <hashTree/>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="false">
          <intProp name="calcMode">1</intProp>
          <doubleProp>
            <name>throughput</name>
            <value>18000.0</value>
            <savedValue>0.0</savedValue>
          </doubleProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Catalogs Signature" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;tenancyId&quot;: &quot;${TENANCYID}&quot;, &quot;authUserId&quot;: &quot;${AUTHUSERID}&quot;,&quot;keyFingerprint&quot;: &quot;${FINGERPRINT}&quot;,&quot;privateKeyFilename&quot;: &quot;${PRIVATEKEY}&quot;, &quot;geturl&quot;: &quot;http://${hostname}:${CPAPINODE}/20190325/metastores/${instanceid}/actions/execute&quot;, &quot;messageBody&quot;:&quot;{\&quot;methodName\&quot;:\&quot;getCatalogs\&quot;,\&quot;metastoreVersion\&quot;:\&quot;3.1.2\&quot;}&quot;, &quot;restType&quot; : &quot;POST&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${OCIMicroservice}</stringProp>
          <stringProp name="HTTPSampler.port">9080</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/sign/getsignature</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">date7</stringProp>
            <stringProp name="RegexExtractor.regex">date:(.*?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">keyid7</stringProp>
            <stringProp name="RegexExtractor.regex">Authorization:(.+);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SHAPA</stringProp>
            <stringProp name="RegexExtractor.regex">x-content-sha256:(.+?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">100</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="false">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DCAT MS GET Catalogs" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;methodName&quot;:&quot;getCatalogs&quot;,&quot;metastoreVersion&quot;:&quot;3.1.2&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
          <stringProp name="HTTPSampler.port">${CPAPINODE}</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">20190325/metastores/${instanceid}/actions/execute</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${keyid7}</stringProp>
              </elementProp>
              <elementProp name="date" elementType="Header">
                <stringProp name="Header.name">date</stringProp>
                <stringProp name="Header.value">${date7}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">host</stringProp>
                <stringProp name="Header.value">${hostname}</stringProp>
              </elementProp>
              <elementProp name="x-content-sha256" elementType="Header">
                <stringProp name="Header.name">x-content-sha256</stringProp>
                <stringProp name="Header.value">${SHAPA}</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="catalog" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">catalog</stringProp>
            <stringProp name="RegexExtractor.regex">\\&quot;(.*?)\\&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">100</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="false">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Databases Signature" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;tenancyId&quot;: &quot;${TENANCYID}&quot;, &quot;authUserId&quot;: &quot;${AUTHUSERID}&quot;,&quot;keyFingerprint&quot;: &quot;${FINGERPRINT}&quot;,&quot;privateKeyFilename&quot;: &quot;${PRIVATEKEY}&quot;, &quot;geturl&quot;: &quot;http://${hostname}:${CPAPINODE}/20190325/metastores/${instanceid}/actions/execute&quot;, &quot;messageBody&quot;:&quot;{\&quot;methodName\&quot;:\&quot;getDatabases\&quot;,\&quot;metastoreVersion\&quot;:\&quot;3.1.2\&quot;}&quot;, &quot;restType&quot; : &quot;POST&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${OCIMicroservice}</stringProp>
          <stringProp name="HTTPSampler.port">9080</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/sign/getsignature</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">date7</stringProp>
            <stringProp name="RegexExtractor.regex">date:(.*?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">keyid7</stringProp>
            <stringProp name="RegexExtractor.regex">Authorization:(.+);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SHAPA</stringProp>
            <stringProp name="RegexExtractor.regex">x-content-sha256:(.+?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">100</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="false">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DCAT MS GET Database" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;methodName&quot;:&quot;getDatabases&quot;,&quot;metastoreVersion&quot;:&quot;3.1.2&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
          <stringProp name="HTTPSampler.port">${CPAPINODE}</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">20190325/metastores/${instanceid}/actions/execute</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${keyid7}</stringProp>
              </elementProp>
              <elementProp name="date" elementType="Header">
                <stringProp name="Header.name">date</stringProp>
                <stringProp name="Header.value">${date7}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">host</stringProp>
                <stringProp name="Header.value">${hostname}</stringProp>
              </elementProp>
              <elementProp name="x-content-sha256" elementType="Header">
                <stringProp name="Header.name">x-content-sha256</stringProp>
                <stringProp name="Header.value">${SHAPA}</stringProp>
              </elementProp>
              <elementProp name="{&quot;methodName&quot;" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="database" enabled="false">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">database</stringProp>
            <stringProp name="RegexExtractor.regex">\\&quot;(.*?)\\&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">100</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="false">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Tables Signature" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;tenancyId&quot;: &quot;${TENANCYID}&quot;, &quot;authUserId&quot;: &quot;${AUTHUSERID}&quot;,&quot;keyFingerprint&quot;: &quot;${FINGERPRINT}&quot;,&quot;privateKeyFilename&quot;: &quot;${PRIVATEKEY}&quot;, &quot;geturl&quot;: &quot;http://${hostname}:${CPAPINODE}/20190325/metastores/${instanceid}/actions/execute&quot;, &quot;messageBody&quot;:&quot;{\&quot;params\&quot;:{\&quot;catName\&quot;:\&quot;${catalog}\&quot;,\&quot;dbName\&quot;:\&quot;${database}\&quot;},\&quot;payload\&quot;:\&quot;\&quot;,\&quot;methodName\&quot;:\&quot;getTables\&quot;,\&quot;metastoreVersion\&quot;:\&quot;3.1.2\&quot;}&quot;, &quot;restType&quot; : &quot;POST&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${OCIMicroservice}</stringProp>
          <stringProp name="HTTPSampler.port">9080</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/sign/getsignature</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">date7</stringProp>
            <stringProp name="RegexExtractor.regex">date:(.*?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">keyid7</stringProp>
            <stringProp name="RegexExtractor.regex">Authorization:(.+);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SHAPA</stringProp>
            <stringProp name="RegexExtractor.regex">x-content-sha256:(.+?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">100</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="false">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DCAT MS GET Tables" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;params&quot;:{&quot;catName&quot;:&quot;${catalog}&quot;,&quot;dbName&quot;:&quot;${database}&quot;},&quot;payload&quot;:&quot;&quot;,&quot;methodName&quot;:&quot;getTables&quot;,&quot;metastoreVersion&quot;:&quot;3.1.2&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
          <stringProp name="HTTPSampler.port">${CPAPINODE}</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">20190325/metastores/${instanceid}/actions/execute</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${keyid7}</stringProp>
              </elementProp>
              <elementProp name="date" elementType="Header">
                <stringProp name="Header.name">date</stringProp>
                <stringProp name="Header.value">${date7}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">host</stringProp>
                <stringProp name="Header.value">${hostname}</stringProp>
              </elementProp>
              <elementProp name="x-content-sha256" elementType="Header">
                <stringProp name="Header.name">x-content-sha256</stringProp>
                <stringProp name="Header.value">${SHAPA}</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="table" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">table</stringProp>
            <stringProp name="RegexExtractor.regex">\\&quot;(.*?)\\&quot;,</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">100</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="false">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Catalog Signature" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;tenancyId&quot;: &quot;${TENANCYID}&quot;, &quot;authUserId&quot;: &quot;${AUTHUSERID}&quot;,&quot;keyFingerprint&quot;: &quot;${FINGERPRINT}&quot;,&quot;privateKeyFilename&quot;: &quot;${PRIVATEKEY}&quot;, &quot;geturl&quot;: &quot;http://${hostname}:${CPAPINODE}/20190325/metastores/${instanceid}/actions/execute&quot;, &quot;messageBody&quot;:&quot;{\&quot;params\&quot;:{\&quot;catName\&quot;:\&quot;${catalog}\&quot;},\&quot;payload\&quot;:\&quot;\&quot;,\&quot;methodName\&quot;:\&quot;getCatalog\&quot;,\&quot;metastoreVersion\&quot;:\&quot;3.1.2\&quot;}&quot;, &quot;restType&quot; : &quot;POST&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${OCIMicroservice}</stringProp>
          <stringProp name="HTTPSampler.port">9080</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/sign/getsignature</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">date7</stringProp>
            <stringProp name="RegexExtractor.regex">date:(.*?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">keyid7</stringProp>
            <stringProp name="RegexExtractor.regex">Authorization:(.+);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SHAPA</stringProp>
            <stringProp name="RegexExtractor.regex">x-content-sha256:(.+?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">100</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="false">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DCAT MS GET Catalog" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;params&quot;:{&quot;catName&quot;:&quot;${catalog}&quot;},&quot;payload&quot;:&quot;&quot;,&quot;methodName&quot;:&quot;getCatalog&quot;,&quot;metastoreVersion&quot;:&quot;3.1.2&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
          <stringProp name="HTTPSampler.port">${CPAPINODE}</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">20190325/metastores/${instanceid}/actions/execute</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${keyid7}</stringProp>
              </elementProp>
              <elementProp name="date" elementType="Header">
                <stringProp name="Header.name">date</stringProp>
                <stringProp name="Header.value">${date7}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">host</stringProp>
                <stringProp name="Header.value">${hostname}</stringProp>
              </elementProp>
              <elementProp name="x-content-sha256" elementType="Header">
                <stringProp name="Header.name">x-content-sha256</stringProp>
                <stringProp name="Header.value">${SHAPA}</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">100</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="false">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Table Signature" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;tenancyId&quot;: &quot;${TENANCYID}&quot;, &quot;authUserId&quot;: &quot;${AUTHUSERID}&quot;,&quot;keyFingerprint&quot;: &quot;${FINGERPRINT}&quot;,&quot;privateKeyFilename&quot;: &quot;${PRIVATEKEY}&quot;, &quot;geturl&quot;: &quot;http://${hostname}:${CPAPINODE}/20190325/metastores/${instanceid}/actions/execute&quot;, &quot;messageBody&quot;:&quot;{\&quot;params\&quot;:{\&quot;catName\&quot;:\&quot;${catalog}\&quot;,\&quot;dbName\&quot;:\&quot;${database}\&quot;,\&quot;tblName\&quot;:\&quot;${table}\&quot;},\&quot;payload\&quot;:\&quot;\&quot;,\&quot;methodName\&quot;:\&quot;getTable\&quot;,\&quot;metastoreVersion\&quot;:\&quot;3.1.2\&quot;}&quot;, &quot;restType&quot; : &quot;POST&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${OCIMicroservice}</stringProp>
          <stringProp name="HTTPSampler.port">9080</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/sign/getsignature</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">date7</stringProp>
            <stringProp name="RegexExtractor.regex">date:(.*?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">keyid7</stringProp>
            <stringProp name="RegexExtractor.regex">Authorization:(.+);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SHAPA</stringProp>
            <stringProp name="RegexExtractor.regex">x-content-sha256:(.+?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">100</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="false">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DCAT MS GET Table" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;params&quot;:{&quot;catName&quot;:&quot;${catalog}&quot;,&quot;dbName&quot;:&quot;${database}&quot;,&quot;tblName&quot;:&quot;${table}&quot;},&quot;payload&quot;:&quot;&quot;,&quot;methodName&quot;:&quot;getTable&quot;,&quot;metastoreVersion&quot;:&quot;3.1.2&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
          <stringProp name="HTTPSampler.port">${CPAPINODE}</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">20190325/metastores/${instanceid}/actions/execute</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${keyid7}</stringProp>
              </elementProp>
              <elementProp name="date" elementType="Header">
                <stringProp name="Header.name">date</stringProp>
                <stringProp name="Header.value">${date7}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">host</stringProp>
                <stringProp name="Header.value">${hostname}</stringProp>
              </elementProp>
              <elementProp name="x-content-sha256" elementType="Header">
                <stringProp name="Header.name">x-content-sha256</stringProp>
                <stringProp name="Header.value">${SHAPA}</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="false">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">30</stringProp>
        </LoopController>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET TableMeta Signature" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;tenancyId&quot;: &quot;${TENANCYID}&quot;, &quot;authUserId&quot;: &quot;${AUTHUSERID}&quot;,&quot;keyFingerprint&quot;: &quot;${FINGERPRINT}&quot;,&quot;privateKeyFilename&quot;: &quot;${PRIVATEKEY}&quot;, &quot;geturl&quot;: &quot;https://${hostname}/20190325/metastores/${instanceid}/actions/execute&quot;, &quot;messageBody&quot;:&quot;{\&quot;params\&quot;:{\&quot;catName\&quot;:\&quot;hive\&quot;,\&quot;databasePatterns\&quot;:\&quot;default\&quot;,\&quot;tablePatterns\&quot;:\&quot;stdtbl16245899121624589912157\&quot;,\&quot;tableTypes\&quot;:\&quot;[\\\&quot;MANAGED_TABLE\\\&quot;]\&quot;},\&quot;payload\&quot;:\&quot;\&quot;,\&quot;methodName\&quot;:\&quot;getTableMeta\&quot;,\&quot;metastoreVersion\&quot;:\&quot;3.1.2\&quot;}&quot;, &quot;restType&quot; : &quot;POST&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${OCIMicroservice}</stringProp>
          <stringProp name="HTTPSampler.port">9080</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/sign/getsignature</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">date7</stringProp>
            <stringProp name="RegexExtractor.regex">date:(.*?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">keyid7</stringProp>
            <stringProp name="RegexExtractor.regex">Authorization:(.+);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SHAPA</stringProp>
            <stringProp name="RegexExtractor.regex">x-content-sha256:(.+?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DCAT MS GET TableMeta" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;params&quot;:{&quot;catName&quot;:&quot;hive&quot;,&quot;databasePatterns&quot;:&quot;default&quot;,&quot;tablePatterns&quot;:&quot;stdtbl16266942681626694268831&quot;,&quot;tableTypes&quot;:&quot;[\&quot;MANAGED_TABLE\&quot;]&quot;},&quot;payload&quot;:&quot;&quot;,&quot;methodName&quot;:&quot;getTableMeta&quot;,&quot;metastoreVersion&quot;:&quot;3.1.2&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
          <stringProp name="HTTPSampler.port">${CPAPINODE}</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">20190325/metastores/${instanceid}/actions/execute</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${keyid7}</stringProp>
              </elementProp>
              <elementProp name="date" elementType="Header">
                <stringProp name="Header.name">date</stringProp>
                <stringProp name="Header.value">${date7}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">host</stringProp>
                <stringProp name="Header.value">${hostname}</stringProp>
              </elementProp>
              <elementProp name="x-content-sha256" elementType="Header">
                <stringProp name="Header.name">x-content-sha256</stringProp>
                <stringProp name="Header.value">${SHAPA}</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET TableMeta Signature" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;tenancyId&quot;: &quot;${TENANCYID}&quot;, &quot;authUserId&quot;: &quot;${AUTHUSERID}&quot;,&quot;keyFingerprint&quot;: &quot;${FINGERPRINT}&quot;,&quot;privateKeyFilename&quot;: &quot;${PRIVATEKEY}&quot;, &quot;geturl&quot;: &quot;https://${hostname}/20190325/metastores/${instanceid}/actions/execute&quot;, &quot;messageBody&quot;:&quot;{\&quot;params\&quot;:{\&quot;catName\&quot;:\&quot;hive\&quot;,\&quot;databasePatterns\&quot;:\&quot;default\&quot;,\&quot;tablePatterns\&quot;:\&quot;stdtbl16245899121624589912157\&quot;,\&quot;tableTypes\&quot;:\&quot;[\\\&quot;MANAGED_TABLE\\\&quot;]\&quot;},\&quot;payload\&quot;:\&quot;\&quot;,\&quot;methodName\&quot;:\&quot;getTableMeta\&quot;,\&quot;metastoreVersion\&quot;:\&quot;3.1.2\&quot;}&quot;, &quot;restType&quot; : &quot;POST&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${OCIMicroservice}</stringProp>
          <stringProp name="HTTPSampler.port">9080</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/sign/getsignature</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">date7</stringProp>
            <stringProp name="RegexExtractor.regex">date:(.*?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">keyid7</stringProp>
            <stringProp name="RegexExtractor.regex">Authorization:(.+);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SHAPA</stringProp>
            <stringProp name="RegexExtractor.regex">x-content-sha256:(.+?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DCAT MS GET TableMeta" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;params&quot;:{&quot;catName&quot;:&quot;hive&quot;,&quot;databasePatterns&quot;:&quot;default&quot;,&quot;tablePatterns&quot;:&quot;stdtbl16245899121624589912157&quot;,&quot;tableTypes&quot;:&quot;[\&quot;MANAGED_TABLE\&quot;]&quot;},&quot;payload&quot;:&quot;&quot;,&quot;methodName&quot;:&quot;getTableMeta&quot;,&quot;metastoreVersion&quot;:&quot;3.1.2&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">20190325/metastores/${instanceid}/actions/execute</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="glossaryKey" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">glossaryKey</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..key</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">null</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET getTableColumnStatistics Signature" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;tenancyId&quot;: &quot;${TENANCYID}&quot;, &quot;authUserId&quot;: &quot;${AUTHUSERID}&quot;,&quot;keyFingerprint&quot;: &quot;${FINGERPRINT}&quot;,&quot;privateKeyFilename&quot;: &quot;${PRIVATEKEY}&quot;, &quot;geturl&quot;: &quot;https://${hostname}/20190325/metastores/${instanceid}/actions/execute&quot;, &quot;messageBody&quot;:&quot;{\&quot;params\&quot;:{\&quot;catName\&quot;:\&quot;hive\&quot;,\&quot;dbName\&quot;:\&quot;default\&quot;,\&quot;columnNames\&quot;:\&quot;[\\\&quot;stdCol_0_stdTbl16233103881623310388043\\\&quot;,\\\&quot;stdCol_1_stdTbl16233103881623310388043\\\&quot;]\&quot;,\&quot;tblName\&quot;:\&quot;stdTbl16233103881623310388043\&quot;},\&quot;payload\&quot;:\&quot;\&quot;,\&quot;methodName\&quot;:\&quot;getTableColumnStatistics\&quot;,\&quot;metastoreVersion\&quot;:\&quot;3.1.2\&quot;}&quot;, &quot;restType&quot; : &quot;POST&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${OCIMicroservice}</stringProp>
          <stringProp name="HTTPSampler.port">9080</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/sign/getsignature</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">date7</stringProp>
            <stringProp name="RegexExtractor.regex">date:(.*?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">keyid7</stringProp>
            <stringProp name="RegexExtractor.regex">Authorization:(.+);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SHAPA</stringProp>
            <stringProp name="RegexExtractor.regex">x-content-sha256:(.+?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DCAT MS GET getTableColumnStatistics" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;params&quot;:{&quot;catName&quot;:&quot;hive&quot;,&quot;dbName&quot;:&quot;default&quot;,&quot;columnNames&quot;:&quot;[\&quot;stdCol_0_stdTbl16233103881623310388043\&quot;,\&quot;stdCol_1_stdTbl16233103881623310388043\&quot;]&quot;,&quot;tblName&quot;:&quot;stdTbl16233103881623310388043&quot;},&quot;payload&quot;:&quot;&quot;,&quot;methodName&quot;:&quot;getTableColumnStatistics&quot;,&quot;metastoreVersion&quot;:&quot;3.1.2&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">20190325/metastores/${instanceid}/actions/execute</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${keyid7}</stringProp>
              </elementProp>
              <elementProp name="date" elementType="Header">
                <stringProp name="Header.name">date</stringProp>
                <stringProp name="Header.value">${date7}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">host</stringProp>
                <stringProp name="Header.value">${hostname}</stringProp>
              </elementProp>
              <elementProp name="x-content-sha256" elementType="Header">
                <stringProp name="Header.name">x-content-sha256</stringProp>
                <stringProp name="Header.value">${SHAPA}</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="glossaryKey" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">glossaryKey</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..key</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">null</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET listPartitionNames Signature" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;tenancyId&quot;: &quot;${TENANCYID}&quot;, &quot;authUserId&quot;: &quot;${AUTHUSERID}&quot;,&quot;keyFingerprint&quot;: &quot;${FINGERPRINT}&quot;,&quot;privateKeyFilename&quot;: &quot;${PRIVATEKEY}&quot;, &quot;geturl&quot;: &quot;http://${hostname}:${CPAPINODE}/20190325/metastores/${instanceid}/actions/execute&quot;, &quot;messageBody&quot;:&quot;{\&quot;params\&quot;:{\&quot;catName\&quot;:\&quot;hive\&quot;,\&quot;dbName\&quot;:\&quot;default\&quot;,\&quot;maxParts\&quot;:\&quot;-1\&quot;,\&quot;tblName\&quot;:\&quot;${table}\&quot;},\&quot;payload\&quot;:\&quot;\&quot;,\&quot;methodName\&quot;:\&quot;listPartitionNames\&quot;,\&quot;metastoreVersion\&quot;:\&quot;3.1.2\&quot;}&quot;, &quot;restType&quot; : &quot;POST&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${OCIMicroservice}</stringProp>
          <stringProp name="HTTPSampler.port">9080</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/sign/getsignature</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">date7</stringProp>
            <stringProp name="RegexExtractor.regex">date:(.*?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">keyid7</stringProp>
            <stringProp name="RegexExtractor.regex">Authorization:(.+);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SHAPA</stringProp>
            <stringProp name="RegexExtractor.regex">x-content-sha256:(.+?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">100</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="false">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DCAT MS GET listPartitionNames" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;params&quot;:{&quot;catName&quot;:&quot;hive&quot;,&quot;dbName&quot;:&quot;default&quot;,&quot;maxParts&quot;:&quot;-1&quot;,&quot;tblName&quot;:&quot;${table}&quot;},&quot;payload&quot;:&quot;&quot;,&quot;methodName&quot;:&quot;listPartitionNames&quot;,&quot;metastoreVersion&quot;:&quot;3.1.2&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
          <stringProp name="HTTPSampler.port">${CPAPINODE}</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">20190325/metastores/${instanceid}/actions/execute</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${keyid7}</stringProp>
              </elementProp>
              <elementProp name="date" elementType="Header">
                <stringProp name="Header.name">date</stringProp>
                <stringProp name="Header.value">${date7}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">host</stringProp>
                <stringProp name="Header.value">${hostname}</stringProp>
              </elementProp>
              <elementProp name="x-content-sha256" elementType="Header">
                <stringProp name="Header.name">x-content-sha256</stringProp>
                <stringProp name="Header.value">${SHAPA}</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="listPartitionNames" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">listPartitionNames</stringProp>
            <stringProp name="RegexExtractor.regex">\\&quot;(.*?)\\&quot;,</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="jp@gc - JSON/YAML Path Assertion" enabled="true">
            <stringProp name="JSON_PATH">$.*</stringProp>
            <stringProp name="EXPECTED_VALUE">[]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">true</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
            <stringProp name="INPUT_FORMAT">JSON</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">100</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="false">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET getPartitions Signature" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;tenancyId&quot;: &quot;${TENANCYID}&quot;, &quot;authUserId&quot;: &quot;${AUTHUSERID}&quot;,&quot;keyFingerprint&quot;: &quot;${FINGERPRINT}&quot;,&quot;privateKeyFilename&quot;: &quot;${PRIVATEKEY}&quot;, &quot;geturl&quot;: &quot;http://${hostname}:${CPAPINODE}/20190325/metastores/${instanceid}/actions/execute&quot;, &quot;messageBody&quot;:&quot;{\&quot;params\&quot;:{\&quot;catName\&quot;:\&quot;hive\&quot;,\&quot;dbName\&quot;:\&quot;default\&quot;,\&quot;maxParts\&quot;:\&quot;-1\&quot;,\&quot;tblName\&quot;:\&quot;${table}\&quot;},\&quot;payload\&quot;:\&quot;\&quot;,\&quot;methodName\&quot;:\&quot;getPartitions\&quot;,\&quot;metastoreVersion\&quot;:\&quot;3.1.2\&quot;}&quot;, &quot;restType&quot; : &quot;POST&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${OCIMicroservice}</stringProp>
          <stringProp name="HTTPSampler.port">9080</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/sign/getsignature</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">date7</stringProp>
            <stringProp name="RegexExtractor.regex">date:(.*?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">keyid7</stringProp>
            <stringProp name="RegexExtractor.regex">Authorization:(.+);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SHAPA</stringProp>
            <stringProp name="RegexExtractor.regex">x-content-sha256:(.+?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">100</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="false">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DCAT MS GET getPartitions" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;params&quot;:{&quot;catName&quot;:&quot;hive&quot;,&quot;dbName&quot;:&quot;default&quot;,&quot;maxParts&quot;:&quot;-1&quot;,&quot;tblName&quot;:&quot;${table}&quot;},&quot;payload&quot;:&quot;&quot;,&quot;methodName&quot;:&quot;getPartitions&quot;,&quot;metastoreVersion&quot;:&quot;3.1.2&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
          <stringProp name="HTTPSampler.port">${CPAPINODE}</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">20190325/metastores/${instanceid}/actions/execute</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${keyid7}</stringProp>
              </elementProp>
              <elementProp name="date" elementType="Header">
                <stringProp name="Header.name">date</stringProp>
                <stringProp name="Header.value">${date7}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">host</stringProp>
                <stringProp name="Header.value">${hostname}</stringProp>
              </elementProp>
              <elementProp name="x-content-sha256" elementType="Header">
                <stringProp name="Header.name">x-content-sha256</stringProp>
                <stringProp name="Header.value">${SHAPA}</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getPartitions" enabled="false">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">getPartitions</stringProp>
            <stringProp name="RegexExtractor.regex">\\&quot;(.*?)\\&quot;,</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="jp@gc - JSON/YAML Path Assertion" enabled="true">
            <stringProp name="JSON_PATH">$.*</stringProp>
            <stringProp name="EXPECTED_VALUE">[]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">true</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
            <stringProp name="INPUT_FORMAT">JSON</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="getPartitions match writer to file" enabled="false">
            <stringProp name="TestPlan.comments">This is filter out all the sourcekey that aren&apos;t null and write it out to a file</stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import org.apache.commons.io.FileUtils
import java.text.SimpleDateFormat;
// Get total number of matches. (Returns string)
def resultCount = vars.get(&quot;table&quot;)
log.warn &apos;Output to jmeter console&apos; +  resultCount
// Generate timestamp to create uniue file name.
String fileSuffix = new SimpleDateFormat(&quot;ddMMyyyy&quot;).format(new Date())
// Create file Object
f = new File(&quot;/Users/zameermalim/Documents/Oracle/Vms/HIveMetaStore/jMeterResults/23Jun/getPartitions_&quot;+fileSuffix+&quot;.csv&quot;)
records = vars.get(&quot;table&quot;)
FileUtils.writeStringToFile(f,records + System.getProperty(&quot;line.separator&quot;),true)
//for (int i=1; i&lt;=resultCount.toInteger(); i++)
//{
  // Get each matching result one by one.
  //records = vars.get(&quot;ExtractedName_&quot;+i)
// Write result to csv file.
  //FileUtils.writeStringToFile(f,records + System.getProperty(&quot;line.separator&quot;),true)
//}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">100</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="false">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="test" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">1600</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="paasdevdcatqa_metastore_amaaaaaaw5lrnkiazunhhlltoxgzi3xyueeroklbiofwv6hbqc4kpgrhuisq" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="OCIMicroservice" elementType="Argument">
              <stringProp name="Argument.name">OCIMicroservice</stringProp>
              <stringProp name="Argument.value">100.92.47.4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="keyd" elementType="Argument">
              <stringProp name="Argument.name">keyd</stringProp>
              <stringProp name="Argument.value">/Users/zameermalim/Documents/Oracle/console-staging.us-ashburn-1.oraclecloud.com/zameer.rashid.malim-01-29-12-08.pem</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TENANCYID" elementType="Argument">
              <stringProp name="Argument.name">TENANCYID</stringProp>
              <stringProp name="Argument.value">ocid1.tenancy.oc1..aaaaaaaahk25msb4bift5w2tlqo6tcepprf54thivzjr2k4vohezlmiooywa</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="AUTHUSERID" elementType="Argument">
              <stringProp name="Argument.name">AUTHUSERID</stringProp>
              <stringProp name="Argument.value">ocid1.user.oc1..aaaaaaaa7mn3ws2ubofutwhfxu5db76tukft2ppsjpx6xqf77ohsvejbtvba</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="FINGERPRINT" elementType="Argument">
              <stringProp name="Argument.name">FINGERPRINT</stringProp>
              <stringProp name="Argument.value">1a:ab:f6:bd:35:dc:60:48:25:00:f9:10:93:1e:0e:a9</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="hostname" elementType="Argument">
              <stringProp name="Argument.name">hostname</stringProp>
              <stringProp name="Argument.value">datacatalog-qa.us-ashburn-1.oci.oraclecloud.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="PRIVATEKEY" elementType="Argument">
              <stringProp name="Argument.name">PRIVATEKEY</stringProp>
              <stringProp name="Argument.value">-----BEGIN PRIVATE KEY-----\n MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCp836eRiGV7Lqn 8VOKaR9hO7yKMHEnAFNaFBzPcFu/TcfUoEMfZEMsgVfoPZAo+ZgXKPpzZ6gPZtRt flJif8d4NQ3KnoxEZ1O7tDES6jRdPtc1TPAoOmga3ns9vcr69DCtiTMmZI7vglL+ nquNI94zoHeIkAwGXeC+WsEwSr2hBf4VMqHoia4RrrdPwNkXFtPvihJ9rShkDVnn z1xqZY82PFDn3zJuNyJOA+3zof0e6HXJ0Y8BSis9rxq50xL9Qdkr2PjCZ2nHq6Pa hZeUej0eDBA3vDkM+P1RpZvwLel6W3koWQwYTMFT1/JJAgpDa3MufwU2ppLTCDxk 7IhXH+xXAgMBAAECggEAQI0seDiCFDyM7zIx/X4NPbTfWYupxtsQTcQa502xg3mr H59Zr2g5PYPJXHxZr76R3qYhbskd4++2Wvpil2gaXxWjreTHuUmX29FG3HzZs9sl Cek1xMnedeowXFSk7unmPVvB8mC6i81v8adZ2KuZf/mAvX2dG6P3s8Wr4EhbO3f5 LJEV9di7N9C/qQuEOfR5Iv7b2KbQSyQwC5+NaI6gXsvOxEQw/hdAPzMfcX9DKkz9 ZSDriSRdm+uSDVdhje4b4X4umKvDbNiURK/Z4TyrM8YZnQ5WrkGfWhrgESAL+30L 8Yaau7Ifteo/onIHQJHgK+des1Mn6njDX/CUwXM0KQKBgQDX5JTYXtY74H9Ck7nd qb2zhtRHm0sVJjd5J8ypkNWfdqcK94ipqr1LV9PawyrmIkM6vFlMU9qveOFod031 6hOVTr+fyS5BRMYLT0PwpAVMKHwqaK3l3pQHQbZ5LB/pAbIPw7DvaVdGiYXt5Ctk RXXm/+4qyuetBwkIX3P1N+x22QKBgQDJhgTdoPoyGbJRXTCDHhH2x2BeRcSntx9k jKe/8hhLt0BEsEM6Y8db0vSUSoNU3Hwt30Ziq8qAW5QhdCmgTwXe4G+DU1HUQGYn Ef0jT4S9CjhRg4y4gWvCCDKzjWChGvozObbkmGg2HfUNa+RLJTUkii6xwpzj8HKN eLDTzy9erwKBgH71gUKsorebkbsJPKhKBbDpfTSO8lyBmOW6rfSZo8ae9CTS5J9C NQd1orRnSXcEdxy3XpwwQ84k/Al+/226NcH8CVxh5r2jQAOunXmKO0NKG5qk7H7d oZeS4Ufo1usjgB8dKZPhEt38SbJYF9xjrK4nm1u27v8lv/4YhAyU0o4hAoGBAI4U 3U1c98lm8KAI8fEfvE6fV0RgMDyHEa0UthjQmWyYsMk89MkwHBiTbTk4J8wm/65f 4wIiWM2Sw6eqfMa3sE3pMvYGQoVBOkSFnFHO+KlHkVl3RDm5lb3hhc2t+djcala/ dEFLav3stR9XWEfa3dL7Udymd3MFzd4Mn69WPfGlAoGAE3R73QJcCiaGF38Xmivg OS+QCroZoQxiTIT3Wr9k1y5ARiJLpo0SGxB1NjafMucOsvTfW2YhuxSYxATTqZLE nHNLvtiTguKYEp68FRLgVEm7gcoMaFmgy+VvjOEGPJ46QrKMwnzIUT2oOXTtnQPq dS6yauJBm8thM4juwTbtr7Q=\n -----END PRIVATE KEY-----</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="instanceid" elementType="Argument">
              <stringProp name="Argument.name">instanceid</stringProp>
              <stringProp name="Argument.value">ocid1.datacatalogmetastore.oc1.iad.amaaaaaaw5lrnkiazunhhlltoxgzi3xyueeroklbiofwv6hbqc4kpgrhuisq</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="database" elementType="Argument">
              <stringProp name="Argument.name">database</stringProp>
              <stringProp name="Argument.value">default</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="table" elementType="Argument">
              <stringProp name="Argument.name">table</stringProp>
              <stringProp name="Argument.value">stdtbl16259347111625934711151</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">1000 parts</stringProp>
            </elementProp>
            <elementProp name="catalog" elementType="Argument">
              <stringProp name="Argument.name">catalog</stringProp>
              <stringProp name="Argument.value">hive</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">paasdevdcatqa</stringProp>
        </Arguments>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="paasdevdcatinfra" enabled="false">
          <collectionProp name="Arguments.arguments">
            <elementProp name="OCIMicroservice" elementType="Argument">
              <stringProp name="Argument.name">OCIMicroservice</stringProp>
              <stringProp name="Argument.value">localhost</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="keyd" elementType="Argument">
              <stringProp name="Argument.name">keyd</stringProp>
              <stringProp name="Argument.value">/Users/zameermalim/Documents/Oracle/consoleStagingUsashburn1oraclecloud/zameer.rashid.malim-02-17-08-30paasdecdcatinfra.pem</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TENANCYID" elementType="Argument">
              <stringProp name="Argument.name">TENANCYID</stringProp>
              <stringProp name="Argument.value">ocid1.tenancy.oc1..aaaaaaaarmzlx7mdssig6ml73hvndduyimqicw6xi275xn2opyr4rioqjs2q</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="AUTHUSERID" elementType="Argument">
              <stringProp name="Argument.name">AUTHUSERID</stringProp>
              <stringProp name="Argument.value">ocid1.user.oc1..aaaaaaaasirrtdkxxp7votndbprqhru52mvgy5qihqtkgjlgpc2ubsdj2jkq</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="FINGERPRINT" elementType="Argument">
              <stringProp name="Argument.name">FINGERPRINT</stringProp>
              <stringProp name="Argument.value">58:e5:b3:f2:1e:ae:ca:23:7c:75:8d:52:3b:e9:0b:08</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="hostname" elementType="Argument">
              <stringProp name="Argument.name">hostname</stringProp>
              <stringProp name="Argument.value">datacatalog-devn.us-phoenix-1.oci.oraclecloud.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="PRIVATEKEY" elementType="Argument">
              <stringProp name="Argument.name">PRIVATEKEY</stringProp>
              <stringProp name="Argument.value">-----BEGIN PRIVATE KEY-----\nMIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQC39SYdrHrTu+WJ nFoVHzqxfWR47vWSmUT8FFU28Vc3oCuZGWwZ+K77Sozm6n6Z4/LG4eOVEnqV2nYr Hr3+JIm/UzAhJfKsudrSOeKhLXWo9KzY7J5AXMLscoKs4Pt2uiPZWdODaAbp+Xqb wNR20VidT8oeCxH5PYEpuFNX70x7syaTJWRBItWNL+pj1mGnfQRRSoQVbdu+jt6z euLR9/Vgwv3CunOZqxuQWeUUUsSkNo4/3PYG+LvR3CPcCpRWqwcIC3uW0+PxEWkF a/vLXjE6dSE9DBaG7S/2y79MF7dW0Db38ztSpFWWEiMuB3VokMOehpV9z1t+bW1j 7szd9a87AgMBAAECggEAWT8LDexm7qBC/R8oqQSsof12qCEubMAFMtLegLhXmvoP DMjDpFn88pc5grITV6+6Ufi3Q9RiOp9xIvxYKpspZPQD7qENefT1D3bb11xJr/18 egVZxVn7i2EGur6v4Orvh3xH3IG0kQDjFftYWIi6GB/kq+ys/KF1L3tom8nR7lSq B/z2iezJjYf/u5vDev9PyfxReKANYbeXYVStHrPpr4NL7tC2GRrHT/nFRfR4YBbw Iv56XUt70NM+2tDTRGi77x7ShNS/2nt8cP+Om85w7BMANGaEwVJaGjIqOTtmdlT7 kFjYxW81s8qXesosZGGdJSTKmvCTJtSIeNMU1QNv4QKBgQDnntV4ocblf9ynPtPe B2CAXk3X9QNexT6v5zjzjIyhjhsWBJgDReZkM588ArlwTDgR9amdCrR8mmUK3I0W YfR7OLI+xeffT3tQBTiZ2zlrHE3+4iHG2qUrnMJbOzRVzFp6QNBBMhJQ6UPJ0rCg qKls/okT10toQqGaPKlTWJpqiwKBgQDLUgIri35GGtLD1g1RlCgOGIXJf86Pq+fR Q2eGGz6rlOiQW6aEgYbL1uEGMg6S7JVezCXsN+wGXrlnrXSJubYJPyegary3tFwg fB9it1TP0udGXds4p6BrgQ9/p9FvvvoOxDFnj+I1/a6LCj8X8ZLlr/kg32PtomyW mkaUnR1UEQKBgDmN6WOxZ3gNvqm8Xe81DBC53kQEeRLqlnolTayPRz65zhc5iwB9 NRO/FBlYX/X8qo4j6kLArzqrLuJ1DYX7T0HzQ69/g++kk3K96WOp6umnveXRES2V lSdyK4V5/7Y2MmFgi583rv92B0c2WHeDkZ4o3a0VeYJt1DQ8UKMKSEyjAoGBALCo lcgeEN56yexsnO/n6hGtTvlwOhrtQ6O4jEeifoZ5AMUFTR7OqD+OecB3V+Bi/bn7 aWvgfwxd23xw4tQT704DeLvSYhy/8lgrYN3V6zQTzO1/+U01oJYn8j55oukUJ5MS 9tZD10oQHEsk4QM92+QETVM5pkrAmNcWPwM7rFLxAoGBAInNWXs54xAgkwOVsBOx x9YvEYPBoXPxVkfoGUeal3a0Cs2iggze9vvcUMkM0vB2MWfnORJzUjF9XoQMCMwz rbchcn+uW4WrdkpDvXuoN3G+/mQqlPUomz4ZlVUthclL3PlEvf2QBF8VTgpiua5K 1GrxXWEe8M/HEz8TPP8+SsTF\n -----END PRIVATE KEY-----</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="instanceid" elementType="Argument">
              <stringProp name="Argument.name">instanceid</stringProp>
              <stringProp name="Argument.value">ocid1.datacatalog.oc1.phx.aaaaaaaagqp6u4kkpvjlnn2mcg2xzswdcsnvi3drqdgqfpyjrrtnpm4wqm5a</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">paasdevdcatinfra</stringProp>
        </Arguments>
        <hashTree/>
        <com.blazemeter.jmeter.RandomCSVDataSetConfig guiclass="com.blazemeter.jmeter.RandomCSVDataSetConfigGui" testclass="com.blazemeter.jmeter.RandomCSVDataSetConfig" testname="tablesCSVServer" enabled="false">
          <stringProp name="filename">/home/opc/DataSet</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="variableNames">table</stringProp>
          <boolProp name="randomOrder">true</boolProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <boolProp name="rewindOnTheEndOfList">true</boolProp>
          <boolProp name="independentListPerThread">false</boolProp>
        </com.blazemeter.jmeter.RandomCSVDataSetConfig>
        <hashTree/>
        <com.blazemeter.jmeter.RandomCSVDataSetConfig guiclass="com.blazemeter.jmeter.RandomCSVDataSetConfigGui" testclass="com.blazemeter.jmeter.RandomCSVDataSetConfig" testname="tablesCSVLocal" enabled="false">
          <stringProp name="filename">/Users/zameermalim/Documents/Oracle/Vms/HIveMetaStore/jMeterResults/DataSet</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="variableNames">table</stringProp>
          <boolProp name="randomOrder">true</boolProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <boolProp name="rewindOnTheEndOfList">true</boolProp>
          <boolProp name="independentListPerThread">false</boolProp>
        </com.blazemeter.jmeter.RandomCSVDataSetConfig>
        <hashTree/>
        <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="OffsetValue" enabled="true">
          <stringProp name="maximumValue">9990</stringProp>
          <stringProp name="minimumValue">10</stringProp>
          <stringProp name="outputFormat"></stringProp>
          <boolProp name="perThread">true</boolProp>
          <stringProp name="randomSeed"></stringProp>
          <stringProp name="variableName">OffsetValue</stringProp>
        </RandomVariableConfig>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="dcatdemo" enabled="false">
          <collectionProp name="Arguments.arguments">
            <elementProp name="OCIMicroservice" elementType="Argument">
              <stringProp name="Argument.name">OCIMicroservice</stringProp>
              <stringProp name="Argument.value">localhost</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="keyd" elementType="Argument">
              <stringProp name="Argument.name">keyd</stringProp>
              <stringProp name="Argument.value">/Users/zameermalim/Documents/Oracle/console-staging.us-ashburn-1.oraclecloud.com/zameer.rashid.malim-01-29-12-08.pem</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TENANCYID" elementType="Argument">
              <stringProp name="Argument.name">TENANCYID</stringProp>
              <stringProp name="Argument.value">ocid1.tenancy.oc1..aaaaaaaakydcqlqxuodjzygfaec6s5yyeo7jkscv5sxtzigs3hthgav3cyka</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="AUTHUSERID" elementType="Argument">
              <stringProp name="Argument.name">AUTHUSERID</stringProp>
              <stringProp name="Argument.value">ocid1.user.oc1..aaaaaaaaxt3uu6ml4hscfhugt2rdylprpvmfzfejqdhpxoarmswhi2euumba</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="FINGERPRINT" elementType="Argument">
              <stringProp name="Argument.name">FINGERPRINT</stringProp>
              <stringProp name="Argument.value">ce:39:89:6f:cf:25:8f:a4:5e:ca:44:c5:34:19:3c:c2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="hostname" elementType="Argument">
              <stringProp name="Argument.name">hostname</stringProp>
              <stringProp name="Argument.value">datacatalog-stage.eu-amsterdam-1.oci.oraclecloud.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="PRIVATEKEY" elementType="Argument">
              <stringProp name="Argument.name">PRIVATEKEY</stringProp>
              <stringProp name="Argument.value">-----BEGIN PRIVATE KEY-----\n MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQDAlUOJMt51tTMn B9BgzaYpFLcn7WLoBSos98fYRZirnCCUCALcDbsPM7Z5AqTloDOxbrITA5e0o27m 7IpG5EgSS2x/y/myznagIwaBqMdpPStHOQgDXTKBjyGRy6d5fgfBEncxpfgX5udz b3Xhl2y7OpzYtF2vdQ1vVV+9WhY4X201HPiQ1r4YNG0gLYkittNavVir9+HTjsga HH2nI52MZ++k7Z9cdzJawilmB14NmK6bvz94t8vHNWKT665WJratLEVYGLCNfhRQ 1dcjH2i0veaqsSEnX+23Vr3P92hsbFvFAHbfuORf+ejww1mBlakP/2yo5VEHphlA Ix9xAw4vAgMBAAECggEAV+FFKkxuO2RubTchnar6UfDEC5JF+f6xWkfPiB9qJZVf QG3PcD9LxwogEGRmfup17FfJJugSyDl0GCiEiQkO4lpMrpyT20Zf139kLrKoHJvv LdcWkwJqU7jO5sr6J3SdcTtN7PgBmFaj84c/UaxZz65VeIYF4lUVxmI9CBkd3qbS ICa8C9/G0i+iGfEd1O4VTnJId3ntlZ951Nx+D4v+9hgeRytbXc6XAIa5/VYxTyf+ 5J3rvTEigmwAdxC3GTxyeyfLLwjsTUYo3wRNMrkxSxD8x/uCsckSRSF+DF/gf9ex GQlO3/8ZCHjpbZ8JvHWn6yYBZ2NyIxPnJ0Da+QRDYQKBgQDrTij4Yf28L4GixQOD S45+dAx1PfFb/xQPnNXgVz6+bjjaauL4CG3sI7NlfT5PrKNC3Z7cHaq/7QmOTFBp Fkgldn6LCOR/MOUtRkHOGt7NFrgmmWU2TaowjHDVm+HOKdp6ItBKmathtXRLQH5X s7dS+SbX0uxO41+lBrQJEVNtNwKBgQDRhTkYunK97K78vqyRLqkBgOoLmJmuDKi+ plg9kzGILiF8d+IgEV6/wnzg8d/sYiVbeR/sPXoJaGcBrHPBY6edDBBWfargYYYj LMZMddpvCKU1y67QzKHLFavBoe3OuBT/bwvcjOE2G5W+gO2LfXFG1AJMgfkh3HSF 1Mz5JociyQKBgCmibsVkMU026q0uRuzYVaIyTnIAP9CTVa1dhspnJYb0YcLj3r0c YLbDql5uxrO6TDjslctExI2pF2PCRQgTFTjruoBHVoba0/Iq2EHrpziKqJLL2Yi+ PTrR3rUtG8sqxKmPt2M7xYNIZAdcpf5Gok1gIGtXutBKkwXUJc7k7eoJAoGAFjc/ D50tb2/6OfhpydcdungV2PbsTKUw+04eCyFhXiQuDsmTY30UA9c2cI+VA7aAaYuV U/JMz1SPn4DOoVHUwvU1gkY+6R3OIEquGAtjBuTux556Qc+A1EzO8nAeDA4+w7rd khwqARe5sAJxrZm2eiEewUgCx5FdlZczyLNKHukCgYAG8QzanU+uEIuN7HH+k0Z5 VJDWVDCVKHfKJQB6Kd3MLWozMw8lOLlIVQhGnZp1D5l1qOyXQ0KNT5bu5uhtKetG 2a8uPnsUrPyhAIXko3X9j0fPXX/b+uUVv8zvWdZo+R6vB77iDkHEp/Ck+vUSH948 U3iS/bsJ2ZKuriiQOzlzRw==\n -----END PRIVATE KEY-----</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="instanceid" elementType="Argument">
              <stringProp name="Argument.name">instanceid</stringProp>
              <stringProp name="Argument.value">ocid1.datacatalog.oc1.eu-amsterdam-1.aaaaaaaaxypdz5xnrq5hs2i772zcnvd2hj7z7mqi6fok5yx4pjb6txvkmzoa</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">dcatdemo</stringProp>
        </Arguments>
        <hashTree/>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <intProp name="calcMode">1</intProp>
          <doubleProp>
            <name>throughput</name>
            <value>18000.0</value>
            <savedValue>0.0</savedValue>
          </doubleProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Databases Signature" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;tenancyId&quot;: &quot;${TENANCYID}&quot;, &quot;authUserId&quot;: &quot;${AUTHUSERID}&quot;,&quot;keyFingerprint&quot;: &quot;${FINGERPRINT}&quot;,&quot;privateKeyFilename&quot;: &quot;${PRIVATEKEY}&quot;, &quot;geturl&quot;: &quot;https://${hostname}/20190325/metastores/${instanceid}/actions/execute&quot;, &quot;messageBody&quot;:&quot;{\&quot;methodName\&quot;:\&quot;getDatabases\&quot;,\&quot;metastoreVersion\&quot;:\&quot;3.1.2\&quot;}&quot;, &quot;restType&quot; : &quot;POST&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${OCIMicroservice}</stringProp>
          <stringProp name="HTTPSampler.port">9080</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/sign/getsignature</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">date7</stringProp>
            <stringProp name="RegexExtractor.regex">date:(.*?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">keyid7</stringProp>
            <stringProp name="RegexExtractor.regex">Authorization:(.+);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SHAPA</stringProp>
            <stringProp name="RegexExtractor.regex">x-content-sha256:(.+?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">100</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="false">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DCAT MS GET Database" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;methodName&quot;:&quot;getDatabases&quot;,&quot;metastoreVersion&quot;:&quot;3.1.2&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">20190325/metastores/${instanceid}/actions/execute</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${keyid7}</stringProp>
              </elementProp>
              <elementProp name="date" elementType="Header">
                <stringProp name="Header.name">date</stringProp>
                <stringProp name="Header.value">${date7}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">host</stringProp>
                <stringProp name="Header.value">${hostname}</stringProp>
              </elementProp>
              <elementProp name="x-content-sha256" elementType="Header">
                <stringProp name="Header.name">x-content-sha256</stringProp>
                <stringProp name="Header.value">${SHAPA}</stringProp>
              </elementProp>
              <elementProp name="{&quot;methodName&quot;" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="database" enabled="false">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">database</stringProp>
            <stringProp name="RegexExtractor.regex">\\&quot;(.*?)\\&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">100</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="false">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Tables Signature" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;tenancyId&quot;: &quot;${TENANCYID}&quot;, &quot;authUserId&quot;: &quot;${AUTHUSERID}&quot;,&quot;keyFingerprint&quot;: &quot;${FINGERPRINT}&quot;,&quot;privateKeyFilename&quot;: &quot;${PRIVATEKEY}&quot;, &quot;geturl&quot;: &quot;https://${hostname}/20190325/metastores/${instanceid}/actions/execute&quot;, &quot;messageBody&quot;:&quot;{\&quot;params\&quot;:{\&quot;catName\&quot;:\&quot;${catalog}\&quot;,\&quot;dbName\&quot;:\&quot;${database}\&quot;},\&quot;payload\&quot;:\&quot;\&quot;,\&quot;methodName\&quot;:\&quot;getTables\&quot;,\&quot;metastoreVersion\&quot;:\&quot;3.1.2\&quot;}&quot;, &quot;restType&quot; : &quot;POST&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${OCIMicroservice}</stringProp>
          <stringProp name="HTTPSampler.port">9080</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/sign/getsignature</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">date7</stringProp>
            <stringProp name="RegexExtractor.regex">date:(.*?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">keyid7</stringProp>
            <stringProp name="RegexExtractor.regex">Authorization:(.+);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SHAPA</stringProp>
            <stringProp name="RegexExtractor.regex">x-content-sha256:(.+?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">100</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="false">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DCAT MS GET Tables" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;params&quot;:{&quot;catName&quot;:&quot;${catalog}&quot;,&quot;dbName&quot;:&quot;${database}&quot;},&quot;payload&quot;:&quot;&quot;,&quot;methodName&quot;:&quot;getTables&quot;,&quot;metastoreVersion&quot;:&quot;3.1.2&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">20190325/metastores/${instanceid}/actions/execute</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${keyid7}</stringProp>
              </elementProp>
              <elementProp name="date" elementType="Header">
                <stringProp name="Header.name">date</stringProp>
                <stringProp name="Header.value">${date7}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">host</stringProp>
                <stringProp name="Header.value">${hostname}</stringProp>
              </elementProp>
              <elementProp name="x-content-sha256" elementType="Header">
                <stringProp name="Header.name">x-content-sha256</stringProp>
                <stringProp name="Header.value">${SHAPA}</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="table" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">table</stringProp>
            <stringProp name="RegexExtractor.regex">\\&quot;(.*?)\\&quot;,</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">100</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="false">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Catalog Signature" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;tenancyId&quot;: &quot;${TENANCYID}&quot;, &quot;authUserId&quot;: &quot;${AUTHUSERID}&quot;,&quot;keyFingerprint&quot;: &quot;${FINGERPRINT}&quot;,&quot;privateKeyFilename&quot;: &quot;${PRIVATEKEY}&quot;, &quot;geturl&quot;: &quot;https://${hostname}/20190325/metastores/${instanceid}/actions/execute&quot;, &quot;messageBody&quot;:&quot;{\&quot;params\&quot;:{\&quot;catName\&quot;:\&quot;${catalog}\&quot;},\&quot;payload\&quot;:\&quot;\&quot;,\&quot;methodName\&quot;:\&quot;getCatalog\&quot;,\&quot;metastoreVersion\&quot;:\&quot;3.1.2\&quot;}&quot;, &quot;restType&quot; : &quot;POST&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${OCIMicroservice}</stringProp>
          <stringProp name="HTTPSampler.port">9080</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/sign/getsignature</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">date7</stringProp>
            <stringProp name="RegexExtractor.regex">date:(.*?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">keyid7</stringProp>
            <stringProp name="RegexExtractor.regex">Authorization:(.+);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SHAPA</stringProp>
            <stringProp name="RegexExtractor.regex">x-content-sha256:(.+?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">100</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="false">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="false">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">30</stringProp>
        </LoopController>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET TableMeta Signature" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;tenancyId&quot;: &quot;${TENANCYID}&quot;, &quot;authUserId&quot;: &quot;${AUTHUSERID}&quot;,&quot;keyFingerprint&quot;: &quot;${FINGERPRINT}&quot;,&quot;privateKeyFilename&quot;: &quot;${PRIVATEKEY}&quot;, &quot;geturl&quot;: &quot;https://${hostname}/20190325/metastores/${instanceid}/actions/execute&quot;, &quot;messageBody&quot;:&quot;{\&quot;params\&quot;:{\&quot;catName\&quot;:\&quot;hive\&quot;,\&quot;databasePatterns\&quot;:\&quot;default\&quot;,\&quot;tablePatterns\&quot;:\&quot;stdtbl16266942681626694268831\&quot;,\&quot;tableTypes\&quot;:\&quot;[\\/\\/\&quot;MANAGED_TABLE\\/\\/\&quot;]\&quot;},\&quot;payload\&quot;:\&quot;\&quot;,\&quot;methodName\&quot;:\&quot;getTableMeta\&quot;,\&quot;metastoreVersion\&quot;:\&quot;3.1.2\&quot;}&quot;, &quot;restType&quot; : &quot;POST&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${OCIMicroservice}</stringProp>
          <stringProp name="HTTPSampler.port">9080</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/sign/getsignature</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">date7</stringProp>
            <stringProp name="RegexExtractor.regex">date:(.*?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">keyid7</stringProp>
            <stringProp name="RegexExtractor.regex">Authorization:(.+);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SHAPA</stringProp>
            <stringProp name="RegexExtractor.regex">x-content-sha256:(.+?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DCAT MS GET TableMeta" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;params&quot;:{&quot;catName&quot;:&quot;hive&quot;,&quot;databasePatterns&quot;:&quot;default&quot;,&quot;tablePatterns&quot;:&quot;stdtbl16266942681626694268831&quot;,&quot;tableTypes&quot;:&quot;[\&quot;MANAGED_TABLE\&quot;]&quot;},&quot;payload&quot;:&quot;&quot;,&quot;methodName&quot;:&quot;getTableMeta&quot;,&quot;metastoreVersion&quot;:&quot;3.1.2&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">20190325/metastores/${instanceid}/actions/execute</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${keyid7}</stringProp>
              </elementProp>
              <elementProp name="date" elementType="Header">
                <stringProp name="Header.name">date</stringProp>
                <stringProp name="Header.value">${date7}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">host</stringProp>
                <stringProp name="Header.value">${hostname}</stringProp>
              </elementProp>
              <elementProp name="x-content-sha256" elementType="Header">
                <stringProp name="Header.name">x-content-sha256</stringProp>
                <stringProp name="Header.value">${SHAPA}</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET TableMeta Signature" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;tenancyId&quot;: &quot;${TENANCYID}&quot;, &quot;authUserId&quot;: &quot;${AUTHUSERID}&quot;,&quot;keyFingerprint&quot;: &quot;${FINGERPRINT}&quot;,&quot;privateKeyFilename&quot;: &quot;${PRIVATEKEY}&quot;, &quot;geturl&quot;: &quot;https://${hostname}/20190325/metastores/${instanceid}/actions/execute&quot;, &quot;messageBody&quot;:&quot;{\&quot;params\&quot;:{\&quot;catName\&quot;:\&quot;hive\&quot;,\&quot;databasePatterns\&quot;:\&quot;default\&quot;,\&quot;tablePatterns\&quot;:\&quot;stdtbl16245899121624589912157\&quot;,\&quot;tableTypes\&quot;:\&quot;[\\\&quot;MANAGED_TABLE\\\&quot;]\&quot;},\&quot;payload\&quot;:\&quot;\&quot;,\&quot;methodName\&quot;:\&quot;getTableMeta\&quot;,\&quot;metastoreVersion\&quot;:\&quot;3.1.2\&quot;}&quot;, &quot;restType&quot; : &quot;POST&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${OCIMicroservice}</stringProp>
          <stringProp name="HTTPSampler.port">9080</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/sign/getsignature</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">date7</stringProp>
            <stringProp name="RegexExtractor.regex">date:(.*?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">keyid7</stringProp>
            <stringProp name="RegexExtractor.regex">Authorization:(.+);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SHAPA</stringProp>
            <stringProp name="RegexExtractor.regex">x-content-sha256:(.+?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DCAT MS GET TableMeta" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;params&quot;:{&quot;catName&quot;:&quot;hive&quot;,&quot;databasePatterns&quot;:&quot;default&quot;,&quot;tablePatterns&quot;:&quot;stdtbl16245899121624589912157&quot;,&quot;tableTypes&quot;:&quot;[\&quot;MANAGED_TABLE\&quot;]&quot;},&quot;payload&quot;:&quot;&quot;,&quot;methodName&quot;:&quot;getTableMeta&quot;,&quot;metastoreVersion&quot;:&quot;3.1.2&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">20190325/metastores/${instanceid}/actions/execute</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="glossaryKey" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">glossaryKey</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..key</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">null</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET getTableColumnStatistics Signature" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;tenancyId&quot;: &quot;${TENANCYID}&quot;, &quot;authUserId&quot;: &quot;${AUTHUSERID}&quot;,&quot;keyFingerprint&quot;: &quot;${FINGERPRINT}&quot;,&quot;privateKeyFilename&quot;: &quot;${PRIVATEKEY}&quot;, &quot;geturl&quot;: &quot;https://${hostname}/20190325/metastores/${instanceid}/actions/execute&quot;, &quot;messageBody&quot;:&quot;{\&quot;params\&quot;:{\&quot;catName\&quot;:\&quot;hive\&quot;,\&quot;dbName\&quot;:\&quot;default\&quot;,\&quot;columnNames\&quot;:\&quot;[\\\&quot;stdCol_0_stdTbl16233103881623310388043\\\&quot;,\\\&quot;stdCol_1_stdTbl16233103881623310388043\\\&quot;]\&quot;,\&quot;tblName\&quot;:\&quot;stdTbl16233103881623310388043\&quot;},\&quot;payload\&quot;:\&quot;\&quot;,\&quot;methodName\&quot;:\&quot;getTableColumnStatistics\&quot;,\&quot;metastoreVersion\&quot;:\&quot;3.1.2\&quot;}&quot;, &quot;restType&quot; : &quot;POST&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${OCIMicroservice}</stringProp>
          <stringProp name="HTTPSampler.port">9080</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/sign/getsignature</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">date7</stringProp>
            <stringProp name="RegexExtractor.regex">date:(.*?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">keyid7</stringProp>
            <stringProp name="RegexExtractor.regex">Authorization:(.+);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SHAPA</stringProp>
            <stringProp name="RegexExtractor.regex">x-content-sha256:(.+?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DCAT MS GET getTableColumnStatistics" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;params&quot;:{&quot;catName&quot;:&quot;hive&quot;,&quot;dbName&quot;:&quot;default&quot;,&quot;columnNames&quot;:&quot;[\&quot;stdCol_0_stdTbl16233103881623310388043\&quot;,\&quot;stdCol_1_stdTbl16233103881623310388043\&quot;]&quot;,&quot;tblName&quot;:&quot;stdTbl16233103881623310388043&quot;},&quot;payload&quot;:&quot;&quot;,&quot;methodName&quot;:&quot;getTableColumnStatistics&quot;,&quot;metastoreVersion&quot;:&quot;3.1.2&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">20190325/metastores/${instanceid}/actions/execute</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${keyid7}</stringProp>
              </elementProp>
              <elementProp name="date" elementType="Header">
                <stringProp name="Header.name">date</stringProp>
                <stringProp name="Header.value">${date7}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">host</stringProp>
                <stringProp name="Header.value">${hostname}</stringProp>
              </elementProp>
              <elementProp name="x-content-sha256" elementType="Header">
                <stringProp name="Header.name">x-content-sha256</stringProp>
                <stringProp name="Header.value">${SHAPA}</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="glossaryKey" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">glossaryKey</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..key</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">null</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET listPartitionNames Signature" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;tenancyId&quot;: &quot;${TENANCYID}&quot;, &quot;authUserId&quot;: &quot;${AUTHUSERID}&quot;,&quot;keyFingerprint&quot;: &quot;${FINGERPRINT}&quot;,&quot;privateKeyFilename&quot;: &quot;${PRIVATEKEY}&quot;, &quot;geturl&quot;: &quot;https://${hostname}/20190325/metastores/${instanceid}/actions/execute&quot;, &quot;messageBody&quot;:&quot;{\&quot;params\&quot;:{\&quot;catName\&quot;:\&quot;hive\&quot;,\&quot;dbName\&quot;:\&quot;default\&quot;,\&quot;maxParts\&quot;:\&quot;-1\&quot;,\&quot;tblName\&quot;:\&quot;${table}\&quot;},\&quot;payload\&quot;:\&quot;\&quot;,\&quot;methodName\&quot;:\&quot;listPartitionNames\&quot;,\&quot;metastoreVersion\&quot;:\&quot;3.1.2\&quot;}&quot;, &quot;restType&quot; : &quot;POST&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${OCIMicroservice}</stringProp>
          <stringProp name="HTTPSampler.port">9080</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/sign/getsignature</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">date7</stringProp>
            <stringProp name="RegexExtractor.regex">date:(.*?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">keyid7</stringProp>
            <stringProp name="RegexExtractor.regex">Authorization:(.+);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SHAPA</stringProp>
            <stringProp name="RegexExtractor.regex">x-content-sha256:(.+?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">100</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="false">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DCAT MS GET listPartitionNames" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;params&quot;:{&quot;catName&quot;:&quot;hive&quot;,&quot;dbName&quot;:&quot;default&quot;,&quot;maxParts&quot;:&quot;-1&quot;,&quot;tblName&quot;:&quot;${table}&quot;},&quot;payload&quot;:&quot;&quot;,&quot;methodName&quot;:&quot;listPartitionNames&quot;,&quot;metastoreVersion&quot;:&quot;3.1.2&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">20190325/metastores/${instanceid}/actions/execute</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${keyid7}</stringProp>
              </elementProp>
              <elementProp name="date" elementType="Header">
                <stringProp name="Header.name">date</stringProp>
                <stringProp name="Header.value">${date7}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">host</stringProp>
                <stringProp name="Header.value">${hostname}</stringProp>
              </elementProp>
              <elementProp name="x-content-sha256" elementType="Header">
                <stringProp name="Header.name">x-content-sha256</stringProp>
                <stringProp name="Header.value">${SHAPA}</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="listPartitionNames" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">listPartitionNames</stringProp>
            <stringProp name="RegexExtractor.regex">\\&quot;(.*?)\\&quot;,</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="jp@gc - JSON/YAML Path Assertion" enabled="true">
            <stringProp name="JSON_PATH">$.*</stringProp>
            <stringProp name="EXPECTED_VALUE">[]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">true</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
            <stringProp name="INPUT_FORMAT">JSON</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">100</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="false">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET getPartitions Signature" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;tenancyId&quot;: &quot;${TENANCYID}&quot;, &quot;authUserId&quot;: &quot;${AUTHUSERID}&quot;,&quot;keyFingerprint&quot;: &quot;${FINGERPRINT}&quot;,&quot;privateKeyFilename&quot;: &quot;${PRIVATEKEY}&quot;, &quot;geturl&quot;: &quot;https://${hostname}/20190325/metastores/${instanceid}/actions/execute&quot;, &quot;messageBody&quot;:&quot;{\&quot;params\&quot;:{\&quot;catName\&quot;:\&quot;hive\&quot;,\&quot;dbName\&quot;:\&quot;default\&quot;,\&quot;maxParts\&quot;:\&quot;-1\&quot;,\&quot;tblName\&quot;:\&quot;${table}\&quot;},\&quot;payload\&quot;:\&quot;\&quot;,\&quot;methodName\&quot;:\&quot;getPartitions\&quot;,\&quot;metastoreVersion\&quot;:\&quot;3.1.2\&quot;}&quot;, &quot;restType&quot; : &quot;POST&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${OCIMicroservice}</stringProp>
          <stringProp name="HTTPSampler.port">9080</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/sign/getsignature</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">date7</stringProp>
            <stringProp name="RegexExtractor.regex">date:(.*?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">keyid7</stringProp>
            <stringProp name="RegexExtractor.regex">Authorization:(.+);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">SHAPA</stringProp>
            <stringProp name="RegexExtractor.regex">x-content-sha256:(.+?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">100</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="false">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DCAT MS GET getPartitions" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;params&quot;:{&quot;catName&quot;:&quot;hive&quot;,&quot;dbName&quot;:&quot;default&quot;,&quot;maxParts&quot;:&quot;-1&quot;,&quot;tblName&quot;:&quot;${table}&quot;},&quot;payload&quot;:&quot;&quot;,&quot;methodName&quot;:&quot;getPartitions&quot;,&quot;metastoreVersion&quot;:&quot;3.1.2&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">20190325/metastores/${instanceid}/actions/execute</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${keyid7}</stringProp>
              </elementProp>
              <elementProp name="date" elementType="Header">
                <stringProp name="Header.name">date</stringProp>
                <stringProp name="Header.value">${date7}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">host</stringProp>
                <stringProp name="Header.value">${hostname}</stringProp>
              </elementProp>
              <elementProp name="x-content-sha256" elementType="Header">
                <stringProp name="Header.name">x-content-sha256</stringProp>
                <stringProp name="Header.value">${SHAPA}</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getPartitions" enabled="false">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">getPartitions</stringProp>
            <stringProp name="RegexExtractor.regex">\\&quot;(.*?)\\&quot;,</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="jp@gc - JSON/YAML Path Assertion" enabled="true">
            <stringProp name="JSON_PATH">$.*</stringProp>
            <stringProp name="EXPECTED_VALUE">[]</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">true</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
            <stringProp name="INPUT_FORMAT">JSON</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="getPartitions match writer to file" enabled="false">
            <stringProp name="TestPlan.comments">This is filter out all the sourcekey that aren&apos;t null and write it out to a file</stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import org.apache.commons.io.FileUtils
import java.text.SimpleDateFormat;
// Get total number of matches. (Returns string)
def resultCount = vars.get(&quot;table&quot;)
log.warn &apos;Output to jmeter console&apos; +  resultCount
// Generate timestamp to create uniue file name.
String fileSuffix = new SimpleDateFormat(&quot;ddMMyyyy&quot;).format(new Date())
// Create file Object
f = new File(&quot;/Users/zameermalim/Documents/Oracle/Vms/HIveMetaStore/jMeterResults/23Jun/getPartitions_&quot;+fileSuffix+&quot;.csv&quot;)
records = vars.get(&quot;table&quot;)
FileUtils.writeStringToFile(f,records + System.getProperty(&quot;line.separator&quot;),true)
//for (int i=1; i&lt;=resultCount.toInteger(); i++)
//{
  // Get each matching result one by one.
  //records = vars.get(&quot;ExtractedName_&quot;+i)
// Write result to csv file.
  //FileUtils.writeStringToFile(f,records + System.getProperty(&quot;line.separator&quot;),true)
//}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">100</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="false">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>false</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>false</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>true</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <hostname>true</hostname>
            <threadCounts>true</threadCounts>
            <sampleCount>true</sampleCount>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <boolProp name="useGroupName">true</boolProp>
      </ResultCollector>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.LatenciesOverTimeGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Response Latencies Over Time" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <longProp name="interval_grouping">500</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.ResponseTimesOverTimeGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Response Times Over Time" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <longProp name="interval_grouping">500</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.TransactionsPerSecondGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Transactions per Second" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <longProp name="interval_grouping">1000</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
      <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
